# Generated from /Users/aleksandrrudakov/dev/generator/grammar/ZmeiLangParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0080")
        buf.write("\u053d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\3\2\7")
        buf.write("\2\u0140\n\2\f\2\16\2\u0143\13\2\3\2\7\2\u0146\n\2\f\2")
        buf.write("\16\2\u0149\13\2\3\2\5\2\u014c\n\2\3\2\7\2\u014f\n\2\f")
        buf.write("\2\16\2\u0152\13\2\3\2\7\2\u0155\n\2\f\2\16\2\u0158\13")
        buf.write("\2\3\2\5\2\u015b\n\2\3\2\7\2\u015e\n\2\f\2\16\2\u0161")
        buf.write("\13\2\3\2\7\2\u0164\n\2\f\2\16\2\u0167\13\2\3\2\3\2\3")
        buf.write("\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\5\7\u0176\n")
        buf.write("\7\3\7\3\7\3\7\3\7\7\7\u017c\n\7\f\7\16\7\u017f\13\7\3")
        buf.write("\7\3\7\3\7\5\7\u0184\n\7\3\7\7\7\u0187\n\7\f\7\16\7\u018a")
        buf.write("\13\7\5\7\u018c\n\7\3\b\5\b\u018f\n\b\3\b\3\b\5\b\u0193")
        buf.write("\n\b\3\t\3\t\3\t\3\t\3\n\3\n\5\n\u019b\n\n\3\13\3\13\3")
        buf.write("\13\3\13\3\f\3\f\3\f\3\f\3\r\5\r\u01a6\n\r\3\r\3\r\5\r")
        buf.write("\u01aa\n\r\3\r\5\r\u01ad\n\r\7\r\u01af\n\r\f\r\16\r\u01b2")
        buf.write("\13\r\3\16\3\16\3\16\7\16\u01b7\n\16\f\16\16\16\u01ba")
        buf.write("\13\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\7\16\u01c6\n\16\f\16\16\16\u01c9\13\16\3\16\3\16\5")
        buf.write("\16\u01cd\n\16\3\17\3\17\5\17\u01d1\n\17\3\20\3\20\5\20")
        buf.write("\u01d5\n\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3")
        buf.write("\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\27\5\27\u01e8")
        buf.write("\n\27\3\30\3\30\3\30\5\30\u01ed\n\30\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\32\3\32\3\32\7\32\u01f7\n\32\f\32\16\32\u01fa")
        buf.write("\13\32\3\33\3\33\3\33\3\33\3\33\5\33\u0201\n\33\3\34\3")
        buf.write("\34\3\35\3\35\5\35\u0207\n\35\3\35\7\35\u020a\n\35\f\35")
        buf.write("\16\35\u020d\13\35\3\35\7\35\u0210\n\35\f\35\16\35\u0213")
        buf.write("\13\35\3\35\7\35\u0216\n\35\f\35\16\35\u0219\13\35\3\35")
        buf.write("\7\35\u021c\n\35\f\35\16\35\u021f\13\35\3\35\7\35\u0222")
        buf.write("\n\35\f\35\16\35\u0225\13\35\3\36\3\36\3\36\6\36\u022a")
        buf.write("\n\36\r\36\16\36\u022b\3\36\5\36\u022f\n\36\3\37\3\37")
        buf.write("\5\37\u0233\n\37\3\37\3\37\5\37\u0237\n\37\3\37\3\37\3")
        buf.write("\37\3 \3 \3 \3 \5 \u0240\n \3!\3!\3!\5!\u0245\n!\3\"\3")
        buf.write("\"\3\"\3#\3#\3$\7$\u024d\n$\f$\16$\u0250\13$\3$\3$\5$")
        buf.write("\u0254\n$\3$\5$\u0257\n$\3$\5$\u025a\n$\3$\6$\u025d\n")
        buf.write("$\r$\16$\u025e\3$\5$\u0262\n$\3%\3%\3%\3%\3%\5%\u0269")
        buf.write("\n%\3&\3&\3\'\3\'\3\'\3(\3(\3)\3)\3*\6*\u0275\n*\r*\16")
        buf.write("*\u0276\3*\3*\5*\u027b\n*\3+\3+\3+\3,\3,\3,\3-\3-\3.\3")
        buf.write(".\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\5/\u0299\n/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\3\63")
        buf.write("\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\38\39\39\3")
        buf.write(":\3:\3;\3;\3<\3<\3<\3<\3<\5<\u02b8\n<\3<\3<\5<\u02bc\n")
        buf.write("<\3=\3=\3>\3>\3>\3>\3>\7>\u02c5\n>\f>\16>\u02c8\13>\3")
        buf.write("?\5?\u02cb\n?\3?\3?\3@\3@\3@\5@\u02d2\n@\3A\3A\3A\3B\3")
        buf.write("B\3B\3B\3B\5B\u02dc\nB\3C\3C\3C\3C\3C\7C\u02e3\nC\fC\16")
        buf.write("C\u02e6\13C\3D\5D\u02e9\nD\3D\3D\3E\3E\3E\5E\u02f0\nE")
        buf.write("\3F\3F\3F\3G\3G\3G\3G\3G\3H\3H\3H\7H\u02fd\nH\fH\16H\u0300")
        buf.write("\13H\3I\3I\3J\3J\3J\3J\3J\5J\u0309\nJ\3K\3K\3L\3L\3L\3")
        buf.write("L\3L\5L\u0312\nL\3M\3M\3N\3N\3N\7N\u0319\nN\fN\16N\u031c")
        buf.write("\13N\3O\3O\3O\3O\3P\3P\3Q\3Q\3Q\3R\7R\u0328\nR\fR\16R")
        buf.write("\u032b\13R\3S\3S\3T\3T\3T\3T\5T\u0333\nT\3T\5T\u0336\n")
        buf.write("T\3T\3T\3U\3U\3V\3V\3V\3W\3W\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0351\nY\3Z\3Z\3Z\3Z\3Z\3[\3")
        buf.write("[\3\\\3\\\3\\\3\\\3\\\3]\3]\3]\7]\u0362\n]\f]\16]\u0365")
        buf.write("\13]\3^\3^\3^\5^\u036a\n^\3^\3^\3^\3^\5^\u0370\n^\3_\3")
        buf.write("_\3_\3_\7_\u0376\n_\f_\16_\u0379\13_\3`\3`\3`\3`\3`\3")
        buf.write("`\3`\3`\3`\3`\7`\u0385\n`\f`\16`\u0388\13`\3a\3a\3b\3")
        buf.write("b\3b\3b\7b\u0390\nb\fb\16b\u0393\13b\3c\3c\3c\7c\u0398")
        buf.write("\nc\fc\16c\u039b\13c\3d\3d\5d\u039f\nd\3d\3d\7d\u03a3")
        buf.write("\nd\fd\16d\u03a6\13d\3e\3e\3e\3e\7e\u03ac\ne\fe\16e\u03af")
        buf.write("\13e\3f\3f\3f\3f\7f\u03b5\nf\ff\16f\u03b8\13f\3g\3g\3")
        buf.write("g\3g\5g\u03be\ng\3g\7g\u03c1\ng\fg\16g\u03c4\13g\3h\3")
        buf.write("h\3i\3i\3i\3i\3i\7i\u03cd\ni\fi\16i\u03d0\13i\3i\3i\3")
        buf.write("j\3j\3j\3j\5j\u03d8\nj\3k\3k\3k\3l\3l\3m\3m\3m\3m\7m\u03e3")
        buf.write("\nm\fm\16m\u03e6\13m\3n\3n\3n\3n\5n\u03ec\nn\3o\3o\3p")
        buf.write("\3p\3q\3q\3q\3q\3q\6q\u03f7\nq\rq\16q\u03f8\3r\3r\3r\3")
        buf.write("r\3r\3s\3s\3t\3t\3t\3t\3t\3t\7t\u0408\nt\ft\16t\u040b")
        buf.write("\13t\5t\u040d\nt\3t\3t\5t\u0411\nt\3u\3u\3v\3v\3w\3w\3")
        buf.write("w\3x\3x\3x\3y\3y\3y\3z\3z\3z\3{\3{\3{\3|\3|\3|\3}\3}\3")
        buf.write("}\3}\5}\u042d\n}\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3")
        buf.write("~\3~\7~\u043d\n~\f~\16~\u0440\13~\3~\7~\u0443\n~\f~\16")
        buf.write("~\u0446\13~\3~\5~\u0449\n~\3~\7~\u044c\n~\f~\16~\u044f")
        buf.write("\13~\3\177\3\177\3\177\7\177\u0454\n\177\f\177\16\177")
        buf.write("\u0457\13\177\3\177\3\177\3\177\7\177\u045c\n\177\f\177")
        buf.write("\16\177\u045f\13\177\3\177\7\177\u0462\n\177\f\177\16")
        buf.write("\177\u0465\13\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\7\u0080\u046c\n\u0080\f\u0080\16\u0080\u046f\13\u0080")
        buf.write("\3\u0081\3\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\7\u0083\u047a\n\u0083\f\u0083\16\u0083")
        buf.write("\u047d\13\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\7\u0084\u0486\n\u0084\f\u0084\16\u0084")
        buf.write("\u0489\13\u0084\3\u0084\5\u0084\u048c\n\u0084\3\u0085")
        buf.write("\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\7\u0089\u04a1\n\u0089")
        buf.write("\f\u0089\16\u0089\u04a4\13\u0089\3\u008a\3\u008a\5\u008a")
        buf.write("\u04a8\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b")
        buf.write("\3\u008b\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\7\u008d\u04b6\n\u008d\f\u008d\16\u008d\u04b9\13\u008d")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\7\u008e\u04bf\n\u008e")
        buf.write("\f\u008e\16\u008e\u04c2\13\u008e\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\7\u008f\u04c8\n\u008f\f\u008f\16\u008f\u04cb")
        buf.write("\13\u008f\3\u0090\3\u0090\3\u0090\3\u0090\7\u0090\u04d1")
        buf.write("\n\u0090\f\u0090\16\u0090\u04d4\13\u0090\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\7\u0091\u04da\n\u0091\f\u0091\16\u0091")
        buf.write("\u04dd\13\u0091\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092")
        buf.write("\u04e3\n\u0092\f\u0092\16\u0092\u04e6\13\u0092\3\u0093")
        buf.write("\3\u0093\7\u0093\u04ea\n\u0093\f\u0093\16\u0093\u04ed")
        buf.write("\13\u0093\3\u0093\7\u0093\u04f0\n\u0093\f\u0093\16\u0093")
        buf.write("\u04f3\13\u0093\3\u0093\5\u0093\u04f6\n\u0093\3\u0093")
        buf.write("\5\u0093\u04f9\n\u0093\3\u0093\7\u0093\u04fc\n\u0093\f")
        buf.write("\u0093\16\u0093\u04ff\13\u0093\3\u0094\3\u0094\3\u0095")
        buf.write("\3\u0095\5\u0095\u0505\n\u0095\3\u0095\3\u0095\5\u0095")
        buf.write("\u0509\n\u0095\3\u0095\3\u0095\5\u0095\u050d\n\u0095\3")
        buf.write("\u0095\3\u0095\5\u0095\u0511\n\u0095\5\u0095\u0513\n\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0098\3\u0098\3\u0099\3\u0099\3\u009a")
        buf.write("\3\u009a\3\u009a\5\u009a\u0525\n\u009a\3\u009b\3\u009b")
        buf.write("\3\u009b\5\u009b\u052a\n\u009b\3\u009c\3\u009c\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\6\u009d\u0532\n\u009d\r\u009d")
        buf.write("\16\u009d\u0533\3\u009d\5\u009d\u0537\n\u009d\3\u009e")
        buf.write("\3\u009e\3\u009f\3\u009f\3\u009f\2\2\u00a0\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\2\16\5\2\22\23\25BDD\3\2rs\3\2{|\5\2CCeett\4\2")
        buf.write("CCee\3\2RS\3\2UV\3\2gh\3\2_d\4\2EEOO\5\2\65\65\67\67:")
        buf.write(":\3\2?A\2\u0559\2\u0141\3\2\2\2\4\u016a\3\2\2\2\6\u016d")
        buf.write("\3\2\2\2\b\u0170\3\2\2\2\n\u0172\3\2\2\2\f\u018b\3\2\2")
        buf.write("\2\16\u018e\3\2\2\2\20\u0194\3\2\2\2\22\u019a\3\2\2\2")
        buf.write("\24\u019c\3\2\2\2\26\u01a0\3\2\2\2\30\u01a5\3\2\2\2\32")
        buf.write("\u01cc\3\2\2\2\34\u01d0\3\2\2\2\36\u01d4\3\2\2\2 \u01d6")
        buf.write("\3\2\2\2\"\u01d8\3\2\2\2$\u01da\3\2\2\2&\u01dc\3\2\2\2")
        buf.write("(\u01e0\3\2\2\2*\u01e2\3\2\2\2,\u01e7\3\2\2\2.\u01e9\3")
        buf.write("\2\2\2\60\u01ee\3\2\2\2\62\u01f3\3\2\2\2\64\u01fb\3\2")
        buf.write("\2\2\66\u0202\3\2\2\28\u0204\3\2\2\2:\u0226\3\2\2\2<\u0230")
        buf.write("\3\2\2\2>\u023b\3\2\2\2@\u0244\3\2\2\2B\u0246\3\2\2\2")
        buf.write("D\u0249\3\2\2\2F\u024e\3\2\2\2H\u0268\3\2\2\2J\u026a\3")
        buf.write("\2\2\2L\u026c\3\2\2\2N\u026f\3\2\2\2P\u0271\3\2\2\2R\u027a")
        buf.write("\3\2\2\2T\u027c\3\2\2\2V\u027f\3\2\2\2X\u0282\3\2\2\2")
        buf.write("Z\u0284\3\2\2\2\\\u0298\3\2\2\2^\u029a\3\2\2\2`\u029c")
        buf.write("\3\2\2\2b\u029e\3\2\2\2d\u02a0\3\2\2\2f\u02a2\3\2\2\2")
        buf.write("h\u02a4\3\2\2\2j\u02a6\3\2\2\2l\u02a8\3\2\2\2n\u02aa\3")
        buf.write("\2\2\2p\u02ac\3\2\2\2r\u02ae\3\2\2\2t\u02b0\3\2\2\2v\u02b2")
        buf.write("\3\2\2\2x\u02bd\3\2\2\2z\u02bf\3\2\2\2|\u02ca\3\2\2\2")
        buf.write("~\u02d1\3\2\2\2\u0080\u02d3\3\2\2\2\u0082\u02d6\3\2\2")
        buf.write("\2\u0084\u02dd\3\2\2\2\u0086\u02e8\3\2\2\2\u0088\u02ef")
        buf.write("\3\2\2\2\u008a\u02f1\3\2\2\2\u008c\u02f4\3\2\2\2\u008e")
        buf.write("\u02f9\3\2\2\2\u0090\u0301\3\2\2\2\u0092\u0303\3\2\2\2")
        buf.write("\u0094\u030a\3\2\2\2\u0096\u030c\3\2\2\2\u0098\u0313\3")
        buf.write("\2\2\2\u009a\u0315\3\2\2\2\u009c\u031d\3\2\2\2\u009e\u0321")
        buf.write("\3\2\2\2\u00a0\u0323\3\2\2\2\u00a2\u0329\3\2\2\2\u00a4")
        buf.write("\u032c\3\2\2\2\u00a6\u032e\3\2\2\2\u00a8\u0339\3\2\2\2")
        buf.write("\u00aa\u033b\3\2\2\2\u00ac\u033e\3\2\2\2\u00ae\u0340\3")
        buf.write("\2\2\2\u00b0\u0350\3\2\2\2\u00b2\u0352\3\2\2\2\u00b4\u0357")
        buf.write("\3\2\2\2\u00b6\u0359\3\2\2\2\u00b8\u035e\3\2\2\2\u00ba")
        buf.write("\u0366\3\2\2\2\u00bc\u0371\3\2\2\2\u00be\u0386\3\2\2\2")
        buf.write("\u00c0\u0389\3\2\2\2\u00c2\u038b\3\2\2\2\u00c4\u0394\3")
        buf.write("\2\2\2\u00c6\u039c\3\2\2\2\u00c8\u03a7\3\2\2\2\u00ca\u03b0")
        buf.write("\3\2\2\2\u00cc\u03b9\3\2\2\2\u00ce\u03c5\3\2\2\2\u00d0")
        buf.write("\u03c7\3\2\2\2\u00d2\u03d3\3\2\2\2\u00d4\u03d9\3\2\2\2")
        buf.write("\u00d6\u03dc\3\2\2\2\u00d8\u03de\3\2\2\2\u00da\u03e7\3")
        buf.write("\2\2\2\u00dc\u03ed\3\2\2\2\u00de\u03ef\3\2\2\2\u00e0\u03f1")
        buf.write("\3\2\2\2\u00e2\u03fa\3\2\2\2\u00e4\u03ff\3\2\2\2\u00e6")
        buf.write("\u0401\3\2\2\2\u00e8\u0412\3\2\2\2\u00ea\u0414\3\2\2\2")
        buf.write("\u00ec\u0416\3\2\2\2\u00ee\u0419\3\2\2\2\u00f0\u041c\3")
        buf.write("\2\2\2\u00f2\u041f\3\2\2\2\u00f4\u0422\3\2\2\2\u00f6\u0425")
        buf.write("\3\2\2\2\u00f8\u0428\3\2\2\2\u00fa\u042e\3\2\2\2\u00fc")
        buf.write("\u0450\3\2\2\2\u00fe\u0466\3\2\2\2\u0100\u0470\3\2\2\2")
        buf.write("\u0102\u0472\3\2\2\2\u0104\u0474\3\2\2\2\u0106\u047e\3")
        buf.write("\2\2\2\u0108\u048d\3\2\2\2\u010a\u048f\3\2\2\2\u010c\u0493")
        buf.write("\3\2\2\2\u010e\u0497\3\2\2\2\u0110\u049b\3\2\2\2\u0112")
        buf.write("\u04a5\3\2\2\2\u0114\u04ad\3\2\2\2\u0116\u04af\3\2\2\2")
        buf.write("\u0118\u04b1\3\2\2\2\u011a\u04ba\3\2\2\2\u011c\u04c3\3")
        buf.write("\2\2\2\u011e\u04cc\3\2\2\2\u0120\u04d5\3\2\2\2\u0122\u04de")
        buf.write("\3\2\2\2\u0124\u04e7\3\2\2\2\u0126\u0500\3\2\2\2\u0128")
        buf.write("\u0502\3\2\2\2\u012a\u0517\3\2\2\2\u012c\u051a\3\2\2\2")
        buf.write("\u012e\u051d\3\2\2\2\u0130\u051f\3\2\2\2\u0132\u0524\3")
        buf.write("\2\2\2\u0134\u0529\3\2\2\2\u0136\u052b\3\2\2\2\u0138\u052d")
        buf.write("\3\2\2\2\u013a\u0538\3\2\2\2\u013c\u053a\3\2\2\2\u013e")
        buf.write("\u0140\7C\2\2\u013f\u013e\3\2\2\2\u0140\u0143\3\2\2\2")
        buf.write("\u0141\u013f\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0147\3")
        buf.write("\2\2\2\u0143\u0141\3\2\2\2\u0144\u0146\5,\27\2\u0145\u0144")
        buf.write("\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0145\3\2\2\2\u0147")
        buf.write("\u0148\3\2\2\2\u0148\u014b\3\2\2\2\u0149\u0147\3\2\2\2")
        buf.write("\u014a\u014c\5\4\3\2\u014b\u014a\3\2\2\2\u014b\u014c\3")
        buf.write("\2\2\2\u014c\u0150\3\2\2\2\u014d\u014f\7C\2\2\u014e\u014d")
        buf.write("\3\2\2\2\u014f\u0152\3\2\2\2\u0150\u014e\3\2\2\2\u0150")
        buf.write("\u0151\3\2\2\2\u0151\u0156\3\2\2\2\u0152\u0150\3\2\2\2")
        buf.write("\u0153\u0155\5\u0124\u0093\2\u0154\u0153\3\2\2\2\u0155")
        buf.write("\u0158\3\2\2\2\u0156\u0154\3\2\2\2\u0156\u0157\3\2\2\2")
        buf.write("\u0157\u015a\3\2\2\2\u0158\u0156\3\2\2\2\u0159\u015b\5")
        buf.write("\6\4\2\u015a\u0159\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015f")
        buf.write("\3\2\2\2\u015c\u015e\58\35\2\u015d\u015c\3\2\2\2\u015e")
        buf.write("\u0161\3\2\2\2\u015f\u015d\3\2\2\2\u015f\u0160\3\2\2\2")
        buf.write("\u0160\u0165\3\2\2\2\u0161\u015f\3\2\2\2\u0162\u0164\7")
        buf.write("C\2\2\u0163\u0162\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163")
        buf.write("\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0168\3\2\2\2\u0167")
        buf.write("\u0165\3\2\2\2\u0168\u0169\7\2\2\3\u0169\3\3\2\2\2\u016a")
        buf.write("\u016b\7*\2\2\u016b\u016c\5\b\5\2\u016c\5\3\2\2\2\u016d")
        buf.write("\u016e\7*\2\2\u016e\u016f\5\b\5\2\u016f\7\3\2\2\2\u0170")
        buf.write("\u0171\5\26\f\2\u0171\t\3\2\2\2\u0172\u0173\t\2\2\2\u0173")
        buf.write("\13\3\2\2\2\u0174\u0176\7Q\2\2\u0175\u0174\3\2\2\2\u0175")
        buf.write("\u0176\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u017d\7c\2\2")
        buf.write("\u0178\u0179\7P\2\2\u0179\u017a\7J\2\2\u017a\u017c\5\16")
        buf.write("\b\2\u017b\u0178\3\2\2\2\u017c\u017f\3\2\2\2\u017d\u017b")
        buf.write("\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u018c\3\2\2\2\u017f")
        buf.write("\u017d\3\2\2\2\u0180\u0188\5\n\6\2\u0181\u0183\7P\2\2")
        buf.write("\u0182\u0184\7J\2\2\u0183\u0182\3\2\2\2\u0183\u0184\3")
        buf.write("\2\2\2\u0184\u0185\3\2\2\2\u0185\u0187\5\16\b\2\u0186")
        buf.write("\u0181\3\2\2\2\u0187\u018a\3\2\2\2\u0188\u0186\3\2\2\2")
        buf.write("\u0188\u0189\3\2\2\2\u0189\u018c\3\2\2\2\u018a\u0188\3")
        buf.write("\2\2\2\u018b\u0175\3\2\2\2\u018b\u0180\3\2\2\2\u018c\r")
        buf.write("\3\2\2\2\u018d\u018f\7c\2\2\u018e\u018d\3\2\2\2\u018e")
        buf.write("\u018f\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0192\5\n\6\2")
        buf.write("\u0191\u0193\7c\2\2\u0192\u0191\3\2\2\2\u0192\u0193\3")
        buf.write("\2\2\2\u0193\17\3\2\2\2\u0194\u0195\7M\2\2\u0195\u0196")
        buf.write("\7\22\2\2\u0196\u0197\7N\2\2\u0197\21\3\2\2\2\u0198\u019b")
        buf.write("\5\26\f\2\u0199\u019b\5\24\13\2\u019a\u0198\3\2\2\2\u019a")
        buf.write("\u0199\3\2\2\2\u019b\23\3\2\2\2\u019c\u019d\7g\2\2\u019d")
        buf.write("\u019e\7l\2\2\u019e\u019f\7C\2\2\u019f\25\3\2\2\2\u01a0")
        buf.write("\u01a1\7i\2\2\u01a1\u01a2\7l\2\2\u01a2\u01a3\7m\2\2\u01a3")
        buf.write("\27\3\2\2\2\u01a4\u01a6\5(\25\2\u01a5\u01a4\3\2\2\2\u01a5")
        buf.write("\u01a6\3\2\2\2\u01a6\u01b0\3\2\2\2\u01a7\u01aa\5\32\16")
        buf.write("\2\u01a8\u01aa\5$\23\2\u01a9\u01a7\3\2\2\2\u01a9\u01a8")
        buf.write("\3\2\2\2\u01aa\u01ac\3\2\2\2\u01ab\u01ad\5(\25\2\u01ac")
        buf.write("\u01ab\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01af\3\2\2\2")
        buf.write("\u01ae\u01a9\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0\u01ae\3")
        buf.write("\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\31\3\2\2\2\u01b2\u01b0")
        buf.write("\3\2\2\2\u01b3\u01b4\7j\2\2\u01b4\u01b8\5\34\17\2\u01b5")
        buf.write("\u01b7\5&\24\2\u01b6\u01b5\3\2\2\2\u01b7\u01ba\3\2\2\2")
        buf.write("\u01b8\u01b6\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01bb\3")
        buf.write("\2\2\2\u01ba\u01b8\3\2\2\2\u01bb\u01bc\7v\2\2\u01bc\u01bd")
        buf.write("\5\30\r\2\u01bd\u01be\7j\2\2\u01be\u01bf\7y\2\2\u01bf")
        buf.write("\u01c0\5\36\20\2\u01c0\u01c1\7v\2\2\u01c1\u01cd\3\2\2")
        buf.write("\2\u01c2\u01c3\7j\2\2\u01c3\u01c7\5\34\17\2\u01c4\u01c6")
        buf.write("\5&\24\2\u01c5\u01c4\3\2\2\2\u01c6\u01c9\3\2\2\2\u01c7")
        buf.write("\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01ca\3\2\2\2")
        buf.write("\u01c9\u01c7\3\2\2\2\u01ca\u01cb\7x\2\2\u01cb\u01cd\3")
        buf.write("\2\2\2\u01cc\u01b3\3\2\2\2\u01cc\u01c2\3\2\2\2\u01cd\33")
        buf.write("\3\2\2\2\u01ce\u01d1\5\"\22\2\u01cf\u01d1\5 \21\2\u01d0")
        buf.write("\u01ce\3\2\2\2\u01d0\u01cf\3\2\2\2\u01d1\35\3\2\2\2\u01d2")
        buf.write("\u01d5\5\"\22\2\u01d3\u01d5\5 \21\2\u01d4\u01d2\3\2\2")
        buf.write("\2\u01d4\u01d3\3\2\2\2\u01d5\37\3\2\2\2\u01d6\u01d7\7")
        buf.write("~\2\2\u01d7!\3\2\2\2\u01d8\u01d9\7}\2\2\u01d9#\3\2\2\2")
        buf.write("\u01da\u01db\t\3\2\2\u01db%\3\2\2\2\u01dc\u01dd\7~\2\2")
        buf.write("\u01dd\u01de\7z\2\2\u01de\u01df\t\4\2\2\u01df\'\3\2\2")
        buf.write("\2\u01e0\u01e1\t\5\2\2\u01e1)\3\2\2\2\u01e2\u01e3\t\6")
        buf.write("\2\2\u01e3+\3\2\2\2\u01e4\u01e8\5\64\33\2\u01e5\u01e8")
        buf.write("\5\60\31\2\u01e6\u01e8\7C\2\2\u01e7\u01e4\3\2\2\2\u01e7")
        buf.write("\u01e5\3\2\2\2\u01e7\u01e6\3\2\2\2\u01e8-\3\2\2\2\u01e9")
        buf.write("\u01ec\7\17\2\2\u01ea\u01eb\7K\2\2\u01eb\u01ed\7L\2\2")
        buf.write("\u01ec\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed/\3\2\2")
        buf.write("\2\u01ee\u01ef\7\16\2\2\u01ef\u01f0\7K\2\2\u01f0\u01f1")
        buf.write("\5\62\32\2\u01f1\u01f2\7L\2\2\u01f2\61\3\2\2\2\u01f3\u01f8")
        buf.write("\7D\2\2\u01f4\u01f5\7P\2\2\u01f5\u01f7\7D\2\2\u01f6\u01f4")
        buf.write("\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01f6\3\2\2\2\u01f8")
        buf.write("\u01f9\3\2\2\2\u01f9\63\3\2\2\2\u01fa\u01f8\3\2\2\2\u01fb")
        buf.write("\u0200\7\21\2\2\u01fc\u01fd\7K\2\2\u01fd\u01fe\5\66\34")
        buf.write("\2\u01fe\u01ff\7L\2\2\u01ff\u0201\3\2\2\2\u0200\u01fc")
        buf.write("\3\2\2\2\u0200\u0201\3\2\2\2\u0201\65\3\2\2\2\u0202\u0203")
        buf.write("\t\7\2\2\u0203\67\3\2\2\2\u0204\u0206\5<\37\2\u0205\u0207")
        buf.write("\5:\36\2\u0206\u0205\3\2\2\2\u0206\u0207\3\2\2\2\u0207")
        buf.write("\u020b\3\2\2\2\u0208\u020a\7C\2\2\u0209\u0208\3\2\2\2")
        buf.write("\u020a\u020d\3\2\2\2\u020b\u0209\3\2\2\2\u020b\u020c\3")
        buf.write("\2\2\2\u020c\u0211\3\2\2\2\u020d\u020b\3\2\2\2\u020e\u0210")
        buf.write("\5F$\2\u020f\u020e\3\2\2\2\u0210\u0213\3\2\2\2\u0211\u020f")
        buf.write("\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0217\3\2\2\2\u0213")
        buf.write("\u0211\3\2\2\2\u0214\u0216\7C\2\2\u0215\u0214\3\2\2\2")
        buf.write("\u0216\u0219\3\2\2\2\u0217\u0215\3\2\2\2\u0217\u0218\3")
        buf.write("\2\2\2\u0218\u021d\3\2\2\2\u0219\u0217\3\2\2\2\u021a\u021c")
        buf.write("\5\u00b0Y\2\u021b\u021a\3\2\2\2\u021c\u021f\3\2\2\2\u021d")
        buf.write("\u021b\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u0223\3\2\2\2")
        buf.write("\u021f\u021d\3\2\2\2\u0220\u0222\7C\2\2\u0221\u0220\3")
        buf.write("\2\2\2\u0222\u0225\3\2\2\2\u0223\u0221\3\2\2\2\u0223\u0224")
        buf.write("\3\2\2\2\u02249\3\2\2\2\u0225\u0223\3\2\2\2\u0226\u0227")
        buf.write("\7_\2\2\u0227\u022e\t\7\2\2\u0228\u022a\7C\2\2\u0229\u0228")
        buf.write("\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u0229\3\2\2\2\u022b")
        buf.write("\u022c\3\2\2\2\u022c\u022f\3\2\2\2\u022d\u022f\7\2\2\3")
        buf.write("\u022e\u0229\3\2\2\2\u022e\u022d\3\2\2\2\u022f;\3\2\2")
        buf.write("\2\u0230\u0232\7W\2\2\u0231\u0233\5B\"\2\u0232\u0231\3")
        buf.write("\2\2\2\u0232\u0233\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0236")
        buf.write("\5D#\2\u0235\u0237\5> \2\u0236\u0235\3\2\2\2\u0236\u0237")
        buf.write("\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u0239\7Y\2\2\u0239")
        buf.write("\u023a\7C\2\2\u023a=\3\2\2\2\u023b\u023c\7I\2\2\u023c")
        buf.write("\u023f\5@!\2\u023d\u023e\7^\2\2\u023e\u0240\5@!\2\u023f")
        buf.write("\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240?\3\2\2\2\u0241")
        buf.write("\u0245\5\n\6\2\u0242\u0245\7R\2\2\u0243\u0245\7S\2\2\u0244")
        buf.write("\u0241\3\2\2\2\u0244\u0242\3\2\2\2\u0244\u0243\3\2\2\2")
        buf.write("\u0245A\3\2\2\2\u0246\u0247\5\n\6\2\u0247\u0248\t\b\2")
        buf.write("\2\u0248C\3\2\2\2\u0249\u024a\5\n\6\2\u024aE\3\2\2\2\u024b")
        buf.write("\u024d\5Z.\2\u024c\u024b\3\2\2\2\u024d\u0250\3\2\2\2\u024e")
        buf.write("\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0251\3\2\2\2")
        buf.write("\u0250\u024e\3\2\2\2\u0251\u0253\5X-\2\u0252\u0254\5H")
        buf.write("%\2\u0253\u0252\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0256")
        buf.write("\3\2\2\2\u0255\u0257\5V,\2\u0256\u0255\3\2\2\2\u0256\u0257")
        buf.write("\3\2\2\2\u0257\u0259\3\2\2\2\u0258\u025a\5T+\2\u0259\u0258")
        buf.write("\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u0261\3\2\2\2\u025b")
        buf.write("\u025d\7C\2\2\u025c\u025b\3\2\2\2\u025d\u025e\3\2\2\2")
        buf.write("\u025e\u025c\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0262\3")
        buf.write("\2\2\2\u0260\u0262\7\2\2\3\u0261\u025c\3\2\2\2\u0261\u0260")
        buf.write("\3\2\2\2\u0262G\3\2\2\2\u0263\u0264\7I\2\2\u0264\u0269")
        buf.write("\5\\/\2\u0265\u0266\7I\2\2\u0266\u0269\5J&\2\u0267\u0269")
        buf.write("\5L\'\2\u0268\u0263\3\2\2\2\u0268\u0265\3\2\2\2\u0268")
        buf.write("\u0267\3\2\2\2\u0269I\3\2\2\2\u026a\u026b\5\n\6\2\u026b")
        buf.write("K\3\2\2\2\u026c\u026d\5N(\2\u026d\u026e\5P)\2\u026eM\3")
        buf.write("\2\2\2\u026f\u0270\t\t\2\2\u0270O\3\2\2\2\u0271\u0272")
        buf.write("\7l\2\2\u0272Q\3\2\2\2\u0273\u0275\5\n\6\2\u0274\u0273")
        buf.write("\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0274\3\2\2\2\u0276")
        buf.write("\u0277\3\2\2\2\u0277\u027b\3\2\2\2\u0278\u027b\7R\2\2")
        buf.write("\u0279\u027b\7S\2\2\u027a\u0274\3\2\2\2\u027a\u0278\3")
        buf.write("\2\2\2\u027a\u0279\3\2\2\2\u027bS\3\2\2\2\u027c\u027d")
        buf.write("\7O\2\2\u027d\u027e\5R*\2\u027eU\3\2\2\2\u027f\u0280\7")
        buf.write("^\2\2\u0280\u0281\5R*\2\u0281W\3\2\2\2\u0282\u0283\5\n")
        buf.write("\6\2\u0283Y\3\2\2\2\u0284\u0285\t\n\2\2\u0285[\3\2\2\2")
        buf.write("\u0286\u0299\5^\60\2\u0287\u0299\5b\62\2\u0288\u0299\5")
        buf.write("`\61\2\u0289\u0299\5d\63\2\u028a\u0299\5f\64\2\u028b\u0299")
        buf.write("\5h\65\2\u028c\u0299\5j\66\2\u028d\u0299\5l\67\2\u028e")
        buf.write("\u0299\5n8\2\u028f\u0299\5v<\2\u0290\u0299\5\u0082B\2")
        buf.write("\u0291\u0299\5\u008cG\2\u0292\u0299\5\u0092J\2\u0293\u0299")
        buf.write("\5\u00a6T\2\u0294\u0299\5\u0096L\2\u0295\u0299\5p9\2\u0296")
        buf.write("\u0299\5r:\2\u0297\u0299\5t;\2\u0298\u0286\3\2\2\2\u0298")
        buf.write("\u0287\3\2\2\2\u0298\u0288\3\2\2\2\u0298\u0289\3\2\2\2")
        buf.write("\u0298\u028a\3\2\2\2\u0298\u028b\3\2\2\2\u0298\u028c\3")
        buf.write("\2\2\2\u0298\u028d\3\2\2\2\u0298\u028e\3\2\2\2\u0298\u028f")
        buf.write("\3\2\2\2\u0298\u0290\3\2\2\2\u0298\u0291\3\2\2\2\u0298")
        buf.write("\u0292\3\2\2\2\u0298\u0293\3\2\2\2\u0298\u0294\3\2\2\2")
        buf.write("\u0298\u0295\3\2\2\2\u0298\u0296\3\2\2\2\u0298\u0297\3")
        buf.write("\2\2\2\u0299]\3\2\2\2\u029a\u029b\7,\2\2\u029b_\3\2\2")
        buf.write("\2\u029c\u029d\7-\2\2\u029da\3\2\2\2\u029e\u029f\7.\2")
        buf.write("\2\u029fc\3\2\2\2\u02a0\u02a1\7/\2\2\u02a1e\3\2\2\2\u02a2")
        buf.write("\u02a3\7\60\2\2\u02a3g\3\2\2\2\u02a4\u02a5\7\61\2\2\u02a5")
        buf.write("i\3\2\2\2\u02a6\u02a7\7\62\2\2\u02a7k\3\2\2\2\u02a8\u02a9")
        buf.write("\7\63\2\2\u02a9m\3\2\2\2\u02aa\u02ab\7\64\2\2\u02abo\3")
        buf.write("\2\2\2\u02ac\u02ad\7\66\2\2\u02adq\3\2\2\2\u02ae\u02af")
        buf.write("\78\2\2\u02afs\3\2\2\2\u02b0\u02b1\79\2\2\u02b1u\3\2\2")
        buf.write("\2\u02b2\u02bb\7;\2\2\u02b3\u02b4\7K\2\2\u02b4\u02b7\5")
        buf.write("x=\2\u02b5\u02b6\7P\2\2\u02b6\u02b8\5z>\2\u02b7\u02b5")
        buf.write("\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9")
        buf.write("\u02ba\7L\2\2\u02ba\u02bc\3\2\2\2\u02bb\u02b3\3\2\2\2")
        buf.write("\u02bb\u02bc\3\2\2\2\u02bcw\3\2\2\2\u02bd\u02be\t\13\2")
        buf.write("\2\u02bey\3\2\2\2\u02bf\u02c0\7B\2\2\u02c0\u02c1\7_\2")
        buf.write("\2\u02c1\u02c6\5|?\2\u02c2\u02c3\7P\2\2\u02c3\u02c5\5")
        buf.write("|?\2\u02c4\u02c2\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6\u02c4")
        buf.write("\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7{\3\2\2\2\u02c8\u02c6")
        buf.write("\3\2\2\2\u02c9\u02cb\5\u0080A\2\u02ca\u02c9\3\2\2\2\u02ca")
        buf.write("\u02cb\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\5~@\2\u02cd")
        buf.write("}\3\2\2\2\u02ce\u02d2\5\n\6\2\u02cf\u02d2\7R\2\2\u02d0")
        buf.write("\u02d2\7S\2\2\u02d1\u02ce\3\2\2\2\u02d1\u02cf\3\2\2\2")
        buf.write("\u02d1\u02d0\3\2\2\2\u02d2\177\3\2\2\2\u02d3\u02d4\5\n")
        buf.write("\6\2\u02d4\u02d5\7I\2\2\u02d5\u0081\3\2\2\2\u02d6\u02db")
        buf.write("\7<\2\2\u02d7\u02d8\7K\2\2\u02d8\u02d9\5\u0084C\2\u02d9")
        buf.write("\u02da\7L\2\2\u02da\u02dc\3\2\2\2\u02db\u02d7\3\2\2\2")
        buf.write("\u02db\u02dc\3\2\2\2\u02dc\u0083\3\2\2\2\u02dd\u02de\7")
        buf.write("B\2\2\u02de\u02df\7_\2\2\u02df\u02e4\5\u0086D\2\u02e0")
        buf.write("\u02e1\7P\2\2\u02e1\u02e3\5\u0086D\2\u02e2\u02e0\3\2\2")
        buf.write("\2\u02e3\u02e6\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e4\u02e5")
        buf.write("\3\2\2\2\u02e5\u0085\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e7")
        buf.write("\u02e9\5\u008aF\2\u02e8\u02e7\3\2\2\2\u02e8\u02e9\3\2")
        buf.write("\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02eb\5\u0088E\2\u02eb")
        buf.write("\u0087\3\2\2\2\u02ec\u02f0\5\n\6\2\u02ed\u02f0\7R\2\2")
        buf.write("\u02ee\u02f0\7S\2\2\u02ef\u02ec\3\2\2\2\u02ef\u02ed\3")
        buf.write("\2\2\2\u02ef\u02ee\3\2\2\2\u02f0\u0089\3\2\2\2\u02f1\u02f2")
        buf.write("\7E\2\2\u02f2\u02f3\7I\2\2\u02f3\u008b\3\2\2\2\u02f4\u02f5")
        buf.write("\7=\2\2\u02f5\u02f6\7K\2\2\u02f6\u02f7\5\u008eH\2\u02f7")
        buf.write("\u02f8\7L\2\2\u02f8\u008d\3\2\2\2\u02f9\u02fe\5\u0090")
        buf.write("I\2\u02fa\u02fb\7P\2\2\u02fb\u02fd\5\u0090I\2\u02fc\u02fa")
        buf.write("\3\2\2\2\u02fd\u0300\3\2\2\2\u02fe\u02fc\3\2\2\2\u02fe")
        buf.write("\u02ff\3\2\2\2\u02ff\u008f\3\2\2\2\u0300\u02fe\3\2\2\2")
        buf.write("\u0301\u0302\5\n\6\2\u0302\u0091\3\2\2\2\u0303\u0308\7")
        buf.write(">\2\2\u0304\u0305\7K\2\2\u0305\u0306\5\u0094K\2\u0306")
        buf.write("\u0307\7L\2\2\u0307\u0309\3\2\2\2\u0308\u0304\3\2\2\2")
        buf.write("\u0308\u0309\3\2\2\2\u0309\u0093\3\2\2\2\u030a\u030b\7")
        buf.write("\23\2\2\u030b\u0095\3\2\2\2\u030c\u0311\5\u0098M\2\u030d")
        buf.write("\u030e\7K\2\2\u030e\u030f\5\u009aN\2\u030f\u0310\7L\2")
        buf.write("\2\u0310\u0312\3\2\2\2\u0311\u030d\3\2\2\2\u0311\u0312")
        buf.write("\3\2\2\2\u0312\u0097\3\2\2\2\u0313\u0314\t\f\2\2\u0314")
        buf.write("\u0099\3\2\2\2\u0315\u031a\5\u009cO\2\u0316\u0317\7P\2")
        buf.write("\2\u0317\u0319\5\u009cO\2\u0318\u0316\3\2\2\2\u0319\u031c")
        buf.write("\3\2\2\2\u031a\u0318\3\2\2\2\u031a\u031b\3\2\2\2\u031b")
        buf.write("\u009b\3\2\2\2\u031c\u031a\3\2\2\2\u031d\u031e\5\u00a0")
        buf.write("Q\2\u031e\u031f\5\u009eP\2\u031f\u0320\5\u00a2R\2\u0320")
        buf.write("\u009d\3\2\2\2\u0321\u0322\7G\2\2\u0322\u009f\3\2\2\2")
        buf.write("\u0323\u0324\5\n\6\2\u0324\u0325\7_\2\2\u0325\u00a1\3")
        buf.write("\2\2\2\u0326\u0328\5\u00a4S\2\u0327\u0326\3\2\2\2\u0328")
        buf.write("\u032b\3\2\2\2\u0329\u0327\3\2\2\2\u0329\u032a\3\2\2\2")
        buf.write("\u032a\u00a3\3\2\2\2\u032b\u0329\3\2\2\2\u032c\u032d\7")
        buf.write("H\2\2\u032d\u00a5\3\2\2\2\u032e\u032f\5\u00a8U\2\u032f")
        buf.write("\u0332\7K\2\2\u0330\u0333\5\u00aaV\2\u0331\u0333\5\u00ac")
        buf.write("W\2\u0332\u0330\3\2\2\2\u0332\u0331\3\2\2\2\u0333\u0335")
        buf.write("\3\2\2\2\u0334\u0336\5\u00aeX\2\u0335\u0334\3\2\2\2\u0335")
        buf.write("\u0336\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u0338\7L\2\2")
        buf.write("\u0338\u00a7\3\2\2\2\u0339\u033a\t\r\2\2\u033a\u00a9\3")
        buf.write("\2\2\2\u033b\u033c\7W\2\2\u033c\u033d\5\n\6\2\u033d\u00ab")
        buf.write("\3\2\2\2\u033e\u033f\7F\2\2\u033f\u00ad\3\2\2\2\u0340")
        buf.write("\u0341\7U\2\2\u0341\u0342\5\n\6\2\u0342\u00af\3\2\2\2")
        buf.write("\u0343\u0351\5\u00fa~\2\u0344\u0351\5\u00f8}\2\u0345\u0351")
        buf.write("\5\u00f6|\2\u0346\u0351\5\u00f4{\2\u0347\u0351\5\u00f2")
        buf.write("z\2\u0348\u0351\5\u00f0y\2\u0349\u0351\5\u00eex\2\u034a")
        buf.write("\u0351\5\u00ecw\2\u034b\u0351\5\u00e6t\2\u034c\u0351\5")
        buf.write("\u00ba^\2\u034d\u0351\5\u00b6\\\2\u034e\u0351\5\u00b2")
        buf.write("Z\2\u034f\u0351\7C\2\2\u0350\u0343\3\2\2\2\u0350\u0344")
        buf.write("\3\2\2\2\u0350\u0345\3\2\2\2\u0350\u0346\3\2\2\2\u0350")
        buf.write("\u0347\3\2\2\2\u0350\u0348\3\2\2\2\u0350\u0349\3\2\2\2")
        buf.write("\u0350\u034a\3\2\2\2\u0350\u034b\3\2\2\2\u0350\u034c\3")
        buf.write("\2\2\2\u0350\u034d\3\2\2\2\u0350\u034e\3\2\2\2\u0350\u034f")
        buf.write("\3\2\2\2\u0351\u00b1\3\2\2\2\u0352\u0353\7\r\2\2\u0353")
        buf.write("\u0354\7K\2\2\u0354\u0355\5\u00b4[\2\u0355\u0356\7L\2")
        buf.write("\2\u0356\u00b3\3\2\2\2\u0357\u0358\5\n\6\2\u0358\u00b5")
        buf.write("\3\2\2\2\u0359\u035a\7\f\2\2\u035a\u035b\7K\2\2\u035b")
        buf.write("\u035c\5\u00b8]\2\u035c\u035d\7L\2\2\u035d\u00b7\3\2\2")
        buf.write("\2\u035e\u0363\5\n\6\2\u035f\u0360\7P\2\2\u0360\u0362")
        buf.write("\5\n\6\2\u0361\u035f\3\2\2\2\u0362\u0365\3\2\2\2\u0363")
        buf.write("\u0361\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u00b9\3\2\2\2")
        buf.write("\u0365\u0363\3\2\2\2\u0366\u0369\7\13\2\2\u0367\u0368")
        buf.write("\7Q\2\2\u0368\u036a\5\u00c0a\2\u0369\u0367\3\2\2\2\u0369")
        buf.write("\u036a\3\2\2\2\u036a\u036f\3\2\2\2\u036b\u036c\7K\2\2")
        buf.write("\u036c\u036d\5\u00bc_\2\u036d\u036e\7L\2\2\u036e\u0370")
        buf.write("\3\2\2\2\u036f\u036b\3\2\2\2\u036f\u0370\3\2\2\2\u0370")
        buf.write("\u00bb\3\2\2\2\u0371\u0377\5\u00be`\2\u0372\u0376\5\u00e0")
        buf.write("q\2\u0373\u0376\7C\2\2\u0374\u0376\7P\2\2\u0375\u0372")
        buf.write("\3\2\2\2\u0375\u0373\3\2\2\2\u0375\u0374\3\2\2\2\u0376")
        buf.write("\u0379\3\2\2\2\u0377\u0375\3\2\2\2\u0377\u0378\3\2\2\2")
        buf.write("\u0378\u00bd\3\2\2\2\u0379\u0377\3\2\2\2\u037a\u0385\5")
        buf.write("\u00ccg\2\u037b\u0385\5\u00c2b\2\u037c\u0385\5\u00d0i")
        buf.write("\2\u037d\u0385\5\u00c4c\2\u037e\u0385\5\u00c6d\2\u037f")
        buf.write("\u0385\5\u00c8e\2\u0380\u0385\5\u00caf\2\u0381\u0385\5")
        buf.write("\u00d8m\2\u0382\u0385\7C\2\2\u0383\u0385\7P\2\2\u0384")
        buf.write("\u037a\3\2\2\2\u0384\u037b\3\2\2\2\u0384\u037c\3\2\2\2")
        buf.write("\u0384\u037d\3\2\2\2\u0384\u037e\3\2\2\2\u0384\u037f\3")
        buf.write("\2\2\2\u0384\u0380\3\2\2\2\u0384\u0381\3\2\2\2\u0384\u0382")
        buf.write("\3\2\2\2\u0384\u0383\3\2\2\2\u0385\u0388\3\2\2\2\u0386")
        buf.write("\u0384\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u00bf\3\2\2\2")
        buf.write("\u0388\u0386\3\2\2\2\u0389\u038a\5\n\6\2\u038a\u00c1\3")
        buf.write("\2\2\2\u038b\u038c\7!\2\2\u038c\u038d\7I\2\2\u038d\u0391")
        buf.write("\7\23\2\2\u038e\u0390\7C\2\2\u038f\u038e\3\2\2\2\u0390")
        buf.write("\u0393\3\2\2\2\u0391\u038f\3\2\2\2\u0391\u0392\3\2\2\2")
        buf.write("\u0392\u00c3\3\2\2\2\u0393\u0391\3\2\2\2\u0394\u0395\7")
        buf.write("\36\2\2\u0395\u0399\5\22\n\2\u0396\u0398\7C\2\2\u0397")
        buf.write("\u0396\3\2\2\2\u0398\u039b\3\2\2\2\u0399\u0397\3\2\2\2")
        buf.write("\u0399\u039a\3\2\2\2\u039a\u00c5\3\2\2\2\u039b\u0399\3")
        buf.write("\2\2\2\u039c\u039e\7\35\2\2\u039d\u039f\7I\2\2\u039e\u039d")
        buf.write("\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0")
        buf.write("\u03a4\5\22\n\2\u03a1\u03a3\7C\2\2\u03a2\u03a1\3\2\2\2")
        buf.write("\u03a3\u03a6\3\2\2\2\u03a4\u03a2\3\2\2\2\u03a4\u03a5\3")
        buf.write("\2\2\2\u03a5\u00c7\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a7\u03a8")
        buf.write("\7%\2\2\u03a8\u03a9\7I\2\2\u03a9\u03ad\5\f\7\2\u03aa\u03ac")
        buf.write("\7C\2\2\u03ab\u03aa\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad")
        buf.write("\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u00c9\3\2\2\2")
        buf.write("\u03af\u03ad\3\2\2\2\u03b0\u03b1\7\33\2\2\u03b1\u03b2")
        buf.write("\7I\2\2\u03b2\u03b6\5\n\6\2\u03b3\u03b5\7C\2\2\u03b4\u03b3")
        buf.write("\3\2\2\2\u03b5\u03b8\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6")
        buf.write("\u03b7\3\2\2\2\u03b7\u00cb\3\2\2\2\u03b8\u03b6\3\2\2\2")
        buf.write("\u03b9\u03ba\7)\2\2\u03ba\u03bb\7I\2\2\u03bb\u03bd\5\f")
        buf.write("\7\2\u03bc\u03be\5\u00ceh\2\u03bd\u03bc\3\2\2\2\u03bd")
        buf.write("\u03be\3\2\2\2\u03be\u03c2\3\2\2\2\u03bf\u03c1\7C\2\2")
        buf.write("\u03c0\u03bf\3\2\2\2\u03c1\u03c4\3\2\2\2\u03c2\u03c0\3")
        buf.write("\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u00cd\3\2\2\2\u03c4\u03c2")
        buf.write("\3\2\2\2\u03c5\u03c6\5\20\t\2\u03c6\u00cf\3\2\2\2\u03c7")
        buf.write("\u03c8\7\37\2\2\u03c8\u03c9\7K\2\2\u03c9\u03ce\5\u00d2")
        buf.write("j\2\u03ca\u03cb\7P\2\2\u03cb\u03cd\5\u00d2j\2\u03cc\u03ca")
        buf.write("\3\2\2\2\u03cd\u03d0\3\2\2\2\u03ce\u03cc\3\2\2\2\u03ce")
        buf.write("\u03cf\3\2\2\2\u03cf\u03d1\3\2\2\2\u03d0\u03ce\3\2\2\2")
        buf.write("\u03d1\u03d2\7L\2\2\u03d2\u00d1\3\2\2\2\u03d3\u03d7\7")
        buf.write("\30\2\2\u03d4\u03d5\7I\2\2\u03d5\u03d8\5\u00d4k\2\u03d6")
        buf.write("\u03d8\5\u00d6l\2\u03d7\u03d4\3\2\2\2\u03d7\u03d6\3\2")
        buf.write("\2\2\u03d7\u03d8\3\2\2\2\u03d8\u00d3\3\2\2\2\u03d9\u03da")
        buf.write("\7W\2\2\u03da\u03db\5\n\6\2\u03db\u00d5\3\2\2\2\u03dc")
        buf.write("\u03dd\7F\2\2\u03dd\u00d7\3\2\2\2\u03de\u03df\7\34\2\2")
        buf.write("\u03df\u03e0\7I\2\2\u03e0\u03e4\5\u00dan\2\u03e1\u03e3")
        buf.write("\7C\2\2\u03e2\u03e1\3\2\2\2\u03e3\u03e6\3\2\2\2\u03e4")
        buf.write("\u03e2\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u00d9\3\2\2\2")
        buf.write("\u03e6\u03e4\3\2\2\2\u03e7\u03e8\7 \2\2\u03e8\u03eb\5")
        buf.write("\u00dco\2\u03e9\u03ea\7+\2\2\u03ea\u03ec\5\u00dep\2\u03eb")
        buf.write("\u03e9\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u00db\3\2\2\2")
        buf.write("\u03ed\u03ee\5\n\6\2\u03ee\u00dd\3\2\2\2\u03ef\u03f0\5")
        buf.write("\n\6\2\u03f0\u00df\3\2\2\2\u03f1\u03f2\7\31\2\2\u03f2")
        buf.write("\u03f6\7I\2\2\u03f3\u03f7\5\u00e2r\2\u03f4\u03f7\7P\2")
        buf.write("\2\u03f5\u03f7\7C\2\2\u03f6\u03f3\3\2\2\2\u03f6\u03f4")
        buf.write("\3\2\2\2\u03f6\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8")
        buf.write("\u03f6\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u00e1\3\2\2\2")
        buf.write("\u03fa\u03fb\5\u00e4s\2\u03fb\u03fc\7K\2\2\u03fc\u03fd")
        buf.write("\5\u00bc_\2\u03fd\u03fe\7L\2\2\u03fe\u00e3\3\2\2\2\u03ff")
        buf.write("\u0400\5\n\6\2\u0400\u00e5\3\2\2\2\u0401\u0410\7\n\2\2")
        buf.write("\u0402\u040c\7K\2\2\u0403\u040d\5\u00e8u\2\u0404\u0409")
        buf.write("\5\u00eav\2\u0405\u0406\7P\2\2\u0406\u0408\5\u00eav\2")
        buf.write("\u0407\u0405\3\2\2\2\u0408\u040b\3\2\2\2\u0409\u0407\3")
        buf.write("\2\2\2\u0409\u040a\3\2\2\2\u040a\u040d\3\2\2\2\u040b\u0409")
        buf.write("\3\2\2\2\u040c\u0403\3\2\2\2\u040c\u0404\3\2\2\2\u040d")
        buf.write("\u040e\3\2\2\2\u040e\u040f\7L\2\2\u040f\u0411\3\2\2\2")
        buf.write("\u0410\u0402\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u00e7\3")
        buf.write("\2\2\2\u0412\u0413\7c\2\2\u0413\u00e9\3\2\2\2\u0414\u0415")
        buf.write("\5\n\6\2\u0415\u00eb\3\2\2\2\u0416\u0417\7\t\2\2\u0417")
        buf.write("\u0418\5\22\n\2\u0418\u00ed\3\2\2\2\u0419\u041a\7\b\2")
        buf.write("\2\u041a\u041b\5\22\n\2\u041b\u00ef\3\2\2\2\u041c\u041d")
        buf.write("\7\7\2\2\u041d\u041e\5\22\n\2\u041e\u00f1\3\2\2\2\u041f")
        buf.write("\u0420\7\6\2\2\u0420\u0421\5\22\n\2\u0421\u00f3\3\2\2")
        buf.write("\2\u0422\u0423\7\5\2\2\u0423\u0424\5\22\n\2\u0424\u00f5")
        buf.write("\3\2\2\2\u0425\u0426\7\4\2\2\u0426\u0427\5\22\n\2\u0427")
        buf.write("\u00f7\3\2\2\2\u0428\u042c\7\3\2\2\u0429\u042a\7K\2\2")
        buf.write("\u042a\u042b\7F\2\2\u042b\u042d\7L\2\2\u042c\u0429\3\2")
        buf.write("\2\2\u042c\u042d\3\2\2\2\u042d\u00f9\3\2\2\2\u042e\u0448")
        buf.write("\7\20\2\2\u042f\u043e\7K\2\2\u0430\u043d\5\u0118\u008d")
        buf.write("\2\u0431\u043d\5\u011a\u008e\2\u0432\u043d\5\u011c\u008f")
        buf.write("\2\u0433\u043d\5\u011e\u0090\2\u0434\u043d\5\u0120\u0091")
        buf.write("\2\u0435\u043d\5\u0122\u0092\2\u0436\u043d\5\u0110\u0089")
        buf.write("\2\u0437\u043d\5\u0104\u0083\2\u0438\u043d\5\u00fe\u0080")
        buf.write("\2\u0439\u043d\5\u00fc\177\2\u043a\u043d\7C\2\2\u043b")
        buf.write("\u043d\7P\2\2\u043c\u0430\3\2\2\2\u043c\u0431\3\2\2\2")
        buf.write("\u043c\u0432\3\2\2\2\u043c\u0433\3\2\2\2\u043c\u0434\3")
        buf.write("\2\2\2\u043c\u0435\3\2\2\2\u043c\u0436\3\2\2\2\u043c\u0437")
        buf.write("\3\2\2\2\u043c\u0438\3\2\2\2\u043c\u0439\3\2\2\2\u043c")
        buf.write("\u043a\3\2\2\2\u043c\u043b\3\2\2\2\u043d\u0440\3\2\2\2")
        buf.write("\u043e\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0444\3")
        buf.write("\2\2\2\u0440\u043e\3\2\2\2\u0441\u0443\7C\2\2\u0442\u0441")
        buf.write("\3\2\2\2\u0443\u0446\3\2\2\2\u0444\u0442\3\2\2\2\u0444")
        buf.write("\u0445\3\2\2\2\u0445\u0447\3\2\2\2\u0446\u0444\3\2\2\2")
        buf.write("\u0447\u0449\7L\2\2\u0448\u042f\3\2\2\2\u0448\u0449\3")
        buf.write("\2\2\2\u0449\u044d\3\2\2\2\u044a\u044c\7C\2\2\u044b\u044a")
        buf.write("\3\2\2\2\u044c\u044f\3\2\2\2\u044d\u044b\3\2\2\2\u044d")
        buf.write("\u044e\3\2\2\2\u044e\u00fb\3\2\2\2\u044f\u044d\3\2\2\2")
        buf.write("\u0450\u0451\7\26\2\2\u0451\u0455\7I\2\2\u0452\u0454\7")
        buf.write("C\2\2\u0453\u0452\3\2\2\2\u0454\u0457\3\2\2\2\u0455\u0453")
        buf.write("\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0458\3\2\2\2\u0457")
        buf.write("\u0455\3\2\2\2\u0458\u0463\5\u0102\u0082\2\u0459\u045d")
        buf.write("\7P\2\2\u045a\u045c\7C\2\2\u045b\u045a\3\2\2\2\u045c\u045f")
        buf.write("\3\2\2\2\u045d\u045b\3\2\2\2\u045d\u045e\3\2\2\2\u045e")
        buf.write("\u0460\3\2\2\2\u045f\u045d\3\2\2\2\u0460\u0462\5\u0102")
        buf.write("\u0082\2\u0461\u0459\3\2\2\2\u0462\u0465\3\2\2\2\u0463")
        buf.write("\u0461\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u00fd\3\2\2\2")
        buf.write("\u0465\u0463\3\2\2\2\u0466\u0467\7\25\2\2\u0467\u0468")
        buf.write("\7I\2\2\u0468\u046d\5\u0100\u0081\2\u0469\u046a\7P\2\2")
        buf.write("\u046a\u046c\5\u0100\u0081\2\u046b\u0469\3\2\2\2\u046c")
        buf.write("\u046f\3\2\2\2\u046d\u046b\3\2\2\2\u046d\u046e\3\2\2\2")
        buf.write("\u046e\u00ff\3\2\2\2\u046f\u046d\3\2\2\2\u0470\u0471\t")
        buf.write("\7\2\2\u0471\u0101\3\2\2\2\u0472\u0473\t\7\2\2\u0473\u0103")
        buf.write("\3\2\2\2\u0474\u0475\7\31\2\2\u0475\u0476\7I\2\2\u0476")
        buf.write("\u047b\5\u0106\u0084\2\u0477\u0478\7P\2\2\u0478\u047a")
        buf.write("\5\u0106\u0084\2\u0479\u0477\3\2\2\2\u047a\u047d\3\2\2")
        buf.write("\2\u047b\u0479\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u0105")
        buf.write("\3\2\2\2\u047d\u047b\3\2\2\2\u047e\u048b\5\u0108\u0085")
        buf.write("\2\u047f\u0487\7K\2\2\u0480\u0486\5\u010a\u0086\2\u0481")
        buf.write("\u0486\5\u010c\u0087\2\u0482\u0486\5\u010e\u0088\2\u0483")
        buf.write("\u0486\7C\2\2\u0484\u0486\7P\2\2\u0485\u0480\3\2\2\2\u0485")
        buf.write("\u0481\3\2\2\2\u0485\u0482\3\2\2\2\u0485\u0483\3\2\2\2")
        buf.write("\u0485\u0484\3\2\2\2\u0486\u0489\3\2\2\2\u0487\u0485\3")
        buf.write("\2\2\2\u0487\u0488\3\2\2\2\u0488\u048a\3\2\2\2\u0489\u0487")
        buf.write("\3\2\2\2\u048a\u048c\7L\2\2\u048b\u047f\3\2\2\2\u048b")
        buf.write("\u048c\3\2\2\2\u048c\u0107\3\2\2\2\u048d\u048e\5\n\6\2")
        buf.write("\u048e\u0109\3\2\2\2\u048f\u0490\7\32\2\2\u0490\u0491")
        buf.write("\7I\2\2\u0491\u0492\7\27\2\2\u0492\u010b\3\2\2\2\u0493")
        buf.write("\u0494\7\"\2\2\u0494\u0495\7I\2\2\u0495\u0496\7E\2\2\u0496")
        buf.write("\u010d\3\2\2\2\u0497\u0498\7)\2\2\u0498\u0499\7I\2\2\u0499")
        buf.write("\u049a\5\f\7\2\u049a\u010f\3\2\2\2\u049b\u049c\7#\2\2")
        buf.write("\u049c\u049d\7I\2\2\u049d\u04a2\5\u0112\u008a\2\u049e")
        buf.write("\u049f\7P\2\2\u049f\u04a1\5\u0112\u008a\2\u04a0\u049e")
        buf.write("\3\2\2\2\u04a1\u04a4\3\2\2\2\u04a2\u04a0\3\2\2\2\u04a2")
        buf.write("\u04a3\3\2\2\2\u04a3\u0111\3\2\2\2\u04a4\u04a2\3\2\2\2")
        buf.write("\u04a5\u04a7\5\u0114\u008b\2\u04a6\u04a8\5\u0116\u008c")
        buf.write("\2\u04a7\u04a6\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9")
        buf.write("\3\2\2\2\u04a9\u04aa\7K\2\2\u04aa\u04ab\5\f\7\2\u04ab")
        buf.write("\u04ac\7L\2\2\u04ac\u0113\3\2\2\2\u04ad\u04ae\5\n\6\2")
        buf.write("\u04ae\u0115\3\2\2\2\u04af\u04b0\t\7\2\2\u04b0\u0117\3")
        buf.write("\2\2\2\u04b1\u04b2\7$\2\2\u04b2\u04b3\7I\2\2\u04b3\u04b7")
        buf.write("\5\f\7\2\u04b4\u04b6\7C\2\2\u04b5\u04b4\3\2\2\2\u04b6")
        buf.write("\u04b9\3\2\2\2\u04b7\u04b5\3\2\2\2\u04b7\u04b8\3\2\2\2")
        buf.write("\u04b8\u0119\3\2\2\2\u04b9\u04b7\3\2\2\2\u04ba\u04bb\7")
        buf.write("%\2\2\u04bb\u04bc\7I\2\2\u04bc\u04c0\5\f\7\2\u04bd\u04bf")
        buf.write("\7C\2\2\u04be\u04bd\3\2\2\2\u04bf\u04c2\3\2\2\2\u04c0")
        buf.write("\u04be\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u011b\3\2\2\2")
        buf.write("\u04c2\u04c0\3\2\2\2\u04c3\u04c4\7&\2\2\u04c4\u04c5\7")
        buf.write("I\2\2\u04c5\u04c9\5\f\7\2\u04c6\u04c8\7C\2\2\u04c7\u04c6")
        buf.write("\3\2\2\2\u04c8\u04cb\3\2\2\2\u04c9\u04c7\3\2\2\2\u04c9")
        buf.write("\u04ca\3\2\2\2\u04ca\u011d\3\2\2\2\u04cb\u04c9\3\2\2\2")
        buf.write("\u04cc\u04cd\7\'\2\2\u04cd\u04ce\7I\2\2\u04ce\u04d2\5")
        buf.write("\f\7\2\u04cf\u04d1\7C\2\2\u04d0\u04cf\3\2\2\2\u04d1\u04d4")
        buf.write("\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3")
        buf.write("\u011f\3\2\2\2\u04d4\u04d2\3\2\2\2\u04d5\u04d6\7(\2\2")
        buf.write("\u04d6\u04d7\7I\2\2\u04d7\u04db\5\f\7\2\u04d8\u04da\7")
        buf.write("C\2\2\u04d9\u04d8\3\2\2\2\u04da\u04dd\3\2\2\2\u04db\u04d9")
        buf.write("\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u0121\3\2\2\2\u04dd")
        buf.write("\u04db\3\2\2\2\u04de\u04df\7)\2\2\u04df\u04e0\7I\2\2\u04e0")
        buf.write("\u04e4\5\f\7\2\u04e1\u04e3\7C\2\2\u04e2\u04e1\3\2\2\2")
        buf.write("\u04e3\u04e6\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e4\u04e5\3")
        buf.write("\2\2\2\u04e5\u0123\3\2\2\2\u04e6\u04e4\3\2\2\2\u04e7\u04eb")
        buf.write("\5\u0128\u0095\2\u04e8\u04ea\7C\2\2\u04e9\u04e8\3\2\2")
        buf.write("\2\u04ea\u04ed\3\2\2\2\u04eb\u04e9\3\2\2\2\u04eb\u04ec")
        buf.write("\3\2\2\2\u04ec\u04f1\3\2\2\2\u04ed\u04eb\3\2\2\2\u04ee")
        buf.write("\u04f0\5\u0138\u009d\2\u04ef\u04ee\3\2\2\2\u04f0\u04f3")
        buf.write("\3\2\2\2\u04f1\u04ef\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2")
        buf.write("\u04f5\3\2\2\2\u04f3\u04f1\3\2\2\2\u04f4\u04f6\5\u0130")
        buf.write("\u0099\2\u04f5\u04f4\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6")
        buf.write("\u04f8\3\2\2\2\u04f7\u04f9\5\u0126\u0094\2\u04f8\u04f7")
        buf.write("\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fd\3\2\2\2\u04fa")
        buf.write("\u04fc\7C\2\2\u04fb\u04fa\3\2\2\2\u04fc\u04ff\3\2\2\2")
        buf.write("\u04fd\u04fb\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0125\3")
        buf.write("\2\2\2\u04ff\u04fd\3\2\2\2\u0500\u0501\5\22\n\2\u0501")
        buf.write("\u0127\3\2\2\2\u0502\u0504\7M\2\2\u0503\u0505\5\u012a")
        buf.write("\u0096\2\u0504\u0503\3\2\2\2\u0504\u0505\3\2\2\2\u0505")
        buf.write("\u0506\3\2\2\2\u0506\u0508\5\u0136\u009c\2\u0507\u0509")
        buf.write("\5\u012c\u0097\2\u0508\u0507\3\2\2\2\u0508\u0509\3\2\2")
        buf.write("\2\u0509\u0512\3\2\2\2\u050a\u050c\7I\2\2\u050b\u050d")
        buf.write("\5\u0134\u009b\2\u050c\u050b\3\2\2\2\u050c\u050d\3\2\2")
        buf.write("\2\u050d\u0510\3\2\2\2\u050e\u050f\7I\2\2\u050f\u0511")
        buf.write("\5\u0132\u009a\2\u0510\u050e\3\2\2\2\u0510\u0511\3\2\2")
        buf.write("\2\u0511\u0513\3\2\2\2\u0512\u050a\3\2\2\2\u0512\u0513")
        buf.write("\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0515\7N\2\2\u0515")
        buf.write("\u0516\7C\2\2\u0516\u0129\3\2\2\2\u0517\u0518\5\n\6\2")
        buf.write("\u0518\u0519\7U\2\2\u0519\u012b\3\2\2\2\u051a\u051b\7")
        buf.write("+\2\2\u051b\u051c\5\u012e\u0098\2\u051c\u012d\3\2\2\2")
        buf.write("\u051d\u051e\5\n\6\2\u051e\u012f\3\2\2\2\u051f\u0520\5")
        buf.write("\32\16\2\u0520\u0131\3\2\2\2\u0521\u0525\7F\2\2\u0522")
        buf.write("\u0525\7[\2\2\u0523\u0525\5\22\n\2\u0524\u0521\3\2\2\2")
        buf.write("\u0524\u0522\3\2\2\2\u0524\u0523\3\2\2\2\u0525\u0133\3")
        buf.write("\2\2\2\u0526\u052a\5\n\6\2\u0527\u052a\7Z\2\2\u0528\u052a")
        buf.write("\7^\2\2\u0529\u0526\3\2\2\2\u0529\u0527\3\2\2\2\u0529")
        buf.write("\u0528\3\2\2\2\u052a\u0135\3\2\2\2\u052b\u052c\5\n\6\2")
        buf.write("\u052c\u0137\3\2\2\2\u052d\u052e\5\u013a\u009e\2\u052e")
        buf.write("\u052f\7g\2\2\u052f\u0536\5\u013c\u009f\2\u0530\u0532")
        buf.write("\7C\2\2\u0531\u0530\3\2\2\2\u0532\u0533\3\2\2\2\u0533")
        buf.write("\u0531\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0537\3\2\2\2")
        buf.write("\u0535\u0537\7\2\2\3\u0536\u0531\3\2\2\2\u0536\u0535\3")
        buf.write("\2\2\2\u0537\u0139\3\2\2\2\u0538\u0539\5\n\6\2\u0539\u013b")
        buf.write("\3\2\2\2\u053a\u053b\7l\2\2\u053b\u013d\3\2\2\2\u0082")
        buf.write("\u0141\u0147\u014b\u0150\u0156\u015a\u015f\u0165\u0175")
        buf.write("\u017d\u0183\u0188\u018b\u018e\u0192\u019a\u01a5\u01a9")
        buf.write("\u01ac\u01b0\u01b8\u01c7\u01cc\u01d0\u01d4\u01e7\u01ec")
        buf.write("\u01f8\u0200\u0206\u020b\u0211\u0217\u021d\u0223\u022b")
        buf.write("\u022e\u0232\u0236\u023f\u0244\u024e\u0253\u0256\u0259")
        buf.write("\u025e\u0261\u0268\u0276\u027a\u0298\u02b7\u02bb\u02c6")
        buf.write("\u02ca\u02d1\u02db\u02e4\u02e8\u02ef\u02fe\u0308\u0311")
        buf.write("\u031a\u0329\u0332\u0335\u0350\u0363\u0369\u036f\u0375")
        buf.write("\u0377\u0384\u0386\u0391\u0399\u039e\u03a4\u03ad\u03b6")
        buf.write("\u03bd\u03c2\u03ce\u03d7\u03e4\u03eb\u03f6\u03f8\u0409")
        buf.write("\u040c\u0410\u042c\u043c\u043e\u0444\u0448\u044d\u0455")
        buf.write("\u045d\u0463\u046d\u047b\u0485\u0487\u048b\u04a2\u04a7")
        buf.write("\u04b7\u04c0\u04c9\u04d2\u04db\u04e4\u04eb\u04f1\u04f5")
        buf.write("\u04f8\u04fd\u0504\u0508\u050c\u0510\u0512\u0524\u0529")
        buf.write("\u0533\u0536")
        return buf.getvalue()


class ZmeiLangParser ( Parser ):

    grammarFileName = "ZmeiLangParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'@mixin'", "'@m2m_changed'", "'@post_delete'", 
                     "'@pre_delete'", "'@post_save'", "'@pre_save'", "'@clean'", 
                     "'@api'", "'@rest'", "'@order'", "'@sortable'", "'@langs'", 
                     "'@filer'", "'@admin'", "'@suit'", "<INVALID>", "<INVALID>", 
                     "'change_link'", "'css'", "'js'", "<INVALID>", "<INVALID>", 
                     "'inline'", "'type'", "'user_field'", "'annotate'", 
                     "'on_create'", "'query'", "'auth'", "'count'", "'i18n'", 
                     "'extra'", "'tabs'", "'list'", "'read_only'", "'list_editable'", 
                     "'list_filter'", "'list_search'", "'fields'", "'import'", 
                     "'as'", "'text'", "'html'", "'html_media'", "'float'", 
                     "'decimal'", "'date'", "'datetime'", "'create_time'", 
                     "'update_time'", "'image'", "'file'", "'filer_image'", 
                     "'filer_file'", "'filer_folder'", "'filer_image_folder'", 
                     "'str'", "'int'", "'slug'", "'bool'", "'one'", "'one2one'", 
                     "'many'", "'choices'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "':'", "'^'", 
                     "'('", "')'", "'['", "']'", "'?'", "','", "'.'", "<INVALID>", 
                     "<INVALID>", "'=>'", "'->'", "'~>'", "'#'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'$'", "'&'", 
                     "'!'", "'*'", "'~'", "' '", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'{'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'}'", "<INVALID>", "<INVALID>", "';'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?>'", "'/>'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\n'" ]

    symbolicNames = [ "<INVALID>", "AN_MIXIN", "AN_M2M_CHANGED", "AN_POST_DELETE", 
                      "AN_PRE_DELETE", "AN_POST_SAVE", "AN_PRE_SAVE", "AN_CLEAN", 
                      "AN_API", "AN_REST", "AN_ORDER", "AN_SORTABLE", "AN_LANGS", 
                      "AN_FILER", "AN_ADMIN", "AN_SUIT", "WRITE_MODE", "BOOL", 
                      "KW_EDITABLE", "KW_CSS", "KW_JS", "KW_INLINE_TYPE", 
                      "KW_AUTH_TYPE", "KW_INLINE", "KW_TYPE", "KW_USER_FIELD", 
                      "KW_ANNOTATE", "KW_ON_CREATE", "KW_QUERY", "KW_AUTH", 
                      "KW_COUNT", "KW_I18N", "KW_EXTRA", "KW_TABS", "KW_LIST", 
                      "KW_READ_ONLY", "KW_LIST_EDITABLE", "KW_LIST_FILTER", 
                      "KW_LIST_SEARCH", "KW_FIELDS", "KW_IMPORT", "KW_AS", 
                      "COL_FIELD_TYPE_LONGTEXT", "COL_FIELD_TYPE_HTML", 
                      "COL_FIELD_TYPE_HTML_MEDIA", "COL_FIELD_TYPE_FLOAT", 
                      "COL_FIELD_TYPE_DECIMAL", "COL_FIELD_TYPE_DATE", "COL_FIELD_TYPE_DATETIME", 
                      "COL_FIELD_TYPE_CREATE_TIME", "COL_FIELD_TYPE_UPDATE_TIME", 
                      "COL_FIELD_TYPE_IMAGE", "COL_FIELD_TYPE_FILE", "COL_FIELD_TYPE_FILER_IMAGE", 
                      "COL_FIELD_TYPE_FILER_FILE", "COL_FIELD_TYPE_FILER_FOLDER", 
                      "COL_FIELD_TYPE_FILER_IMAGE_FOLDER", "COL_FIELD_TYPE_TEXT", 
                      "COL_FIELD_TYPE_INT", "COL_FIELD_TYPE_SLUG", "COL_FIELD_TYPE_BOOL", 
                      "COL_FIELD_TYPE_ONE", "COL_FIELD_TYPE_ONE2ONE", "COL_FIELD_TYPE_MANY", 
                      "COL_FIELD_CHOICES", "NL", "ID", "DIGIT", "CLASSNAME", 
                      "SIZE2D", "FILTER", "COLON", "EXCLUDE", "BRACE_OPEN", 
                      "BRACE_CLOSE", "SQ_BRACE_OPEN", "SQ_BRACE_CLOSE", 
                      "QUESTION_MARK", "COMA", "DOT", "STRING_DQ", "STRING_SQ", 
                      "FIELD_VNAME", "RELATED", "RELATED_EXTEND", "REF_SIGN", 
                      "ANNOTATION", "LINE_SEPARATOR", "URL_SEGMENTS", "TEMPLATE_NAME", 
                      "COMMENT_LINE", "COMMENT_BLOCK", "SLASH", "EQUALS", 
                      "DOLLAR", "AMP", "EXCLAM", "STAR", "APPROX", "WS", 
                      "COL_FIELD_CALCULATED", "ASSIGN", "ASSIGN_STATIC", 
                      "CODE_BLOCK_START", "XML_OPEN", "ERRCHAR", "PYTHON_CODE", 
                      "CODE_BLOCK_END", "CODE_BLOCK_ERRCHAR", "PYTHON_LINE_ERRCHAR", 
                      "PYTHON_LINE_END", "PYTHON_EXPR_ERRCHAR", "XML_EntityRef", 
                      "XML_CharRef", "XML_TEXT", "XML_ERRCHAR", "XML_CLOSE", 
                      "XML_SPECIAL_CLOSE", "XML_SLASH_CLOSE", "XML_SLASH", 
                      "XML_EQUALS", "XML_REACT_ATTR", "XML_STRING", "XML_CmpName", 
                      "XML_Name", "XML_INSIDE_ERRCHAR", "PYTHON_LINE_NL" ]

    RULE_col_file = 0
    RULE_page_imports = 1
    RULE_model_imports = 2
    RULE_import_source = 3
    RULE_id_or_kw = 4
    RULE_field_list_expr = 5
    RULE_field_list_expr_field = 6
    RULE_write_mode_expr = 7
    RULE_python_code = 8
    RULE_code_line = 9
    RULE_code_block = 10
    RULE_xml_content = 11
    RULE_xml_element = 12
    RULE_xml_name = 13
    RULE_xml_name_end = 14
    RULE_xml_tag_name = 15
    RULE_xml_component_name = 16
    RULE_xml_reference = 17
    RULE_xml_attribute = 18
    RULE_xml_chardata = 19
    RULE_xml_misc = 20
    RULE_cs_annotation = 21
    RULE_an_filer = 22
    RULE_an_langs = 23
    RULE_an_langs_list = 24
    RULE_an_suit = 25
    RULE_an_suit_app_name = 26
    RULE_col = 27
    RULE_col_str_expr = 28
    RULE_col_header = 29
    RULE_col_verbose_name = 30
    RULE_verbose_name_part = 31
    RULE_col_base_name = 32
    RULE_col_name = 33
    RULE_col_field = 34
    RULE_col_field_expr_or_def = 35
    RULE_wrong_field_type = 36
    RULE_col_field_expr = 37
    RULE_col_field_expr_marker = 38
    RULE_col_feild_expr_code = 39
    RULE_string_or_quoted = 40
    RULE_col_field_help_text = 41
    RULE_col_field_vrebose_name = 42
    RULE_col_field_name = 43
    RULE_col_modifier = 44
    RULE_col_field_def = 45
    RULE_field_longtext = 46
    RULE_field_html = 47
    RULE_field_html_media = 48
    RULE_field_float = 49
    RULE_field_decimal = 50
    RULE_field_date = 51
    RULE_field_datetime = 52
    RULE_field_create_time = 53
    RULE_field_update_time = 54
    RULE_field_file = 55
    RULE_field_filer_file = 56
    RULE_field_filer_folder = 57
    RULE_field_text = 58
    RULE_field_text_size = 59
    RULE_field_text_choices = 60
    RULE_field_text_choice = 61
    RULE_field_text_choice_val = 62
    RULE_field_text_choice_key = 63
    RULE_field_int = 64
    RULE_field_int_choices = 65
    RULE_field_int_choice = 66
    RULE_field_int_choice_val = 67
    RULE_field_int_choice_key = 68
    RULE_field_slug = 69
    RULE_field_slug_ref_field = 70
    RULE_field_slug_ref_field_id = 71
    RULE_field_bool = 72
    RULE_field_bool_default = 73
    RULE_field_image = 74
    RULE_filer_image_type = 75
    RULE_field_image_sizes = 76
    RULE_field_image_size = 77
    RULE_field_image_size_dimensions = 78
    RULE_field_image_size_name = 79
    RULE_field_image_filters = 80
    RULE_field_image_filter = 81
    RULE_field_relation = 82
    RULE_field_relation_type = 83
    RULE_field_relation_target_ref = 84
    RULE_field_relation_target_class = 85
    RULE_field_relation_related_name = 86
    RULE_model_annotation = 87
    RULE_an_sortable = 88
    RULE_an_sortable_field_name = 89
    RULE_an_order = 90
    RULE_an_order_fields = 91
    RULE_an_rest = 92
    RULE_an_rest_config = 93
    RULE_an_rest_main_part = 94
    RULE_an_rest_discriminator = 95
    RULE_an_rest_i18n = 96
    RULE_an_rest_query = 97
    RULE_an_rest_on_create = 98
    RULE_an_rest_read_only = 99
    RULE_an_rest_user_field = 100
    RULE_an_rest_fields = 101
    RULE_an_rest_fields_write_mode = 102
    RULE_an_rest_auth = 103
    RULE_an_rest_auth_type = 104
    RULE_an_rest_auth_token_model = 105
    RULE_an_rest_auth_token_class = 106
    RULE_an_rest_annotate = 107
    RULE_an_rest_annotate_count = 108
    RULE_an_rest_annotate_count_field = 109
    RULE_an_rest_annotate_count_alias = 110
    RULE_an_rest_inline = 111
    RULE_an_rest_inline_decl = 112
    RULE_an_rest_inline_name = 113
    RULE_an_api = 114
    RULE_an_api_all = 115
    RULE_an_api_name = 116
    RULE_an_clean = 117
    RULE_an_pre_save = 118
    RULE_an_post_save = 119
    RULE_an_pre_delete = 120
    RULE_an_post_delete = 121
    RULE_an_m2m_changed = 122
    RULE_an_mixin = 123
    RULE_an_admin = 124
    RULE_an_admin_js = 125
    RULE_an_admin_css = 126
    RULE_an_admin_css_file_name = 127
    RULE_an_admin_js_file_name = 128
    RULE_an_admin_inlines = 129
    RULE_an_admin_inline = 130
    RULE_inline_name = 131
    RULE_inline_type = 132
    RULE_inline_extra = 133
    RULE_inline_fields = 134
    RULE_an_admin_tabs = 135
    RULE_an_admin_tab = 136
    RULE_tab_name = 137
    RULE_tab_verbose_name = 138
    RULE_an_admin_list = 139
    RULE_an_admin_read_only = 140
    RULE_an_admin_list_editable = 141
    RULE_an_admin_list_filter = 142
    RULE_an_admin_list_search = 143
    RULE_an_admin_fields = 144
    RULE_page = 145
    RULE_page_code = 146
    RULE_page_header = 147
    RULE_page_base = 148
    RULE_page_alias = 149
    RULE_page_alias_name = 150
    RULE_page_element = 151
    RULE_page_template = 152
    RULE_page_url = 153
    RULE_page_name = 154
    RULE_page_field = 155
    RULE_page_field_name = 156
    RULE_page_field_code = 157

    ruleNames =  [ "col_file", "page_imports", "model_imports", "import_source", 
                   "id_or_kw", "field_list_expr", "field_list_expr_field", 
                   "write_mode_expr", "python_code", "code_line", "code_block", 
                   "xml_content", "xml_element", "xml_name", "xml_name_end", 
                   "xml_tag_name", "xml_component_name", "xml_reference", 
                   "xml_attribute", "xml_chardata", "xml_misc", "cs_annotation", 
                   "an_filer", "an_langs", "an_langs_list", "an_suit", "an_suit_app_name", 
                   "col", "col_str_expr", "col_header", "col_verbose_name", 
                   "verbose_name_part", "col_base_name", "col_name", "col_field", 
                   "col_field_expr_or_def", "wrong_field_type", "col_field_expr", 
                   "col_field_expr_marker", "col_feild_expr_code", "string_or_quoted", 
                   "col_field_help_text", "col_field_vrebose_name", "col_field_name", 
                   "col_modifier", "col_field_def", "field_longtext", "field_html", 
                   "field_html_media", "field_float", "field_decimal", "field_date", 
                   "field_datetime", "field_create_time", "field_update_time", 
                   "field_file", "field_filer_file", "field_filer_folder", 
                   "field_text", "field_text_size", "field_text_choices", 
                   "field_text_choice", "field_text_choice_val", "field_text_choice_key", 
                   "field_int", "field_int_choices", "field_int_choice", 
                   "field_int_choice_val", "field_int_choice_key", "field_slug", 
                   "field_slug_ref_field", "field_slug_ref_field_id", "field_bool", 
                   "field_bool_default", "field_image", "filer_image_type", 
                   "field_image_sizes", "field_image_size", "field_image_size_dimensions", 
                   "field_image_size_name", "field_image_filters", "field_image_filter", 
                   "field_relation", "field_relation_type", "field_relation_target_ref", 
                   "field_relation_target_class", "field_relation_related_name", 
                   "model_annotation", "an_sortable", "an_sortable_field_name", 
                   "an_order", "an_order_fields", "an_rest", "an_rest_config", 
                   "an_rest_main_part", "an_rest_discriminator", "an_rest_i18n", 
                   "an_rest_query", "an_rest_on_create", "an_rest_read_only", 
                   "an_rest_user_field", "an_rest_fields", "an_rest_fields_write_mode", 
                   "an_rest_auth", "an_rest_auth_type", "an_rest_auth_token_model", 
                   "an_rest_auth_token_class", "an_rest_annotate", "an_rest_annotate_count", 
                   "an_rest_annotate_count_field", "an_rest_annotate_count_alias", 
                   "an_rest_inline", "an_rest_inline_decl", "an_rest_inline_name", 
                   "an_api", "an_api_all", "an_api_name", "an_clean", "an_pre_save", 
                   "an_post_save", "an_pre_delete", "an_post_delete", "an_m2m_changed", 
                   "an_mixin", "an_admin", "an_admin_js", "an_admin_css", 
                   "an_admin_css_file_name", "an_admin_js_file_name", "an_admin_inlines", 
                   "an_admin_inline", "inline_name", "inline_type", "inline_extra", 
                   "inline_fields", "an_admin_tabs", "an_admin_tab", "tab_name", 
                   "tab_verbose_name", "an_admin_list", "an_admin_read_only", 
                   "an_admin_list_editable", "an_admin_list_filter", "an_admin_list_search", 
                   "an_admin_fields", "page", "page_code", "page_header", 
                   "page_base", "page_alias", "page_alias_name", "page_element", 
                   "page_template", "page_url", "page_name", "page_field", 
                   "page_field_name", "page_field_code" ]

    EOF = Token.EOF
    AN_MIXIN=1
    AN_M2M_CHANGED=2
    AN_POST_DELETE=3
    AN_PRE_DELETE=4
    AN_POST_SAVE=5
    AN_PRE_SAVE=6
    AN_CLEAN=7
    AN_API=8
    AN_REST=9
    AN_ORDER=10
    AN_SORTABLE=11
    AN_LANGS=12
    AN_FILER=13
    AN_ADMIN=14
    AN_SUIT=15
    WRITE_MODE=16
    BOOL=17
    KW_EDITABLE=18
    KW_CSS=19
    KW_JS=20
    KW_INLINE_TYPE=21
    KW_AUTH_TYPE=22
    KW_INLINE=23
    KW_TYPE=24
    KW_USER_FIELD=25
    KW_ANNOTATE=26
    KW_ON_CREATE=27
    KW_QUERY=28
    KW_AUTH=29
    KW_COUNT=30
    KW_I18N=31
    KW_EXTRA=32
    KW_TABS=33
    KW_LIST=34
    KW_READ_ONLY=35
    KW_LIST_EDITABLE=36
    KW_LIST_FILTER=37
    KW_LIST_SEARCH=38
    KW_FIELDS=39
    KW_IMPORT=40
    KW_AS=41
    COL_FIELD_TYPE_LONGTEXT=42
    COL_FIELD_TYPE_HTML=43
    COL_FIELD_TYPE_HTML_MEDIA=44
    COL_FIELD_TYPE_FLOAT=45
    COL_FIELD_TYPE_DECIMAL=46
    COL_FIELD_TYPE_DATE=47
    COL_FIELD_TYPE_DATETIME=48
    COL_FIELD_TYPE_CREATE_TIME=49
    COL_FIELD_TYPE_UPDATE_TIME=50
    COL_FIELD_TYPE_IMAGE=51
    COL_FIELD_TYPE_FILE=52
    COL_FIELD_TYPE_FILER_IMAGE=53
    COL_FIELD_TYPE_FILER_FILE=54
    COL_FIELD_TYPE_FILER_FOLDER=55
    COL_FIELD_TYPE_FILER_IMAGE_FOLDER=56
    COL_FIELD_TYPE_TEXT=57
    COL_FIELD_TYPE_INT=58
    COL_FIELD_TYPE_SLUG=59
    COL_FIELD_TYPE_BOOL=60
    COL_FIELD_TYPE_ONE=61
    COL_FIELD_TYPE_ONE2ONE=62
    COL_FIELD_TYPE_MANY=63
    COL_FIELD_CHOICES=64
    NL=65
    ID=66
    DIGIT=67
    CLASSNAME=68
    SIZE2D=69
    FILTER=70
    COLON=71
    EXCLUDE=72
    BRACE_OPEN=73
    BRACE_CLOSE=74
    SQ_BRACE_OPEN=75
    SQ_BRACE_CLOSE=76
    QUESTION_MARK=77
    COMA=78
    DOT=79
    STRING_DQ=80
    STRING_SQ=81
    FIELD_VNAME=82
    RELATED=83
    RELATED_EXTEND=84
    REF_SIGN=85
    ANNOTATION=86
    LINE_SEPARATOR=87
    URL_SEGMENTS=88
    TEMPLATE_NAME=89
    COMMENT_LINE=90
    COMMENT_BLOCK=91
    SLASH=92
    EQUALS=93
    DOLLAR=94
    AMP=95
    EXCLAM=96
    STAR=97
    APPROX=98
    WS=99
    COL_FIELD_CALCULATED=100
    ASSIGN=101
    ASSIGN_STATIC=102
    CODE_BLOCK_START=103
    XML_OPEN=104
    ERRCHAR=105
    PYTHON_CODE=106
    CODE_BLOCK_END=107
    CODE_BLOCK_ERRCHAR=108
    PYTHON_LINE_ERRCHAR=109
    PYTHON_LINE_END=110
    PYTHON_EXPR_ERRCHAR=111
    XML_EntityRef=112
    XML_CharRef=113
    XML_TEXT=114
    XML_ERRCHAR=115
    XML_CLOSE=116
    XML_SPECIAL_CLOSE=117
    XML_SLASH_CLOSE=118
    XML_SLASH=119
    XML_EQUALS=120
    XML_REACT_ATTR=121
    XML_STRING=122
    XML_CmpName=123
    XML_Name=124
    XML_INSIDE_ERRCHAR=125
    PYTHON_LINE_NL=126

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Col_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ZmeiLangParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def cs_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Cs_annotationContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Cs_annotationContext,i)


        def page_imports(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_importsContext,0)


        def page(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.PageContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.PageContext,i)


        def model_imports(self):
            return self.getTypedRuleContext(ZmeiLangParser.Model_importsContext,0)


        def col(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.ColContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.ColContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_file" ):
                listener.enterCol_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_file" ):
                listener.exitCol_file(self)




    def col_file(self):

        localctx = ZmeiLangParser.Col_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_col_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 316
                    self.match(ZmeiLangParser.NL) 
                self.state = 321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 325
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 322
                    self.cs_annotation() 
                self.state = 327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 328
                self.page_imports()


            self.state = 334
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 331
                    self.match(ZmeiLangParser.NL) 
                self.state = 336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.SQ_BRACE_OPEN:
                self.state = 337
                self.page()
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.KW_IMPORT:
                self.state = 343
                self.model_imports()


            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.REF_SIGN:
                self.state = 346
                self.col()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.NL:
                self.state = 352
                self.match(ZmeiLangParser.NL)
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 358
            self.match(ZmeiLangParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_importsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(ZmeiLangParser.KW_IMPORT, 0)

        def import_source(self):
            return self.getTypedRuleContext(ZmeiLangParser.Import_sourceContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_imports

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_imports" ):
                listener.enterPage_imports(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_imports" ):
                listener.exitPage_imports(self)




    def page_imports(self):

        localctx = ZmeiLangParser.Page_importsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_page_imports)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(ZmeiLangParser.KW_IMPORT)
            self.state = 361
            self.import_source()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_importsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(ZmeiLangParser.KW_IMPORT, 0)

        def import_source(self):
            return self.getTypedRuleContext(ZmeiLangParser.Import_sourceContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_model_imports

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_imports" ):
                listener.enterModel_imports(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_imports" ):
                listener.exitModel_imports(self)




    def model_imports(self):

        localctx = ZmeiLangParser.Model_importsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_model_imports)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(ZmeiLangParser.KW_IMPORT)
            self.state = 364
            self.import_source()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(ZmeiLangParser.Code_blockContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_import_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_source" ):
                listener.enterImport_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_source" ):
                listener.exitImport_source(self)




    def import_source(self):

        localctx = ZmeiLangParser.Import_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_or_kwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ZmeiLangParser.ID, 0)

        def BOOL(self):
            return self.getToken(ZmeiLangParser.BOOL, 0)

        def WRITE_MODE(self):
            return self.getToken(ZmeiLangParser.WRITE_MODE, 0)

        def KW_CSS(self):
            return self.getToken(ZmeiLangParser.KW_CSS, 0)

        def KW_JS(self):
            return self.getToken(ZmeiLangParser.KW_JS, 0)

        def KW_INLINE_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_INLINE_TYPE, 0)

        def KW_AUTH_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_AUTH_TYPE, 0)

        def KW_INLINE(self):
            return self.getToken(ZmeiLangParser.KW_INLINE, 0)

        def KW_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_TYPE, 0)

        def KW_USER_FIELD(self):
            return self.getToken(ZmeiLangParser.KW_USER_FIELD, 0)

        def KW_ANNOTATE(self):
            return self.getToken(ZmeiLangParser.KW_ANNOTATE, 0)

        def KW_ON_CREATE(self):
            return self.getToken(ZmeiLangParser.KW_ON_CREATE, 0)

        def KW_QUERY(self):
            return self.getToken(ZmeiLangParser.KW_QUERY, 0)

        def KW_AUTH(self):
            return self.getToken(ZmeiLangParser.KW_AUTH, 0)

        def KW_COUNT(self):
            return self.getToken(ZmeiLangParser.KW_COUNT, 0)

        def KW_I18N(self):
            return self.getToken(ZmeiLangParser.KW_I18N, 0)

        def KW_EXTRA(self):
            return self.getToken(ZmeiLangParser.KW_EXTRA, 0)

        def KW_TABS(self):
            return self.getToken(ZmeiLangParser.KW_TABS, 0)

        def KW_LIST(self):
            return self.getToken(ZmeiLangParser.KW_LIST, 0)

        def KW_READ_ONLY(self):
            return self.getToken(ZmeiLangParser.KW_READ_ONLY, 0)

        def KW_LIST_EDITABLE(self):
            return self.getToken(ZmeiLangParser.KW_LIST_EDITABLE, 0)

        def KW_LIST_FILTER(self):
            return self.getToken(ZmeiLangParser.KW_LIST_FILTER, 0)

        def KW_LIST_SEARCH(self):
            return self.getToken(ZmeiLangParser.KW_LIST_SEARCH, 0)

        def KW_FIELDS(self):
            return self.getToken(ZmeiLangParser.KW_FIELDS, 0)

        def KW_IMPORT(self):
            return self.getToken(ZmeiLangParser.KW_IMPORT, 0)

        def KW_AS(self):
            return self.getToken(ZmeiLangParser.KW_AS, 0)

        def COL_FIELD_TYPE_LONGTEXT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, 0)

        def COL_FIELD_TYPE_HTML(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_HTML, 0)

        def COL_FIELD_TYPE_HTML_MEDIA(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, 0)

        def COL_FIELD_TYPE_FLOAT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FLOAT, 0)

        def COL_FIELD_TYPE_DECIMAL(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, 0)

        def COL_FIELD_TYPE_DATE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DATE, 0)

        def COL_FIELD_TYPE_DATETIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DATETIME, 0)

        def COL_FIELD_TYPE_CREATE_TIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, 0)

        def COL_FIELD_TYPE_UPDATE_TIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, 0)

        def COL_FIELD_TYPE_IMAGE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_IMAGE, 0)

        def COL_FIELD_TYPE_FILE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILE, 0)

        def COL_FIELD_TYPE_FILER_IMAGE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, 0)

        def COL_FIELD_TYPE_FILER_FILE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, 0)

        def COL_FIELD_TYPE_FILER_FOLDER(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, 0)

        def COL_FIELD_TYPE_FILER_IMAGE_FOLDER(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, 0)

        def COL_FIELD_TYPE_TEXT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_TEXT, 0)

        def COL_FIELD_TYPE_INT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_INT, 0)

        def COL_FIELD_TYPE_SLUG(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_SLUG, 0)

        def COL_FIELD_TYPE_BOOL(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_BOOL, 0)

        def COL_FIELD_TYPE_ONE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_ONE, 0)

        def COL_FIELD_TYPE_ONE2ONE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, 0)

        def COL_FIELD_TYPE_MANY(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_MANY, 0)

        def COL_FIELD_CHOICES(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_CHOICES, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_id_or_kw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_or_kw" ):
                listener.enterId_or_kw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_or_kw" ):
                listener.exitId_or_kw(self)




    def id_or_kw(self):

        localctx = ZmeiLangParser.Id_or_kwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_id_or_kw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            _la = self._input.LA(1)
            if not(((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (ZmeiLangParser.WRITE_MODE - 16)) | (1 << (ZmeiLangParser.BOOL - 16)) | (1 << (ZmeiLangParser.KW_CSS - 16)) | (1 << (ZmeiLangParser.KW_JS - 16)) | (1 << (ZmeiLangParser.KW_INLINE_TYPE - 16)) | (1 << (ZmeiLangParser.KW_AUTH_TYPE - 16)) | (1 << (ZmeiLangParser.KW_INLINE - 16)) | (1 << (ZmeiLangParser.KW_TYPE - 16)) | (1 << (ZmeiLangParser.KW_USER_FIELD - 16)) | (1 << (ZmeiLangParser.KW_ANNOTATE - 16)) | (1 << (ZmeiLangParser.KW_ON_CREATE - 16)) | (1 << (ZmeiLangParser.KW_QUERY - 16)) | (1 << (ZmeiLangParser.KW_AUTH - 16)) | (1 << (ZmeiLangParser.KW_COUNT - 16)) | (1 << (ZmeiLangParser.KW_I18N - 16)) | (1 << (ZmeiLangParser.KW_EXTRA - 16)) | (1 << (ZmeiLangParser.KW_TABS - 16)) | (1 << (ZmeiLangParser.KW_LIST - 16)) | (1 << (ZmeiLangParser.KW_READ_ONLY - 16)) | (1 << (ZmeiLangParser.KW_LIST_EDITABLE - 16)) | (1 << (ZmeiLangParser.KW_LIST_FILTER - 16)) | (1 << (ZmeiLangParser.KW_LIST_SEARCH - 16)) | (1 << (ZmeiLangParser.KW_FIELDS - 16)) | (1 << (ZmeiLangParser.KW_IMPORT - 16)) | (1 << (ZmeiLangParser.KW_AS - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FLOAT - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DECIMAL - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATETIME - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_IMAGE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_TEXT - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_INT - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_SLUG - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_BOOL - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 16)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 16)) | (1 << (ZmeiLangParser.ID - 16)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_list_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(ZmeiLangParser.STAR, 0)

        def DOT(self):
            return self.getToken(ZmeiLangParser.DOT, 0)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def EXCLUDE(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.EXCLUDE)
            else:
                return self.getToken(ZmeiLangParser.EXCLUDE, i)

        def field_list_expr_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_list_expr_fieldContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_list_expr_fieldContext,i)


        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_list_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_list_expr" ):
                listener.enterField_list_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_list_expr" ):
                listener.exitField_list_expr(self)




    def field_list_expr(self):

        localctx = ZmeiLangParser.Field_list_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_field_list_expr)
        self._la = 0 # Token type
        try:
            self.state = 393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.DOT, ZmeiLangParser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ZmeiLangParser.DOT:
                    self.state = 370
                    self.match(ZmeiLangParser.DOT)


                self.state = 373
                self.match(ZmeiLangParser.STAR)
                self.state = 379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 374
                        self.match(ZmeiLangParser.COMA)
                        self.state = 375
                        self.match(ZmeiLangParser.EXCLUDE)
                        self.state = 376
                        self.field_list_expr_field() 
                    self.state = 381
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                pass
            elif token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 382
                self.id_or_kw()
                self.state = 390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 383
                        self.match(ZmeiLangParser.COMA)
                        self.state = 385
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ZmeiLangParser.EXCLUDE:
                            self.state = 384
                            self.match(ZmeiLangParser.EXCLUDE)


                        self.state = 387
                        self.field_list_expr_field() 
                    self.state = 392
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_list_expr_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.STAR)
            else:
                return self.getToken(ZmeiLangParser.STAR, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_list_expr_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_list_expr_field" ):
                listener.enterField_list_expr_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_list_expr_field" ):
                listener.exitField_list_expr_field(self)




    def field_list_expr_field(self):

        localctx = ZmeiLangParser.Field_list_expr_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_field_list_expr_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.STAR:
                self.state = 395
                self.match(ZmeiLangParser.STAR)


            self.state = 398
            self.id_or_kw()
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.STAR:
                self.state = 399
                self.match(ZmeiLangParser.STAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Write_mode_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQ_BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.SQ_BRACE_OPEN, 0)

        def WRITE_MODE(self):
            return self.getToken(ZmeiLangParser.WRITE_MODE, 0)

        def SQ_BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.SQ_BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_write_mode_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_mode_expr" ):
                listener.enterWrite_mode_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_mode_expr" ):
                listener.exitWrite_mode_expr(self)




    def write_mode_expr(self):

        localctx = ZmeiLangParser.Write_mode_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_write_mode_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(ZmeiLangParser.SQ_BRACE_OPEN)
            self.state = 403
            self.match(ZmeiLangParser.WRITE_MODE)
            self.state = 404
            self.match(ZmeiLangParser.SQ_BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_codeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(ZmeiLangParser.Code_blockContext,0)


        def code_line(self):
            return self.getTypedRuleContext(ZmeiLangParser.Code_lineContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_python_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_code" ):
                listener.enterPython_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_code" ):
                listener.exitPython_code(self)




    def python_code(self):

        localctx = ZmeiLangParser.Python_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_python_code)
        try:
            self.state = 408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.CODE_BLOCK_START]:
                self.enterOuterAlt(localctx, 1)
                self.state = 406
                self.code_block()
                pass
            elif token in [ZmeiLangParser.ASSIGN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 407
                self.code_line()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_lineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(ZmeiLangParser.ASSIGN, 0)

        def PYTHON_CODE(self):
            return self.getToken(ZmeiLangParser.PYTHON_CODE, 0)

        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_code_line

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_line" ):
                listener.enterCode_line(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_line" ):
                listener.exitCode_line(self)




    def code_line(self):

        localctx = ZmeiLangParser.Code_lineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_code_line)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(ZmeiLangParser.ASSIGN)
            self.state = 411
            self.match(ZmeiLangParser.PYTHON_CODE)
            self.state = 412
            self.match(ZmeiLangParser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CODE_BLOCK_START(self):
            return self.getToken(ZmeiLangParser.CODE_BLOCK_START, 0)

        def PYTHON_CODE(self):
            return self.getToken(ZmeiLangParser.PYTHON_CODE, 0)

        def CODE_BLOCK_END(self):
            return self.getToken(ZmeiLangParser.CODE_BLOCK_END, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_code_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_block" ):
                listener.enterCode_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_block" ):
                listener.exitCode_block(self)




    def code_block(self):

        localctx = ZmeiLangParser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_code_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(ZmeiLangParser.CODE_BLOCK_START)
            self.state = 415
            self.match(ZmeiLangParser.PYTHON_CODE)
            self.state = 416
            self.match(ZmeiLangParser.CODE_BLOCK_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_contentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_chardata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Xml_chardataContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Xml_chardataContext,i)


        def xml_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Xml_elementContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Xml_elementContext,i)


        def xml_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Xml_referenceContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Xml_referenceContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_content

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_content" ):
                listener.enterXml_content(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_content" ):
                listener.exitXml_content(self)




    def xml_content(self):

        localctx = ZmeiLangParser.Xml_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_xml_content)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ZmeiLangParser.NL - 65)) | (1 << (ZmeiLangParser.WS - 65)) | (1 << (ZmeiLangParser.XML_TEXT - 65)))) != 0):
                self.state = 418
                self.xml_chardata()


            self.state = 430
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 423
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ZmeiLangParser.XML_OPEN]:
                        self.state = 421
                        self.xml_element()
                        pass
                    elif token in [ZmeiLangParser.XML_EntityRef, ZmeiLangParser.XML_CharRef]:
                        self.state = 422
                        self.xml_reference()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ZmeiLangParser.NL - 65)) | (1 << (ZmeiLangParser.WS - 65)) | (1 << (ZmeiLangParser.XML_TEXT - 65)))) != 0):
                        self.state = 425
                        self.xml_chardata()

             
                self.state = 432
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML_OPEN(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.XML_OPEN)
            else:
                return self.getToken(ZmeiLangParser.XML_OPEN, i)

        def xml_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_nameContext,0)


        def XML_CLOSE(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.XML_CLOSE)
            else:
                return self.getToken(ZmeiLangParser.XML_CLOSE, i)

        def xml_content(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_contentContext,0)


        def XML_SLASH(self):
            return self.getToken(ZmeiLangParser.XML_SLASH, 0)

        def xml_name_end(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_name_endContext,0)


        def xml_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Xml_attributeContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Xml_attributeContext,i)


        def XML_SLASH_CLOSE(self):
            return self.getToken(ZmeiLangParser.XML_SLASH_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_element" ):
                listener.enterXml_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_element" ):
                listener.exitXml_element(self)




    def xml_element(self):

        localctx = ZmeiLangParser.Xml_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_xml_element)
        self._la = 0 # Token type
        try:
            self.state = 458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 433
                self.match(ZmeiLangParser.XML_OPEN)
                self.state = 434
                self.xml_name()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ZmeiLangParser.XML_Name:
                    self.state = 435
                    self.xml_attribute()
                    self.state = 440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 441
                self.match(ZmeiLangParser.XML_CLOSE)
                self.state = 442
                self.xml_content()
                self.state = 443
                self.match(ZmeiLangParser.XML_OPEN)
                self.state = 444
                self.match(ZmeiLangParser.XML_SLASH)
                self.state = 445
                self.xml_name_end()
                self.state = 446
                self.match(ZmeiLangParser.XML_CLOSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 448
                self.match(ZmeiLangParser.XML_OPEN)
                self.state = 449
                self.xml_name()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ZmeiLangParser.XML_Name:
                    self.state = 450
                    self.xml_attribute()
                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 456
                self.match(ZmeiLangParser.XML_SLASH_CLOSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_component_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_component_nameContext,0)


        def xml_tag_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_tag_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_name" ):
                listener.enterXml_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_name" ):
                listener.exitXml_name(self)




    def xml_name(self):

        localctx = ZmeiLangParser.Xml_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_xml_name)
        try:
            self.state = 462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.XML_CmpName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 460
                self.xml_component_name()
                pass
            elif token in [ZmeiLangParser.XML_Name]:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.xml_tag_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_name_endContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_component_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_component_nameContext,0)


        def xml_tag_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_tag_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_name_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_name_end" ):
                listener.enterXml_name_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_name_end" ):
                listener.exitXml_name_end(self)




    def xml_name_end(self):

        localctx = ZmeiLangParser.Xml_name_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_xml_name_end)
        try:
            self.state = 466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.XML_CmpName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 464
                self.xml_component_name()
                pass
            elif token in [ZmeiLangParser.XML_Name]:
                self.enterOuterAlt(localctx, 2)
                self.state = 465
                self.xml_tag_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_tag_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML_Name(self):
            return self.getToken(ZmeiLangParser.XML_Name, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_tag_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_tag_name" ):
                listener.enterXml_tag_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_tag_name" ):
                listener.exitXml_tag_name(self)




    def xml_tag_name(self):

        localctx = ZmeiLangParser.Xml_tag_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_xml_tag_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(ZmeiLangParser.XML_Name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_component_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML_CmpName(self):
            return self.getToken(ZmeiLangParser.XML_CmpName, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_component_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_component_name" ):
                listener.enterXml_component_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_component_name" ):
                listener.exitXml_component_name(self)




    def xml_component_name(self):

        localctx = ZmeiLangParser.Xml_component_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_xml_component_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(ZmeiLangParser.XML_CmpName)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML_EntityRef(self):
            return self.getToken(ZmeiLangParser.XML_EntityRef, 0)

        def XML_CharRef(self):
            return self.getToken(ZmeiLangParser.XML_CharRef, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_reference" ):
                listener.enterXml_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_reference" ):
                listener.exitXml_reference(self)




    def xml_reference(self):

        localctx = ZmeiLangParser.Xml_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_xml_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.XML_EntityRef or _la==ZmeiLangParser.XML_CharRef):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML_Name(self):
            return self.getToken(ZmeiLangParser.XML_Name, 0)

        def XML_EQUALS(self):
            return self.getToken(ZmeiLangParser.XML_EQUALS, 0)

        def XML_STRING(self):
            return self.getToken(ZmeiLangParser.XML_STRING, 0)

        def XML_REACT_ATTR(self):
            return self.getToken(ZmeiLangParser.XML_REACT_ATTR, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute" ):
                listener.enterXml_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute" ):
                listener.exitXml_attribute(self)




    def xml_attribute(self):

        localctx = ZmeiLangParser.Xml_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_xml_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(ZmeiLangParser.XML_Name)
            self.state = 475
            self.match(ZmeiLangParser.XML_EQUALS)
            self.state = 476
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.XML_REACT_ATTR or _la==ZmeiLangParser.XML_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_chardataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML_TEXT(self):
            return self.getToken(ZmeiLangParser.XML_TEXT, 0)

        def WS(self):
            return self.getToken(ZmeiLangParser.WS, 0)

        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_chardata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_chardata" ):
                listener.enterXml_chardata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_chardata" ):
                listener.exitXml_chardata(self)




    def xml_chardata(self):

        localctx = ZmeiLangParser.Xml_chardataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_xml_chardata)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (ZmeiLangParser.NL - 65)) | (1 << (ZmeiLangParser.WS - 65)) | (1 << (ZmeiLangParser.XML_TEXT - 65)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_miscContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WS(self):
            return self.getToken(ZmeiLangParser.WS, 0)

        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_misc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_misc" ):
                listener.enterXml_misc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_misc" ):
                listener.exitXml_misc(self)




    def xml_misc(self):

        localctx = ZmeiLangParser.Xml_miscContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_xml_misc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.NL or _la==ZmeiLangParser.WS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cs_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_suit(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_suitContext,0)


        def an_langs(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_langsContext,0)


        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_cs_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCs_annotation" ):
                listener.enterCs_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCs_annotation" ):
                listener.exitCs_annotation(self)




    def cs_annotation(self):

        localctx = ZmeiLangParser.Cs_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_cs_annotation)
        try:
            self.state = 485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.AN_SUIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 482
                self.an_suit()
                pass
            elif token in [ZmeiLangParser.AN_LANGS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 483
                self.an_langs()
                pass
            elif token in [ZmeiLangParser.NL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 484
                self.match(ZmeiLangParser.NL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_filerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_FILER(self):
            return self.getToken(ZmeiLangParser.AN_FILER, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_filer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_filer" ):
                listener.enterAn_filer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_filer" ):
                listener.exitAn_filer(self)




    def an_filer(self):

        localctx = ZmeiLangParser.An_filerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_an_filer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(ZmeiLangParser.AN_FILER)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 488
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 489
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_langsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_LANGS(self):
            return self.getToken(ZmeiLangParser.AN_LANGS, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_langs_list(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_langs_listContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_langs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_langs" ):
                listener.enterAn_langs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_langs" ):
                listener.exitAn_langs(self)




    def an_langs(self):

        localctx = ZmeiLangParser.An_langsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_an_langs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(ZmeiLangParser.AN_LANGS)
            self.state = 493
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 494
            self.an_langs_list()
            self.state = 495
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_langs_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.ID)
            else:
                return self.getToken(ZmeiLangParser.ID, i)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_langs_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_langs_list" ):
                listener.enterAn_langs_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_langs_list" ):
                listener.exitAn_langs_list(self)




    def an_langs_list(self):

        localctx = ZmeiLangParser.An_langs_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_an_langs_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(ZmeiLangParser.ID)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 498
                self.match(ZmeiLangParser.COMA)
                self.state = 499
                self.match(ZmeiLangParser.ID)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_suitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_SUIT(self):
            return self.getToken(ZmeiLangParser.AN_SUIT, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_suit_app_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_suit_app_nameContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_suit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_suit" ):
                listener.enterAn_suit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_suit" ):
                listener.exitAn_suit(self)




    def an_suit(self):

        localctx = ZmeiLangParser.An_suitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_an_suit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(ZmeiLangParser.AN_SUIT)
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 506
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 507
                self.an_suit_app_name()
                self.state = 508
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_suit_app_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_suit_app_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_suit_app_name" ):
                listener.enterAn_suit_app_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_suit_app_name" ):
                listener.exitAn_suit_app_name(self)




    def an_suit_app_name(self):

        localctx = ZmeiLangParser.An_suit_app_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_an_suit_app_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_header(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_headerContext,0)


        def col_str_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_str_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def col_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Col_fieldContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Col_fieldContext,i)


        def model_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Model_annotationContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Model_annotationContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol" ):
                listener.enterCol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol" ):
                listener.exitCol(self)




    def col(self):

        localctx = ZmeiLangParser.ColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_col)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.col_header()
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 515
                self.col_str_expr()


            self.state = 521
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 518
                    self.match(ZmeiLangParser.NL) 
                self.state = 523
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ZmeiLangParser.WRITE_MODE) | (1 << ZmeiLangParser.BOOL) | (1 << ZmeiLangParser.KW_CSS) | (1 << ZmeiLangParser.KW_JS) | (1 << ZmeiLangParser.KW_INLINE_TYPE) | (1 << ZmeiLangParser.KW_AUTH_TYPE) | (1 << ZmeiLangParser.KW_INLINE) | (1 << ZmeiLangParser.KW_TYPE) | (1 << ZmeiLangParser.KW_USER_FIELD) | (1 << ZmeiLangParser.KW_ANNOTATE) | (1 << ZmeiLangParser.KW_ON_CREATE) | (1 << ZmeiLangParser.KW_QUERY) | (1 << ZmeiLangParser.KW_AUTH) | (1 << ZmeiLangParser.KW_COUNT) | (1 << ZmeiLangParser.KW_I18N) | (1 << ZmeiLangParser.KW_EXTRA) | (1 << ZmeiLangParser.KW_TABS) | (1 << ZmeiLangParser.KW_LIST) | (1 << ZmeiLangParser.KW_READ_ONLY) | (1 << ZmeiLangParser.KW_LIST_EDITABLE) | (1 << ZmeiLangParser.KW_LIST_FILTER) | (1 << ZmeiLangParser.KW_LIST_SEARCH) | (1 << ZmeiLangParser.KW_FIELDS) | (1 << ZmeiLangParser.KW_IMPORT) | (1 << ZmeiLangParser.KW_AS) | (1 << ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_HTML) | (1 << ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FLOAT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DECIMAL) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DATE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DATETIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER) | (1 << ZmeiLangParser.COL_FIELD_TYPE_TEXT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_INT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_SLUG) | (1 << ZmeiLangParser.COL_FIELD_TYPE_BOOL) | (1 << ZmeiLangParser.COL_FIELD_TYPE_ONE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_MANY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ZmeiLangParser.COL_FIELD_CHOICES - 64)) | (1 << (ZmeiLangParser.ID - 64)) | (1 << (ZmeiLangParser.EQUALS - 64)) | (1 << (ZmeiLangParser.DOLLAR - 64)) | (1 << (ZmeiLangParser.AMP - 64)) | (1 << (ZmeiLangParser.EXCLAM - 64)) | (1 << (ZmeiLangParser.STAR - 64)) | (1 << (ZmeiLangParser.APPROX - 64)))) != 0):
                self.state = 524
                self.col_field()
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 533
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 530
                    self.match(ZmeiLangParser.NL) 
                self.state = 535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 539
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 536
                    self.model_annotation() 
                self.state = 541
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 545
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 542
                    self.match(ZmeiLangParser.NL) 
                self.state = 547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_str_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def EOF(self):
            return self.getToken(ZmeiLangParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_str_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_str_expr" ):
                listener.enterCol_str_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_str_expr" ):
                listener.exitCol_str_expr(self)




    def col_str_expr(self):

        localctx = ZmeiLangParser.Col_str_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_col_str_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(ZmeiLangParser.EQUALS)
            self.state = 549
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.NL]:
                self.state = 551 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 550
                        self.match(ZmeiLangParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 553 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                pass
            elif token in [ZmeiLangParser.EOF]:
                self.state = 555
                self.match(ZmeiLangParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_headerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF_SIGN(self):
            return self.getToken(ZmeiLangParser.REF_SIGN, 0)

        def col_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_nameContext,0)


        def LINE_SEPARATOR(self):
            return self.getToken(ZmeiLangParser.LINE_SEPARATOR, 0)

        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def col_base_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_base_nameContext,0)


        def col_verbose_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_verbose_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_header" ):
                listener.enterCol_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_header" ):
                listener.exitCol_header(self)




    def col_header(self):

        localctx = ZmeiLangParser.Col_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_col_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(ZmeiLangParser.REF_SIGN)
            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 559
                self.col_base_name()


            self.state = 562
            self.col_name()
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.COLON:
                self.state = 563
                self.col_verbose_name()


            self.state = 566
            self.match(ZmeiLangParser.LINE_SEPARATOR)
            self.state = 567
            self.match(ZmeiLangParser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_verbose_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def verbose_name_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Verbose_name_partContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Verbose_name_partContext,i)


        def SLASH(self):
            return self.getToken(ZmeiLangParser.SLASH, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_verbose_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_verbose_name" ):
                listener.enterCol_verbose_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_verbose_name" ):
                listener.exitCol_verbose_name(self)




    def col_verbose_name(self):

        localctx = ZmeiLangParser.Col_verbose_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_col_verbose_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(ZmeiLangParser.COLON)
            self.state = 570
            self.verbose_name_part()
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.SLASH:
                self.state = 571
                self.match(ZmeiLangParser.SLASH)
                self.state = 572
                self.verbose_name_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Verbose_name_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_verbose_name_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVerbose_name_part" ):
                listener.enterVerbose_name_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVerbose_name_part" ):
                listener.exitVerbose_name_part(self)




    def verbose_name_part(self):

        localctx = ZmeiLangParser.Verbose_name_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_verbose_name_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 575
                self.id_or_kw()
                pass
            elif token in [ZmeiLangParser.STRING_DQ]:
                self.state = 576
                self.match(ZmeiLangParser.STRING_DQ)
                pass
            elif token in [ZmeiLangParser.STRING_SQ]:
                self.state = 577
                self.match(ZmeiLangParser.STRING_SQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_base_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def RELATED(self):
            return self.getToken(ZmeiLangParser.RELATED, 0)

        def RELATED_EXTEND(self):
            return self.getToken(ZmeiLangParser.RELATED_EXTEND, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_base_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_base_name" ):
                listener.enterCol_base_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_base_name" ):
                listener.exitCol_base_name(self)




    def col_base_name(self):

        localctx = ZmeiLangParser.Col_base_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_col_base_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.id_or_kw()
            self.state = 581
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.RELATED or _la==ZmeiLangParser.RELATED_EXTEND):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_name" ):
                listener.enterCol_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_name" ):
                listener.exitCol_name(self)




    def col_name(self):

        localctx = ZmeiLangParser.Col_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_col_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_field_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_nameContext,0)


        def EOF(self):
            return self.getToken(ZmeiLangParser.EOF, 0)

        def col_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Col_modifierContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Col_modifierContext,i)


        def col_field_expr_or_def(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_expr_or_defContext,0)


        def col_field_vrebose_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_vrebose_nameContext,0)


        def col_field_help_text(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_help_textContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field" ):
                listener.enterCol_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field" ):
                listener.exitCol_field(self)




    def col_field(self):

        localctx = ZmeiLangParser.Col_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_col_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (ZmeiLangParser.EQUALS - 93)) | (1 << (ZmeiLangParser.DOLLAR - 93)) | (1 << (ZmeiLangParser.AMP - 93)) | (1 << (ZmeiLangParser.EXCLAM - 93)) | (1 << (ZmeiLangParser.STAR - 93)) | (1 << (ZmeiLangParser.APPROX - 93)))) != 0):
                self.state = 585
                self.col_modifier()
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 591
            self.col_field_name()
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ZmeiLangParser.COLON - 71)) | (1 << (ZmeiLangParser.ASSIGN - 71)) | (1 << (ZmeiLangParser.ASSIGN_STATIC - 71)))) != 0):
                self.state = 592
                self.col_field_expr_or_def()


            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.SLASH:
                self.state = 595
                self.col_field_vrebose_name()


            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.QUESTION_MARK:
                self.state = 598
                self.col_field_help_text()


            self.state = 607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.NL]:
                self.state = 602 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 601
                        self.match(ZmeiLangParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 604 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass
            elif token in [ZmeiLangParser.EOF]:
                self.state = 606
                self.match(ZmeiLangParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_expr_or_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_field_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_exprContext,0)


        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def col_field_def(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_defContext,0)


        def wrong_field_type(self):
            return self.getTypedRuleContext(ZmeiLangParser.Wrong_field_typeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_expr_or_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_expr_or_def" ):
                listener.enterCol_field_expr_or_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_expr_or_def" ):
                listener.exitCol_field_expr_or_def(self)




    def col_field_expr_or_def(self):

        localctx = ZmeiLangParser.Col_field_expr_or_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_col_field_expr_or_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 609
                self.match(ZmeiLangParser.COLON)
                self.state = 610
                self.col_field_def()
                pass

            elif la_ == 2:
                self.state = 611
                self.match(ZmeiLangParser.COLON)
                self.state = 612
                self.wrong_field_type()
                pass

            elif la_ == 3:
                self.state = 613
                self.col_field_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wrong_field_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_wrong_field_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrong_field_type" ):
                listener.enterWrong_field_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrong_field_type" ):
                listener.exitWrong_field_type(self)




    def wrong_field_type(self):

        localctx = ZmeiLangParser.Wrong_field_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_wrong_field_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_field_expr_marker(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_expr_markerContext,0)


        def col_feild_expr_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_feild_expr_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_expr" ):
                listener.enterCol_field_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_expr" ):
                listener.exitCol_field_expr(self)




    def col_field_expr(self):

        localctx = ZmeiLangParser.Col_field_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_col_field_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.col_field_expr_marker()
            self.state = 619
            self.col_feild_expr_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_expr_markerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(ZmeiLangParser.ASSIGN, 0)

        def ASSIGN_STATIC(self):
            return self.getToken(ZmeiLangParser.ASSIGN_STATIC, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_expr_marker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_expr_marker" ):
                listener.enterCol_field_expr_marker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_expr_marker" ):
                listener.exitCol_field_expr_marker(self)




    def col_field_expr_marker(self):

        localctx = ZmeiLangParser.Col_field_expr_markerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_col_field_expr_marker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.ASSIGN or _la==ZmeiLangParser.ASSIGN_STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_feild_expr_codeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTHON_CODE(self):
            return self.getToken(ZmeiLangParser.PYTHON_CODE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_feild_expr_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_feild_expr_code" ):
                listener.enterCol_feild_expr_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_feild_expr_code" ):
                listener.exitCol_feild_expr_code(self)




    def col_feild_expr_code(self):

        localctx = ZmeiLangParser.Col_feild_expr_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_col_feild_expr_code)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(ZmeiLangParser.PYTHON_CODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_or_quotedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def id_or_kw(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Id_or_kwContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_string_or_quoted

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_or_quoted" ):
                listener.enterString_or_quoted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_or_quoted" ):
                listener.exitString_or_quoted(self)




    def string_or_quoted(self):

        localctx = ZmeiLangParser.String_or_quotedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_string_or_quoted)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 626 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 625
                    self.id_or_kw()
                    self.state = 628 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & ((1 << (ZmeiLangParser.WRITE_MODE - 16)) | (1 << (ZmeiLangParser.BOOL - 16)) | (1 << (ZmeiLangParser.KW_CSS - 16)) | (1 << (ZmeiLangParser.KW_JS - 16)) | (1 << (ZmeiLangParser.KW_INLINE_TYPE - 16)) | (1 << (ZmeiLangParser.KW_AUTH_TYPE - 16)) | (1 << (ZmeiLangParser.KW_INLINE - 16)) | (1 << (ZmeiLangParser.KW_TYPE - 16)) | (1 << (ZmeiLangParser.KW_USER_FIELD - 16)) | (1 << (ZmeiLangParser.KW_ANNOTATE - 16)) | (1 << (ZmeiLangParser.KW_ON_CREATE - 16)) | (1 << (ZmeiLangParser.KW_QUERY - 16)) | (1 << (ZmeiLangParser.KW_AUTH - 16)) | (1 << (ZmeiLangParser.KW_COUNT - 16)) | (1 << (ZmeiLangParser.KW_I18N - 16)) | (1 << (ZmeiLangParser.KW_EXTRA - 16)) | (1 << (ZmeiLangParser.KW_TABS - 16)) | (1 << (ZmeiLangParser.KW_LIST - 16)) | (1 << (ZmeiLangParser.KW_READ_ONLY - 16)) | (1 << (ZmeiLangParser.KW_LIST_EDITABLE - 16)) | (1 << (ZmeiLangParser.KW_LIST_FILTER - 16)) | (1 << (ZmeiLangParser.KW_LIST_SEARCH - 16)) | (1 << (ZmeiLangParser.KW_FIELDS - 16)) | (1 << (ZmeiLangParser.KW_IMPORT - 16)) | (1 << (ZmeiLangParser.KW_AS - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FLOAT - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DECIMAL - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATETIME - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_IMAGE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_TEXT - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_INT - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_SLUG - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_BOOL - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 16)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 16)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 16)) | (1 << (ZmeiLangParser.ID - 16)))) != 0)):
                        break

                pass
            elif token in [ZmeiLangParser.STRING_DQ]:
                self.state = 630
                self.match(ZmeiLangParser.STRING_DQ)
                pass
            elif token in [ZmeiLangParser.STRING_SQ]:
                self.state = 631
                self.match(ZmeiLangParser.STRING_SQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_help_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION_MARK(self):
            return self.getToken(ZmeiLangParser.QUESTION_MARK, 0)

        def string_or_quoted(self):
            return self.getTypedRuleContext(ZmeiLangParser.String_or_quotedContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_help_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_help_text" ):
                listener.enterCol_field_help_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_help_text" ):
                listener.exitCol_field_help_text(self)




    def col_field_help_text(self):

        localctx = ZmeiLangParser.Col_field_help_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_col_field_help_text)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(ZmeiLangParser.QUESTION_MARK)
            self.state = 635
            self.string_or_quoted()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_vrebose_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(ZmeiLangParser.SLASH, 0)

        def string_or_quoted(self):
            return self.getTypedRuleContext(ZmeiLangParser.String_or_quotedContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_vrebose_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_vrebose_name" ):
                listener.enterCol_field_vrebose_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_vrebose_name" ):
                listener.exitCol_field_vrebose_name(self)




    def col_field_vrebose_name(self):

        localctx = ZmeiLangParser.Col_field_vrebose_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_col_field_vrebose_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(ZmeiLangParser.SLASH)
            self.state = 638
            self.string_or_quoted()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_name" ):
                listener.enterCol_field_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_name" ):
                listener.exitCol_field_name(self)




    def col_field_name(self):

        localctx = ZmeiLangParser.Col_field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_col_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def DOLLAR(self):
            return self.getToken(ZmeiLangParser.DOLLAR, 0)

        def AMP(self):
            return self.getToken(ZmeiLangParser.AMP, 0)

        def EXCLAM(self):
            return self.getToken(ZmeiLangParser.EXCLAM, 0)

        def STAR(self):
            return self.getToken(ZmeiLangParser.STAR, 0)

        def APPROX(self):
            return self.getToken(ZmeiLangParser.APPROX, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_modifier" ):
                listener.enterCol_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_modifier" ):
                listener.exitCol_modifier(self)




    def col_modifier(self):

        localctx = ZmeiLangParser.Col_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_col_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (ZmeiLangParser.EQUALS - 93)) | (1 << (ZmeiLangParser.DOLLAR - 93)) | (1 << (ZmeiLangParser.AMP - 93)) | (1 << (ZmeiLangParser.EXCLAM - 93)) | (1 << (ZmeiLangParser.STAR - 93)) | (1 << (ZmeiLangParser.APPROX - 93)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_longtext(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_longtextContext,0)


        def field_html_media(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_html_mediaContext,0)


        def field_html(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_htmlContext,0)


        def field_float(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_floatContext,0)


        def field_decimal(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_decimalContext,0)


        def field_date(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_dateContext,0)


        def field_datetime(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_datetimeContext,0)


        def field_create_time(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_create_timeContext,0)


        def field_update_time(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_update_timeContext,0)


        def field_text(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_textContext,0)


        def field_int(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_intContext,0)


        def field_slug(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_slugContext,0)


        def field_bool(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_boolContext,0)


        def field_relation(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_relationContext,0)


        def field_image(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_imageContext,0)


        def field_file(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_fileContext,0)


        def field_filer_file(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_filer_fileContext,0)


        def field_filer_folder(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_filer_folderContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_def" ):
                listener.enterCol_field_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_def" ):
                listener.exitCol_field_def(self)




    def col_field_def(self):

        localctx = ZmeiLangParser.Col_field_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_col_field_def)
        try:
            self.state = 662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self.field_longtext()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self.field_html_media()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_HTML]:
                self.enterOuterAlt(localctx, 3)
                self.state = 646
                self.field_html()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_FLOAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 647
                self.field_float()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_DECIMAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 648
                self.field_decimal()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_DATE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 649
                self.field_date()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_DATETIME]:
                self.enterOuterAlt(localctx, 7)
                self.state = 650
                self.field_datetime()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME]:
                self.enterOuterAlt(localctx, 8)
                self.state = 651
                self.field_create_time()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME]:
                self.enterOuterAlt(localctx, 9)
                self.state = 652
                self.field_update_time()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_TEXT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 653
                self.field_text()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_INT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 654
                self.field_int()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_SLUG]:
                self.enterOuterAlt(localctx, 12)
                self.state = 655
                self.field_slug()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_BOOL]:
                self.enterOuterAlt(localctx, 13)
                self.state = 656
                self.field_bool()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY]:
                self.enterOuterAlt(localctx, 14)
                self.state = 657
                self.field_relation()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER]:
                self.enterOuterAlt(localctx, 15)
                self.state = 658
                self.field_image()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_FILE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 659
                self.field_file()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 660
                self.field_filer_file()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER]:
                self.enterOuterAlt(localctx, 18)
                self.state = 661
                self.field_filer_folder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_longtextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_LONGTEXT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_longtext

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_longtext" ):
                listener.enterField_longtext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_longtext" ):
                listener.exitField_longtext(self)




    def field_longtext(self):

        localctx = ZmeiLangParser.Field_longtextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_field_longtext)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_htmlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_HTML(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_HTML, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_html

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_html" ):
                listener.enterField_html(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_html" ):
                listener.exitField_html(self)




    def field_html(self):

        localctx = ZmeiLangParser.Field_htmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_field_html)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(ZmeiLangParser.COL_FIELD_TYPE_HTML)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_html_mediaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_HTML_MEDIA(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_html_media

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_html_media" ):
                listener.enterField_html_media(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_html_media" ):
                listener.exitField_html_media(self)




    def field_html_media(self):

        localctx = ZmeiLangParser.Field_html_mediaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_field_html_media)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.match(ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_floatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_FLOAT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FLOAT, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_float

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_float" ):
                listener.enterField_float(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_float" ):
                listener.exitField_float(self)




    def field_float(self):

        localctx = ZmeiLangParser.Field_floatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_field_float)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(ZmeiLangParser.COL_FIELD_TYPE_FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_decimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_DECIMAL(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_decimal" ):
                listener.enterField_decimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_decimal" ):
                listener.exitField_decimal(self)




    def field_decimal(self):

        localctx = ZmeiLangParser.Field_decimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_field_decimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(ZmeiLangParser.COL_FIELD_TYPE_DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_dateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_DATE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DATE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_date

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_date" ):
                listener.enterField_date(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_date" ):
                listener.exitField_date(self)




    def field_date(self):

        localctx = ZmeiLangParser.Field_dateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_field_date)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(ZmeiLangParser.COL_FIELD_TYPE_DATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_datetimeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_DATETIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DATETIME, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_datetime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_datetime" ):
                listener.enterField_datetime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_datetime" ):
                listener.exitField_datetime(self)




    def field_datetime(self):

        localctx = ZmeiLangParser.Field_datetimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_field_datetime)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(ZmeiLangParser.COL_FIELD_TYPE_DATETIME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_create_timeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_CREATE_TIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_create_time

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_create_time" ):
                listener.enterField_create_time(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_create_time" ):
                listener.exitField_create_time(self)




    def field_create_time(self):

        localctx = ZmeiLangParser.Field_create_timeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_field_create_time)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_update_timeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_UPDATE_TIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_update_time

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_update_time" ):
                listener.enterField_update_time(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_update_time" ):
                listener.exitField_update_time(self)




    def field_update_time(self):

        localctx = ZmeiLangParser.Field_update_timeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_field_update_time)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_FILE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_file" ):
                listener.enterField_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_file" ):
                listener.exitField_file(self)




    def field_file(self):

        localctx = ZmeiLangParser.Field_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_field_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(ZmeiLangParser.COL_FIELD_TYPE_FILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_filer_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_FILER_FILE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_filer_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_filer_file" ):
                listener.enterField_filer_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_filer_file" ):
                listener.exitField_filer_file(self)




    def field_filer_file(self):

        localctx = ZmeiLangParser.Field_filer_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_field_filer_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_filer_folderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_FILER_FOLDER(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_filer_folder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_filer_folder" ):
                listener.enterField_filer_folder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_filer_folder" ):
                listener.exitField_filer_folder(self)




    def field_filer_folder(self):

        localctx = ZmeiLangParser.Field_filer_folderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_field_filer_folder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_TEXT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_TEXT, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_text_size(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_text_sizeContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def COMA(self):
            return self.getToken(ZmeiLangParser.COMA, 0)

        def field_text_choices(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_text_choicesContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text" ):
                listener.enterField_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text" ):
                listener.exitField_text(self)




    def field_text(self):

        localctx = ZmeiLangParser.Field_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_field_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(ZmeiLangParser.COL_FIELD_TYPE_TEXT)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 689
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 690
                self.field_text_size()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ZmeiLangParser.COMA:
                    self.state = 691
                    self.match(ZmeiLangParser.COMA)
                    self.state = 692
                    self.field_text_choices()


                self.state = 695
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_text_sizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self):
            return self.getToken(ZmeiLangParser.DIGIT, 0)

        def QUESTION_MARK(self):
            return self.getToken(ZmeiLangParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text_size" ):
                listener.enterField_text_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text_size" ):
                listener.exitField_text_size(self)




    def field_text_size(self):

        localctx = ZmeiLangParser.Field_text_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_field_text_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.DIGIT or _la==ZmeiLangParser.QUESTION_MARK):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_text_choicesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_CHOICES(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_CHOICES, 0)

        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def field_text_choice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_text_choiceContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_text_choiceContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text_choices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text_choices" ):
                listener.enterField_text_choices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text_choices" ):
                listener.exitField_text_choices(self)




    def field_text_choices(self):

        localctx = ZmeiLangParser.Field_text_choicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_field_text_choices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(ZmeiLangParser.COL_FIELD_CHOICES)
            self.state = 702
            self.match(ZmeiLangParser.EQUALS)
            self.state = 703
            self.field_text_choice()
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 704
                self.match(ZmeiLangParser.COMA)
                self.state = 705
                self.field_text_choice()
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_text_choiceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_text_choice_val(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_text_choice_valContext,0)


        def field_text_choice_key(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_text_choice_keyContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text_choice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text_choice" ):
                listener.enterField_text_choice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text_choice" ):
                listener.exitField_text_choice(self)




    def field_text_choice(self):

        localctx = ZmeiLangParser.Field_text_choiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_field_text_choice)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 711
                self.field_text_choice_key()


            self.state = 714
            self.field_text_choice_val()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_text_choice_valContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text_choice_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text_choice_val" ):
                listener.enterField_text_choice_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text_choice_val" ):
                listener.exitField_text_choice_val(self)




    def field_text_choice_val(self):

        localctx = ZmeiLangParser.Field_text_choice_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_field_text_choice_val)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 716
                self.id_or_kw()
                pass
            elif token in [ZmeiLangParser.STRING_DQ]:
                self.state = 717
                self.match(ZmeiLangParser.STRING_DQ)
                pass
            elif token in [ZmeiLangParser.STRING_SQ]:
                self.state = 718
                self.match(ZmeiLangParser.STRING_SQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_text_choice_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text_choice_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text_choice_key" ):
                listener.enterField_text_choice_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text_choice_key" ):
                listener.exitField_text_choice_key(self)




    def field_text_choice_key(self):

        localctx = ZmeiLangParser.Field_text_choice_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_field_text_choice_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.id_or_kw()
            self.state = 722
            self.match(ZmeiLangParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_intContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_INT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_INT, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_int_choices(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_int_choicesContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_int" ):
                listener.enterField_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_int" ):
                listener.exitField_int(self)




    def field_int(self):

        localctx = ZmeiLangParser.Field_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_field_int)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(ZmeiLangParser.COL_FIELD_TYPE_INT)
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 725
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 726
                self.field_int_choices()
                self.state = 727
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_int_choicesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_CHOICES(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_CHOICES, 0)

        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def field_int_choice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_int_choiceContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_int_choiceContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_int_choices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_int_choices" ):
                listener.enterField_int_choices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_int_choices" ):
                listener.exitField_int_choices(self)




    def field_int_choices(self):

        localctx = ZmeiLangParser.Field_int_choicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_field_int_choices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(ZmeiLangParser.COL_FIELD_CHOICES)
            self.state = 732
            self.match(ZmeiLangParser.EQUALS)
            self.state = 733
            self.field_int_choice()
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 734
                self.match(ZmeiLangParser.COMA)
                self.state = 735
                self.field_int_choice()
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_int_choiceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_int_choice_val(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_int_choice_valContext,0)


        def field_int_choice_key(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_int_choice_keyContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_int_choice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_int_choice" ):
                listener.enterField_int_choice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_int_choice" ):
                listener.exitField_int_choice(self)




    def field_int_choice(self):

        localctx = ZmeiLangParser.Field_int_choiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_field_int_choice)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.DIGIT:
                self.state = 741
                self.field_int_choice_key()


            self.state = 744
            self.field_int_choice_val()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_int_choice_valContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_int_choice_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_int_choice_val" ):
                listener.enterField_int_choice_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_int_choice_val" ):
                listener.exitField_int_choice_val(self)




    def field_int_choice_val(self):

        localctx = ZmeiLangParser.Field_int_choice_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_field_int_choice_val)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 746
                self.id_or_kw()
                pass
            elif token in [ZmeiLangParser.STRING_DQ]:
                self.state = 747
                self.match(ZmeiLangParser.STRING_DQ)
                pass
            elif token in [ZmeiLangParser.STRING_SQ]:
                self.state = 748
                self.match(ZmeiLangParser.STRING_SQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_int_choice_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self):
            return self.getToken(ZmeiLangParser.DIGIT, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_int_choice_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_int_choice_key" ):
                listener.enterField_int_choice_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_int_choice_key" ):
                listener.exitField_int_choice_key(self)




    def field_int_choice_key(self):

        localctx = ZmeiLangParser.Field_int_choice_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_field_int_choice_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(ZmeiLangParser.DIGIT)
            self.state = 752
            self.match(ZmeiLangParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_slugContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_SLUG(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_SLUG, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_slug_ref_field(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_slug_ref_fieldContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_slug

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_slug" ):
                listener.enterField_slug(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_slug" ):
                listener.exitField_slug(self)




    def field_slug(self):

        localctx = ZmeiLangParser.Field_slugContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_field_slug)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(ZmeiLangParser.COL_FIELD_TYPE_SLUG)
            self.state = 755
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 756
            self.field_slug_ref_field()
            self.state = 757
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_slug_ref_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_slug_ref_field_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_slug_ref_field_idContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_slug_ref_field_idContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_slug_ref_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_slug_ref_field" ):
                listener.enterField_slug_ref_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_slug_ref_field" ):
                listener.exitField_slug_ref_field(self)




    def field_slug_ref_field(self):

        localctx = ZmeiLangParser.Field_slug_ref_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_field_slug_ref_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.field_slug_ref_field_id()
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 760
                self.match(ZmeiLangParser.COMA)
                self.state = 761
                self.field_slug_ref_field_id()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_slug_ref_field_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_slug_ref_field_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_slug_ref_field_id" ):
                listener.enterField_slug_ref_field_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_slug_ref_field_id" ):
                listener.exitField_slug_ref_field_id(self)




    def field_slug_ref_field_id(self):

        localctx = ZmeiLangParser.Field_slug_ref_field_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_field_slug_ref_field_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_boolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_BOOL(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_BOOL, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_bool_default(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_bool_defaultContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_bool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_bool" ):
                listener.enterField_bool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_bool" ):
                listener.exitField_bool(self)




    def field_bool(self):

        localctx = ZmeiLangParser.Field_boolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_field_bool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(ZmeiLangParser.COL_FIELD_TYPE_BOOL)
            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 770
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 771
                self.field_bool_default()
                self.state = 772
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_bool_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(ZmeiLangParser.BOOL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_bool_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_bool_default" ):
                listener.enterField_bool_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_bool_default" ):
                listener.exitField_bool_default(self)




    def field_bool_default(self):

        localctx = ZmeiLangParser.Field_bool_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_field_bool_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(ZmeiLangParser.BOOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_imageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filer_image_type(self):
            return self.getTypedRuleContext(ZmeiLangParser.Filer_image_typeContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_image_sizes(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_image_sizesContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image" ):
                listener.enterField_image(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image" ):
                listener.exitField_image(self)




    def field_image(self):

        localctx = ZmeiLangParser.Field_imageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_field_image)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.filer_image_type()
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 779
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 780
                self.field_image_sizes()
                self.state = 781
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filer_image_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_IMAGE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_IMAGE, 0)

        def COL_FIELD_TYPE_FILER_IMAGE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, 0)

        def COL_FIELD_TYPE_FILER_IMAGE_FOLDER(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_filer_image_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiler_image_type" ):
                listener.enterFiler_image_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiler_image_type" ):
                listener.exitFiler_image_type(self)




    def filer_image_type(self):

        localctx = ZmeiLangParser.Filer_image_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_filer_image_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ZmeiLangParser.COL_FIELD_TYPE_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_sizesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_image_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_image_sizeContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_image_sizeContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_sizes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_sizes" ):
                listener.enterField_image_sizes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_sizes" ):
                listener.exitField_image_sizes(self)




    def field_image_sizes(self):

        localctx = ZmeiLangParser.Field_image_sizesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_field_image_sizes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.field_image_size()
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 788
                self.match(ZmeiLangParser.COMA)
                self.state = 789
                self.field_image_size()
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_sizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_image_size_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_image_size_nameContext,0)


        def field_image_size_dimensions(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_image_size_dimensionsContext,0)


        def field_image_filters(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_image_filtersContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_size" ):
                listener.enterField_image_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_size" ):
                listener.exitField_image_size(self)




    def field_image_size(self):

        localctx = ZmeiLangParser.Field_image_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_field_image_size)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.field_image_size_name()
            self.state = 796
            self.field_image_size_dimensions()
            self.state = 797
            self.field_image_filters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_size_dimensionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE2D(self):
            return self.getToken(ZmeiLangParser.SIZE2D, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_size_dimensions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_size_dimensions" ):
                listener.enterField_image_size_dimensions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_size_dimensions" ):
                listener.exitField_image_size_dimensions(self)




    def field_image_size_dimensions(self):

        localctx = ZmeiLangParser.Field_image_size_dimensionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_field_image_size_dimensions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(ZmeiLangParser.SIZE2D)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_size_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_size_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_size_name" ):
                listener.enterField_image_size_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_size_name" ):
                listener.exitField_image_size_name(self)




    def field_image_size_name(self):

        localctx = ZmeiLangParser.Field_image_size_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_field_image_size_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.id_or_kw()
            self.state = 802
            self.match(ZmeiLangParser.EQUALS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_filtersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_image_filter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_image_filterContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_image_filterContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_filters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_filters" ):
                listener.enterField_image_filters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_filters" ):
                listener.exitField_image_filters(self)




    def field_image_filters(self):

        localctx = ZmeiLangParser.Field_image_filtersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_field_image_filters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.FILTER:
                self.state = 804
                self.field_image_filter()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_filterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(ZmeiLangParser.FILTER, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_filter" ):
                listener.enterField_image_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_filter" ):
                listener.exitField_image_filter(self)




    def field_image_filter(self):

        localctx = ZmeiLangParser.Field_image_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_field_image_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(ZmeiLangParser.FILTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_relationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_relation_type(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_relation_typeContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def field_relation_target_ref(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_relation_target_refContext,0)


        def field_relation_target_class(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_relation_target_classContext,0)


        def field_relation_related_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_relation_related_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_relation" ):
                listener.enterField_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_relation" ):
                listener.exitField_relation(self)




    def field_relation(self):

        localctx = ZmeiLangParser.Field_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_field_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.field_relation_type()
            self.state = 813
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.REF_SIGN]:
                self.state = 814
                self.field_relation_target_ref()
                pass
            elif token in [ZmeiLangParser.CLASSNAME]:
                self.state = 815
                self.field_relation_target_class()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.RELATED:
                self.state = 818
                self.field_relation_related_name()


            self.state = 821
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_relation_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_ONE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_ONE, 0)

        def COL_FIELD_TYPE_ONE2ONE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, 0)

        def COL_FIELD_TYPE_MANY(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_MANY, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_relation_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_relation_type" ):
                listener.enterField_relation_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_relation_type" ):
                listener.exitField_relation_type(self)




    def field_relation_type(self):

        localctx = ZmeiLangParser.Field_relation_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_field_relation_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ZmeiLangParser.COL_FIELD_TYPE_ONE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_MANY))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_relation_target_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF_SIGN(self):
            return self.getToken(ZmeiLangParser.REF_SIGN, 0)

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_relation_target_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_relation_target_ref" ):
                listener.enterField_relation_target_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_relation_target_ref" ):
                listener.exitField_relation_target_ref(self)




    def field_relation_target_ref(self):

        localctx = ZmeiLangParser.Field_relation_target_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_field_relation_target_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(ZmeiLangParser.REF_SIGN)
            self.state = 826
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_relation_target_classContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASSNAME(self):
            return self.getToken(ZmeiLangParser.CLASSNAME, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_relation_target_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_relation_target_class" ):
                listener.enterField_relation_target_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_relation_target_class" ):
                listener.exitField_relation_target_class(self)




    def field_relation_target_class(self):

        localctx = ZmeiLangParser.Field_relation_target_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_field_relation_target_class)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(ZmeiLangParser.CLASSNAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_relation_related_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELATED(self):
            return self.getToken(ZmeiLangParser.RELATED, 0)

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_relation_related_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_relation_related_name" ):
                listener.enterField_relation_related_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_relation_related_name" ):
                listener.exitField_relation_related_name(self)




    def field_relation_related_name(self):

        localctx = ZmeiLangParser.Field_relation_related_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_field_relation_related_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(ZmeiLangParser.RELATED)
            self.state = 831
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_admin(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_adminContext,0)


        def an_mixin(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_mixinContext,0)


        def an_m2m_changed(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_m2m_changedContext,0)


        def an_post_delete(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_post_deleteContext,0)


        def an_pre_delete(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_pre_deleteContext,0)


        def an_post_save(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_post_saveContext,0)


        def an_pre_save(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_pre_saveContext,0)


        def an_clean(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_cleanContext,0)


        def an_api(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_apiContext,0)


        def an_rest(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_restContext,0)


        def an_order(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_orderContext,0)


        def an_sortable(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_sortableContext,0)


        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_model_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_annotation" ):
                listener.enterModel_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_annotation" ):
                listener.exitModel_annotation(self)




    def model_annotation(self):

        localctx = ZmeiLangParser.Model_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_model_annotation)
        try:
            self.state = 846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.AN_ADMIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.an_admin()
                pass
            elif token in [ZmeiLangParser.AN_MIXIN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.an_mixin()
                pass
            elif token in [ZmeiLangParser.AN_M2M_CHANGED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.an_m2m_changed()
                pass
            elif token in [ZmeiLangParser.AN_POST_DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 836
                self.an_post_delete()
                pass
            elif token in [ZmeiLangParser.AN_PRE_DELETE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 837
                self.an_pre_delete()
                pass
            elif token in [ZmeiLangParser.AN_POST_SAVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 838
                self.an_post_save()
                pass
            elif token in [ZmeiLangParser.AN_PRE_SAVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 839
                self.an_pre_save()
                pass
            elif token in [ZmeiLangParser.AN_CLEAN]:
                self.enterOuterAlt(localctx, 8)
                self.state = 840
                self.an_clean()
                pass
            elif token in [ZmeiLangParser.AN_API]:
                self.enterOuterAlt(localctx, 9)
                self.state = 841
                self.an_api()
                pass
            elif token in [ZmeiLangParser.AN_REST]:
                self.enterOuterAlt(localctx, 10)
                self.state = 842
                self.an_rest()
                pass
            elif token in [ZmeiLangParser.AN_ORDER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 843
                self.an_order()
                pass
            elif token in [ZmeiLangParser.AN_SORTABLE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 844
                self.an_sortable()
                pass
            elif token in [ZmeiLangParser.NL]:
                self.enterOuterAlt(localctx, 13)
                self.state = 845
                self.match(ZmeiLangParser.NL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_sortableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_SORTABLE(self):
            return self.getToken(ZmeiLangParser.AN_SORTABLE, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_sortable_field_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_sortable_field_nameContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_sortable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_sortable" ):
                listener.enterAn_sortable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_sortable" ):
                listener.exitAn_sortable(self)




    def an_sortable(self):

        localctx = ZmeiLangParser.An_sortableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_an_sortable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(ZmeiLangParser.AN_SORTABLE)
            self.state = 849
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 850
            self.an_sortable_field_name()
            self.state = 851
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_sortable_field_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_sortable_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_sortable_field_name" ):
                listener.enterAn_sortable_field_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_sortable_field_name" ):
                listener.exitAn_sortable_field_name(self)




    def an_sortable_field_name(self):

        localctx = ZmeiLangParser.An_sortable_field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_an_sortable_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_orderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_ORDER(self):
            return self.getToken(ZmeiLangParser.AN_ORDER, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_order_fields(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_order_fieldsContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_order" ):
                listener.enterAn_order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_order" ):
                listener.exitAn_order(self)




    def an_order(self):

        localctx = ZmeiLangParser.An_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_an_order)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(ZmeiLangParser.AN_ORDER)
            self.state = 856
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 857
            self.an_order_fields()
            self.state = 858
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_order_fieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Id_or_kwContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_order_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_order_fields" ):
                listener.enterAn_order_fields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_order_fields" ):
                listener.exitAn_order_fields(self)




    def an_order_fields(self):

        localctx = ZmeiLangParser.An_order_fieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_an_order_fields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.id_or_kw()
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 861
                self.match(ZmeiLangParser.COMA)
                self.state = 862
                self.id_or_kw()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_restContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_REST(self):
            return self.getToken(ZmeiLangParser.AN_REST, 0)

        def DOT(self):
            return self.getToken(ZmeiLangParser.DOT, 0)

        def an_rest_discriminator(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_discriminatorContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_rest_config(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_configContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest" ):
                listener.enterAn_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest" ):
                listener.exitAn_rest(self)




    def an_rest(self):

        localctx = ZmeiLangParser.An_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_an_rest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(ZmeiLangParser.AN_REST)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.DOT:
                self.state = 869
                self.match(ZmeiLangParser.DOT)
                self.state = 870
                self.an_rest_discriminator()


            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 873
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 874
                self.an_rest_config()
                self.state = 875
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_configContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_rest_main_part(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_main_partContext,0)


        def an_rest_inline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_inlineContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_inlineContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_config

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_config" ):
                listener.enterAn_rest_config(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_config" ):
                listener.exitAn_rest_config(self)




    def an_rest_config(self):

        localctx = ZmeiLangParser.An_rest_configContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_an_rest_config)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.an_rest_main_part()
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & ((1 << (ZmeiLangParser.KW_INLINE - 23)) | (1 << (ZmeiLangParser.NL - 23)) | (1 << (ZmeiLangParser.COMA - 23)))) != 0):
                self.state = 883
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ZmeiLangParser.KW_INLINE]:
                    self.state = 880
                    self.an_rest_inline()
                    pass
                elif token in [ZmeiLangParser.NL]:
                    self.state = 881
                    self.match(ZmeiLangParser.NL)
                    pass
                elif token in [ZmeiLangParser.COMA]:
                    self.state = 882
                    self.match(ZmeiLangParser.COMA)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_main_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_rest_fields(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_fieldsContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_fieldsContext,i)


        def an_rest_i18n(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_i18nContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_i18nContext,i)


        def an_rest_auth(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_authContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_authContext,i)


        def an_rest_query(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_queryContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_queryContext,i)


        def an_rest_on_create(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_on_createContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_on_createContext,i)


        def an_rest_read_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_read_onlyContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_read_onlyContext,i)


        def an_rest_user_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_user_fieldContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_user_fieldContext,i)


        def an_rest_annotate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_annotateContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_annotateContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_main_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_main_part" ):
                listener.enterAn_rest_main_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_main_part" ):
                listener.exitAn_rest_main_part(self)




    def an_rest_main_part(self):

        localctx = ZmeiLangParser.An_rest_main_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_an_rest_main_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 898
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ZmeiLangParser.KW_FIELDS]:
                        self.state = 888
                        self.an_rest_fields()
                        pass
                    elif token in [ZmeiLangParser.KW_I18N]:
                        self.state = 889
                        self.an_rest_i18n()
                        pass
                    elif token in [ZmeiLangParser.KW_AUTH]:
                        self.state = 890
                        self.an_rest_auth()
                        pass
                    elif token in [ZmeiLangParser.KW_QUERY]:
                        self.state = 891
                        self.an_rest_query()
                        pass
                    elif token in [ZmeiLangParser.KW_ON_CREATE]:
                        self.state = 892
                        self.an_rest_on_create()
                        pass
                    elif token in [ZmeiLangParser.KW_READ_ONLY]:
                        self.state = 893
                        self.an_rest_read_only()
                        pass
                    elif token in [ZmeiLangParser.KW_USER_FIELD]:
                        self.state = 894
                        self.an_rest_user_field()
                        pass
                    elif token in [ZmeiLangParser.KW_ANNOTATE]:
                        self.state = 895
                        self.an_rest_annotate()
                        pass
                    elif token in [ZmeiLangParser.NL]:
                        self.state = 896
                        self.match(ZmeiLangParser.NL)
                        pass
                    elif token in [ZmeiLangParser.COMA]:
                        self.state = 897
                        self.match(ZmeiLangParser.COMA)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 902
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_discriminatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_discriminator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_discriminator" ):
                listener.enterAn_rest_discriminator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_discriminator" ):
                listener.exitAn_rest_discriminator(self)




    def an_rest_discriminator(self):

        localctx = ZmeiLangParser.An_rest_discriminatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_an_rest_discriminator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_i18nContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_I18N(self):
            return self.getToken(ZmeiLangParser.KW_I18N, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def BOOL(self):
            return self.getToken(ZmeiLangParser.BOOL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_i18n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_i18n" ):
                listener.enterAn_rest_i18n(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_i18n" ):
                listener.exitAn_rest_i18n(self)




    def an_rest_i18n(self):

        localctx = ZmeiLangParser.An_rest_i18nContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_an_rest_i18n)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(ZmeiLangParser.KW_I18N)
            self.state = 906
            self.match(ZmeiLangParser.COLON)
            self.state = 907
            self.match(ZmeiLangParser.BOOL)
            self.state = 911
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 908
                    self.match(ZmeiLangParser.NL) 
                self.state = 913
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_queryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_QUERY(self):
            return self.getToken(ZmeiLangParser.KW_QUERY, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_query" ):
                listener.enterAn_rest_query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_query" ):
                listener.exitAn_rest_query(self)




    def an_rest_query(self):

        localctx = ZmeiLangParser.An_rest_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_an_rest_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(ZmeiLangParser.KW_QUERY)
            self.state = 915
            self.python_code()
            self.state = 919
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 916
                    self.match(ZmeiLangParser.NL) 
                self.state = 921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_on_createContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ON_CREATE(self):
            return self.getToken(ZmeiLangParser.KW_ON_CREATE, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_on_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_on_create" ):
                listener.enterAn_rest_on_create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_on_create" ):
                listener.exitAn_rest_on_create(self)




    def an_rest_on_create(self):

        localctx = ZmeiLangParser.An_rest_on_createContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_an_rest_on_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.match(ZmeiLangParser.KW_ON_CREATE)
            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.COLON:
                self.state = 923
                self.match(ZmeiLangParser.COLON)


            self.state = 926
            self.python_code()
            self.state = 930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 927
                    self.match(ZmeiLangParser.NL) 
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_read_onlyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_READ_ONLY(self):
            return self.getToken(ZmeiLangParser.KW_READ_ONLY, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_read_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_read_only" ):
                listener.enterAn_rest_read_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_read_only" ):
                listener.exitAn_rest_read_only(self)




    def an_rest_read_only(self):

        localctx = ZmeiLangParser.An_rest_read_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_an_rest_read_only)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(ZmeiLangParser.KW_READ_ONLY)
            self.state = 934
            self.match(ZmeiLangParser.COLON)
            self.state = 935
            self.field_list_expr()
            self.state = 939
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 936
                    self.match(ZmeiLangParser.NL) 
                self.state = 941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_user_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USER_FIELD(self):
            return self.getToken(ZmeiLangParser.KW_USER_FIELD, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_user_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_user_field" ):
                listener.enterAn_rest_user_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_user_field" ):
                listener.exitAn_rest_user_field(self)




    def an_rest_user_field(self):

        localctx = ZmeiLangParser.An_rest_user_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_an_rest_user_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(ZmeiLangParser.KW_USER_FIELD)
            self.state = 943
            self.match(ZmeiLangParser.COLON)
            self.state = 944
            self.id_or_kw()
            self.state = 948
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 945
                    self.match(ZmeiLangParser.NL) 
                self.state = 950
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_fieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIELDS(self):
            return self.getToken(ZmeiLangParser.KW_FIELDS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def an_rest_fields_write_mode(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_fields_write_modeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_fields" ):
                listener.enterAn_rest_fields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_fields" ):
                listener.exitAn_rest_fields(self)




    def an_rest_fields(self):

        localctx = ZmeiLangParser.An_rest_fieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_an_rest_fields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(ZmeiLangParser.KW_FIELDS)
            self.state = 952
            self.match(ZmeiLangParser.COLON)
            self.state = 953
            self.field_list_expr()
            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.SQ_BRACE_OPEN:
                self.state = 954
                self.an_rest_fields_write_mode()


            self.state = 960
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 957
                    self.match(ZmeiLangParser.NL) 
                self.state = 962
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_fields_write_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def write_mode_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Write_mode_exprContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_fields_write_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_fields_write_mode" ):
                listener.enterAn_rest_fields_write_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_fields_write_mode" ):
                listener.exitAn_rest_fields_write_mode(self)




    def an_rest_fields_write_mode(self):

        localctx = ZmeiLangParser.An_rest_fields_write_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_an_rest_fields_write_mode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.write_mode_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_authContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AUTH(self):
            return self.getToken(ZmeiLangParser.KW_AUTH, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_rest_auth_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_auth_typeContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_auth_typeContext,i)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_auth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_auth" ):
                listener.enterAn_rest_auth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_auth" ):
                listener.exitAn_rest_auth(self)




    def an_rest_auth(self):

        localctx = ZmeiLangParser.An_rest_authContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_an_rest_auth)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(ZmeiLangParser.KW_AUTH)
            self.state = 966
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 967
            self.an_rest_auth_type()
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 968
                self.match(ZmeiLangParser.COMA)
                self.state = 969
                self.an_rest_auth_type()
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 975
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_auth_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AUTH_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_AUTH_TYPE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_rest_auth_token_model(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_auth_token_modelContext,0)


        def an_rest_auth_token_class(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_auth_token_classContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_auth_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_auth_type" ):
                listener.enterAn_rest_auth_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_auth_type" ):
                listener.exitAn_rest_auth_type(self)




    def an_rest_auth_type(self):

        localctx = ZmeiLangParser.An_rest_auth_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_an_rest_auth_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(ZmeiLangParser.KW_AUTH_TYPE)
            self.state = 981
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.COLON]:
                self.state = 978
                self.match(ZmeiLangParser.COLON)
                self.state = 979
                self.an_rest_auth_token_model()
                pass
            elif token in [ZmeiLangParser.CLASSNAME]:
                self.state = 980
                self.an_rest_auth_token_class()
                pass
            elif token in [ZmeiLangParser.BRACE_CLOSE, ZmeiLangParser.COMA]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_auth_token_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REF_SIGN(self):
            return self.getToken(ZmeiLangParser.REF_SIGN, 0)

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_auth_token_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_auth_token_model" ):
                listener.enterAn_rest_auth_token_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_auth_token_model" ):
                listener.exitAn_rest_auth_token_model(self)




    def an_rest_auth_token_model(self):

        localctx = ZmeiLangParser.An_rest_auth_token_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_an_rest_auth_token_model)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(ZmeiLangParser.REF_SIGN)
            self.state = 984
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_auth_token_classContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASSNAME(self):
            return self.getToken(ZmeiLangParser.CLASSNAME, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_auth_token_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_auth_token_class" ):
                listener.enterAn_rest_auth_token_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_auth_token_class" ):
                listener.exitAn_rest_auth_token_class(self)




    def an_rest_auth_token_class(self):

        localctx = ZmeiLangParser.An_rest_auth_token_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_an_rest_auth_token_class)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(ZmeiLangParser.CLASSNAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_annotateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ANNOTATE(self):
            return self.getToken(ZmeiLangParser.KW_ANNOTATE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_rest_annotate_count(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_annotate_countContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_annotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_annotate" ):
                listener.enterAn_rest_annotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_annotate" ):
                listener.exitAn_rest_annotate(self)




    def an_rest_annotate(self):

        localctx = ZmeiLangParser.An_rest_annotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_an_rest_annotate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(ZmeiLangParser.KW_ANNOTATE)
            self.state = 989
            self.match(ZmeiLangParser.COLON)
            self.state = 990
            self.an_rest_annotate_count()
            self.state = 994
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 991
                    self.match(ZmeiLangParser.NL) 
                self.state = 996
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_annotate_countContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COUNT(self):
            return self.getToken(ZmeiLangParser.KW_COUNT, 0)

        def an_rest_annotate_count_field(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_annotate_count_fieldContext,0)


        def KW_AS(self):
            return self.getToken(ZmeiLangParser.KW_AS, 0)

        def an_rest_annotate_count_alias(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_annotate_count_aliasContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_annotate_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_annotate_count" ):
                listener.enterAn_rest_annotate_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_annotate_count" ):
                listener.exitAn_rest_annotate_count(self)




    def an_rest_annotate_count(self):

        localctx = ZmeiLangParser.An_rest_annotate_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_an_rest_annotate_count)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(ZmeiLangParser.KW_COUNT)
            self.state = 998
            self.an_rest_annotate_count_field()
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.KW_AS:
                self.state = 999
                self.match(ZmeiLangParser.KW_AS)
                self.state = 1000
                self.an_rest_annotate_count_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_annotate_count_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_annotate_count_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_annotate_count_field" ):
                listener.enterAn_rest_annotate_count_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_annotate_count_field" ):
                listener.exitAn_rest_annotate_count_field(self)




    def an_rest_annotate_count_field(self):

        localctx = ZmeiLangParser.An_rest_annotate_count_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_an_rest_annotate_count_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_annotate_count_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_annotate_count_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_annotate_count_alias" ):
                listener.enterAn_rest_annotate_count_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_annotate_count_alias" ):
                listener.exitAn_rest_annotate_count_alias(self)




    def an_rest_annotate_count_alias(self):

        localctx = ZmeiLangParser.An_rest_annotate_count_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_an_rest_annotate_count_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_inlineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INLINE(self):
            return self.getToken(ZmeiLangParser.KW_INLINE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_rest_inline_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_inline_declContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_inline_declContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_inline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_inline" ):
                listener.enterAn_rest_inline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_inline" ):
                listener.exitAn_rest_inline(self)




    def an_rest_inline(self):

        localctx = ZmeiLangParser.An_rest_inlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_an_rest_inline)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(ZmeiLangParser.KW_INLINE)
            self.state = 1008
            self.match(ZmeiLangParser.COLON)
            self.state = 1012 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1012
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                        self.state = 1009
                        self.an_rest_inline_decl()
                        pass
                    elif token in [ZmeiLangParser.COMA]:
                        self.state = 1010
                        self.match(ZmeiLangParser.COMA)
                        pass
                    elif token in [ZmeiLangParser.NL]:
                        self.state = 1011
                        self.match(ZmeiLangParser.NL)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1014 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_inline_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_rest_inline_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_inline_nameContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_rest_config(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_configContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_inline_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_inline_decl" ):
                listener.enterAn_rest_inline_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_inline_decl" ):
                listener.exitAn_rest_inline_decl(self)




    def an_rest_inline_decl(self):

        localctx = ZmeiLangParser.An_rest_inline_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_an_rest_inline_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.an_rest_inline_name()
            self.state = 1017
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 1018
            self.an_rest_config()
            self.state = 1019
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_inline_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_inline_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_inline_name" ):
                listener.enterAn_rest_inline_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_inline_name" ):
                listener.exitAn_rest_inline_name(self)




    def an_rest_inline_name(self):

        localctx = ZmeiLangParser.An_rest_inline_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_an_rest_inline_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_apiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_API(self):
            return self.getToken(ZmeiLangParser.AN_API, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def an_api_all(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_api_allContext,0)


        def an_api_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_api_nameContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_api_nameContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_api

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_api" ):
                listener.enterAn_api(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_api" ):
                listener.exitAn_api(self)




    def an_api(self):

        localctx = ZmeiLangParser.An_apiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_an_api)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(ZmeiLangParser.AN_API)
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 1024
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 1034
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ZmeiLangParser.STAR]:
                    self.state = 1025
                    self.an_api_all()
                    pass
                elif token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                    self.state = 1026
                    self.an_api_name()
                    self.state = 1031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ZmeiLangParser.COMA:
                        self.state = 1027
                        self.match(ZmeiLangParser.COMA)
                        self.state = 1028
                        self.an_api_name()
                        self.state = 1033
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1036
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_api_allContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(ZmeiLangParser.STAR, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_api_all

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_api_all" ):
                listener.enterAn_api_all(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_api_all" ):
                listener.exitAn_api_all(self)




    def an_api_all(self):

        localctx = ZmeiLangParser.An_api_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_an_api_all)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(ZmeiLangParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_api_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_api_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_api_name" ):
                listener.enterAn_api_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_api_name" ):
                listener.exitAn_api_name(self)




    def an_api_name(self):

        localctx = ZmeiLangParser.An_api_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_an_api_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_cleanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_CLEAN(self):
            return self.getToken(ZmeiLangParser.AN_CLEAN, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_clean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_clean" ):
                listener.enterAn_clean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_clean" ):
                listener.exitAn_clean(self)




    def an_clean(self):

        localctx = ZmeiLangParser.An_cleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_an_clean)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(ZmeiLangParser.AN_CLEAN)
            self.state = 1045
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_pre_saveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_PRE_SAVE(self):
            return self.getToken(ZmeiLangParser.AN_PRE_SAVE, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_pre_save

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_pre_save" ):
                listener.enterAn_pre_save(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_pre_save" ):
                listener.exitAn_pre_save(self)




    def an_pre_save(self):

        localctx = ZmeiLangParser.An_pre_saveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_an_pre_save)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(ZmeiLangParser.AN_PRE_SAVE)
            self.state = 1048
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_post_saveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_POST_SAVE(self):
            return self.getToken(ZmeiLangParser.AN_POST_SAVE, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_post_save

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_post_save" ):
                listener.enterAn_post_save(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_post_save" ):
                listener.exitAn_post_save(self)




    def an_post_save(self):

        localctx = ZmeiLangParser.An_post_saveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_an_post_save)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(ZmeiLangParser.AN_POST_SAVE)
            self.state = 1051
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_pre_deleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_PRE_DELETE(self):
            return self.getToken(ZmeiLangParser.AN_PRE_DELETE, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_pre_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_pre_delete" ):
                listener.enterAn_pre_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_pre_delete" ):
                listener.exitAn_pre_delete(self)




    def an_pre_delete(self):

        localctx = ZmeiLangParser.An_pre_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_an_pre_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(ZmeiLangParser.AN_PRE_DELETE)
            self.state = 1054
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_post_deleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_POST_DELETE(self):
            return self.getToken(ZmeiLangParser.AN_POST_DELETE, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_post_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_post_delete" ):
                listener.enterAn_post_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_post_delete" ):
                listener.exitAn_post_delete(self)




    def an_post_delete(self):

        localctx = ZmeiLangParser.An_post_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_an_post_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(ZmeiLangParser.AN_POST_DELETE)
            self.state = 1057
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_m2m_changedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_M2M_CHANGED(self):
            return self.getToken(ZmeiLangParser.AN_M2M_CHANGED, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_m2m_changed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_m2m_changed" ):
                listener.enterAn_m2m_changed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_m2m_changed" ):
                listener.exitAn_m2m_changed(self)




    def an_m2m_changed(self):

        localctx = ZmeiLangParser.An_m2m_changedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_an_m2m_changed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(ZmeiLangParser.AN_M2M_CHANGED)
            self.state = 1060
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_mixinContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_MIXIN(self):
            return self.getToken(ZmeiLangParser.AN_MIXIN, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def CLASSNAME(self):
            return self.getToken(ZmeiLangParser.CLASSNAME, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_mixin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_mixin" ):
                listener.enterAn_mixin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_mixin" ):
                listener.exitAn_mixin(self)




    def an_mixin(self):

        localctx = ZmeiLangParser.An_mixinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_an_mixin)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(ZmeiLangParser.AN_MIXIN)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 1063
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 1064
                self.match(ZmeiLangParser.CLASSNAME)
                self.state = 1065
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_adminContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_ADMIN(self):
            return self.getToken(ZmeiLangParser.AN_ADMIN, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def an_admin_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_listContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_listContext,i)


        def an_admin_read_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_read_onlyContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_read_onlyContext,i)


        def an_admin_list_editable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_list_editableContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_list_editableContext,i)


        def an_admin_list_filter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_list_filterContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_list_filterContext,i)


        def an_admin_list_search(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_list_searchContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_list_searchContext,i)


        def an_admin_fields(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_fieldsContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_fieldsContext,i)


        def an_admin_tabs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_tabsContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_tabsContext,i)


        def an_admin_inlines(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_inlinesContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_inlinesContext,i)


        def an_admin_css(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_cssContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_cssContext,i)


        def an_admin_js(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_jsContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_jsContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin" ):
                listener.enterAn_admin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin" ):
                listener.exitAn_admin(self)




    def an_admin(self):

        localctx = ZmeiLangParser.An_adminContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_an_admin)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(ZmeiLangParser.AN_ADMIN)
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 1069
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 1084
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1082
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [ZmeiLangParser.KW_LIST]:
                            self.state = 1070
                            self.an_admin_list()
                            pass
                        elif token in [ZmeiLangParser.KW_READ_ONLY]:
                            self.state = 1071
                            self.an_admin_read_only()
                            pass
                        elif token in [ZmeiLangParser.KW_LIST_EDITABLE]:
                            self.state = 1072
                            self.an_admin_list_editable()
                            pass
                        elif token in [ZmeiLangParser.KW_LIST_FILTER]:
                            self.state = 1073
                            self.an_admin_list_filter()
                            pass
                        elif token in [ZmeiLangParser.KW_LIST_SEARCH]:
                            self.state = 1074
                            self.an_admin_list_search()
                            pass
                        elif token in [ZmeiLangParser.KW_FIELDS]:
                            self.state = 1075
                            self.an_admin_fields()
                            pass
                        elif token in [ZmeiLangParser.KW_TABS]:
                            self.state = 1076
                            self.an_admin_tabs()
                            pass
                        elif token in [ZmeiLangParser.KW_INLINE]:
                            self.state = 1077
                            self.an_admin_inlines()
                            pass
                        elif token in [ZmeiLangParser.KW_CSS]:
                            self.state = 1078
                            self.an_admin_css()
                            pass
                        elif token in [ZmeiLangParser.KW_JS]:
                            self.state = 1079
                            self.an_admin_js()
                            pass
                        elif token in [ZmeiLangParser.NL]:
                            self.state = 1080
                            self.match(ZmeiLangParser.NL)
                            pass
                        elif token in [ZmeiLangParser.COMA]:
                            self.state = 1081
                            self.match(ZmeiLangParser.COMA)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1086
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ZmeiLangParser.NL:
                    self.state = 1087
                    self.match(ZmeiLangParser.NL)
                    self.state = 1092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1093
                self.match(ZmeiLangParser.BRACE_CLOSE)


            self.state = 1099
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1096
                    self.match(ZmeiLangParser.NL) 
                self.state = 1101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_jsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_JS(self):
            return self.getToken(ZmeiLangParser.KW_JS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_admin_js_file_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_js_file_nameContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_js_file_nameContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_js

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_js" ):
                listener.enterAn_admin_js(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_js" ):
                listener.exitAn_admin_js(self)




    def an_admin_js(self):

        localctx = ZmeiLangParser.An_admin_jsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_an_admin_js)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(ZmeiLangParser.KW_JS)
            self.state = 1103
            self.match(ZmeiLangParser.COLON)
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.NL:
                self.state = 1104
                self.match(ZmeiLangParser.NL)
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1110
            self.an_admin_js_file_name()
            self.state = 1121
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1111
                    self.match(ZmeiLangParser.COMA)
                    self.state = 1115
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ZmeiLangParser.NL:
                        self.state = 1112
                        self.match(ZmeiLangParser.NL)
                        self.state = 1117
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1118
                    self.an_admin_js_file_name() 
                self.state = 1123
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_cssContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CSS(self):
            return self.getToken(ZmeiLangParser.KW_CSS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_admin_css_file_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_css_file_nameContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_css_file_nameContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_css

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_css" ):
                listener.enterAn_admin_css(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_css" ):
                listener.exitAn_admin_css(self)




    def an_admin_css(self):

        localctx = ZmeiLangParser.An_admin_cssContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_an_admin_css)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.match(ZmeiLangParser.KW_CSS)
            self.state = 1125
            self.match(ZmeiLangParser.COLON)
            self.state = 1126
            self.an_admin_css_file_name()
            self.state = 1131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1127
                    self.match(ZmeiLangParser.COMA)
                    self.state = 1128
                    self.an_admin_css_file_name() 
                self.state = 1133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_css_file_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_css_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_css_file_name" ):
                listener.enterAn_admin_css_file_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_css_file_name" ):
                listener.exitAn_admin_css_file_name(self)




    def an_admin_css_file_name(self):

        localctx = ZmeiLangParser.An_admin_css_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_an_admin_css_file_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_js_file_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_js_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_js_file_name" ):
                listener.enterAn_admin_js_file_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_js_file_name" ):
                listener.exitAn_admin_js_file_name(self)




    def an_admin_js_file_name(self):

        localctx = ZmeiLangParser.An_admin_js_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_an_admin_js_file_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_inlinesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INLINE(self):
            return self.getToken(ZmeiLangParser.KW_INLINE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_admin_inline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_inlineContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_inlineContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_inlines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_inlines" ):
                listener.enterAn_admin_inlines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_inlines" ):
                listener.exitAn_admin_inlines(self)




    def an_admin_inlines(self):

        localctx = ZmeiLangParser.An_admin_inlinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_an_admin_inlines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(ZmeiLangParser.KW_INLINE)
            self.state = 1139
            self.match(ZmeiLangParser.COLON)
            self.state = 1140
            self.an_admin_inline()
            self.state = 1145
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1141
                    self.match(ZmeiLangParser.COMA)
                    self.state = 1142
                    self.an_admin_inline() 
                self.state = 1147
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_inlineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inline_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Inline_nameContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def inline_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Inline_typeContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Inline_typeContext,i)


        def inline_extra(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Inline_extraContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Inline_extraContext,i)


        def inline_fields(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Inline_fieldsContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Inline_fieldsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_inline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_inline" ):
                listener.enterAn_admin_inline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_inline" ):
                listener.exitAn_admin_inline(self)




    def an_admin_inline(self):

        localctx = ZmeiLangParser.An_admin_inlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_an_admin_inline)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.inline_name()
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 1149
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & ((1 << (ZmeiLangParser.KW_TYPE - 24)) | (1 << (ZmeiLangParser.KW_EXTRA - 24)) | (1 << (ZmeiLangParser.KW_FIELDS - 24)) | (1 << (ZmeiLangParser.NL - 24)) | (1 << (ZmeiLangParser.COMA - 24)))) != 0):
                    self.state = 1155
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ZmeiLangParser.KW_TYPE]:
                        self.state = 1150
                        self.inline_type()
                        pass
                    elif token in [ZmeiLangParser.KW_EXTRA]:
                        self.state = 1151
                        self.inline_extra()
                        pass
                    elif token in [ZmeiLangParser.KW_FIELDS]:
                        self.state = 1152
                        self.inline_fields()
                        pass
                    elif token in [ZmeiLangParser.NL]:
                        self.state = 1153
                        self.match(ZmeiLangParser.NL)
                        pass
                    elif token in [ZmeiLangParser.COMA]:
                        self.state = 1154
                        self.match(ZmeiLangParser.COMA)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1160
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inline_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_inline_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_name" ):
                listener.enterInline_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_name" ):
                listener.exitInline_name(self)




    def inline_name(self):

        localctx = ZmeiLangParser.Inline_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_inline_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inline_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_TYPE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def KW_INLINE_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_INLINE_TYPE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_inline_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_type" ):
                listener.enterInline_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_type" ):
                listener.exitInline_type(self)




    def inline_type(self):

        localctx = ZmeiLangParser.Inline_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_inline_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.match(ZmeiLangParser.KW_TYPE)
            self.state = 1166
            self.match(ZmeiLangParser.COLON)
            self.state = 1167
            self.match(ZmeiLangParser.KW_INLINE_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inline_extraContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXTRA(self):
            return self.getToken(ZmeiLangParser.KW_EXTRA, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def DIGIT(self):
            return self.getToken(ZmeiLangParser.DIGIT, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_inline_extra

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_extra" ):
                listener.enterInline_extra(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_extra" ):
                listener.exitInline_extra(self)




    def inline_extra(self):

        localctx = ZmeiLangParser.Inline_extraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_inline_extra)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.match(ZmeiLangParser.KW_EXTRA)
            self.state = 1170
            self.match(ZmeiLangParser.COLON)
            self.state = 1171
            self.match(ZmeiLangParser.DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inline_fieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIELDS(self):
            return self.getToken(ZmeiLangParser.KW_FIELDS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_inline_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_fields" ):
                listener.enterInline_fields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_fields" ):
                listener.exitInline_fields(self)




    def inline_fields(self):

        localctx = ZmeiLangParser.Inline_fieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_inline_fields)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self.match(ZmeiLangParser.KW_FIELDS)
            self.state = 1174
            self.match(ZmeiLangParser.COLON)
            self.state = 1175
            self.field_list_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_tabsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TABS(self):
            return self.getToken(ZmeiLangParser.KW_TABS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_admin_tab(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_tabContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_tabContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_tabs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_tabs" ):
                listener.enterAn_admin_tabs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_tabs" ):
                listener.exitAn_admin_tabs(self)




    def an_admin_tabs(self):

        localctx = ZmeiLangParser.An_admin_tabsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_an_admin_tabs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(ZmeiLangParser.KW_TABS)
            self.state = 1178
            self.match(ZmeiLangParser.COLON)
            self.state = 1179
            self.an_admin_tab()
            self.state = 1184
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1180
                    self.match(ZmeiLangParser.COMA)
                    self.state = 1181
                    self.an_admin_tab() 
                self.state = 1186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_tabContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tab_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Tab_nameContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def tab_verbose_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Tab_verbose_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_tab

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_tab" ):
                listener.enterAn_admin_tab(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_tab" ):
                listener.exitAn_admin_tab(self)




    def an_admin_tab(self):

        localctx = ZmeiLangParser.An_admin_tabContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_an_admin_tab)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.tab_name()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ:
                self.state = 1188
                self.tab_verbose_name()


            self.state = 1191
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 1192
            self.field_list_expr()
            self.state = 1193
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tab_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_tab_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTab_name" ):
                listener.enterTab_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTab_name" ):
                listener.exitTab_name(self)




    def tab_name(self):

        localctx = ZmeiLangParser.Tab_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_tab_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tab_verbose_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_tab_verbose_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTab_verbose_name" ):
                listener.enterTab_verbose_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTab_verbose_name" ):
                listener.exitTab_verbose_name(self)




    def tab_verbose_name(self):

        localctx = ZmeiLangParser.Tab_verbose_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_tab_verbose_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIST(self):
            return self.getToken(ZmeiLangParser.KW_LIST, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_list" ):
                listener.enterAn_admin_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_list" ):
                listener.exitAn_admin_list(self)




    def an_admin_list(self):

        localctx = ZmeiLangParser.An_admin_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_an_admin_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(ZmeiLangParser.KW_LIST)
            self.state = 1200
            self.match(ZmeiLangParser.COLON)
            self.state = 1201
            self.field_list_expr()
            self.state = 1205
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1202
                    self.match(ZmeiLangParser.NL) 
                self.state = 1207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_read_onlyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_READ_ONLY(self):
            return self.getToken(ZmeiLangParser.KW_READ_ONLY, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_read_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_read_only" ):
                listener.enterAn_admin_read_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_read_only" ):
                listener.exitAn_admin_read_only(self)




    def an_admin_read_only(self):

        localctx = ZmeiLangParser.An_admin_read_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_an_admin_read_only)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1208
            self.match(ZmeiLangParser.KW_READ_ONLY)
            self.state = 1209
            self.match(ZmeiLangParser.COLON)
            self.state = 1210
            self.field_list_expr()
            self.state = 1214
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1211
                    self.match(ZmeiLangParser.NL) 
                self.state = 1216
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_list_editableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIST_EDITABLE(self):
            return self.getToken(ZmeiLangParser.KW_LIST_EDITABLE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_list_editable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_list_editable" ):
                listener.enterAn_admin_list_editable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_list_editable" ):
                listener.exitAn_admin_list_editable(self)




    def an_admin_list_editable(self):

        localctx = ZmeiLangParser.An_admin_list_editableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_an_admin_list_editable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(ZmeiLangParser.KW_LIST_EDITABLE)
            self.state = 1218
            self.match(ZmeiLangParser.COLON)
            self.state = 1219
            self.field_list_expr()
            self.state = 1223
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1220
                    self.match(ZmeiLangParser.NL) 
                self.state = 1225
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_list_filterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIST_FILTER(self):
            return self.getToken(ZmeiLangParser.KW_LIST_FILTER, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_list_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_list_filter" ):
                listener.enterAn_admin_list_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_list_filter" ):
                listener.exitAn_admin_list_filter(self)




    def an_admin_list_filter(self):

        localctx = ZmeiLangParser.An_admin_list_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_an_admin_list_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            self.match(ZmeiLangParser.KW_LIST_FILTER)
            self.state = 1227
            self.match(ZmeiLangParser.COLON)
            self.state = 1228
            self.field_list_expr()
            self.state = 1232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1229
                    self.match(ZmeiLangParser.NL) 
                self.state = 1234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_list_searchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIST_SEARCH(self):
            return self.getToken(ZmeiLangParser.KW_LIST_SEARCH, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_list_search

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_list_search" ):
                listener.enterAn_admin_list_search(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_list_search" ):
                listener.exitAn_admin_list_search(self)




    def an_admin_list_search(self):

        localctx = ZmeiLangParser.An_admin_list_searchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_an_admin_list_search)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(ZmeiLangParser.KW_LIST_SEARCH)
            self.state = 1236
            self.match(ZmeiLangParser.COLON)
            self.state = 1237
            self.field_list_expr()
            self.state = 1241
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1238
                    self.match(ZmeiLangParser.NL) 
                self.state = 1243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_fieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIELDS(self):
            return self.getToken(ZmeiLangParser.KW_FIELDS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_fields" ):
                listener.enterAn_admin_fields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_fields" ):
                listener.exitAn_admin_fields(self)




    def an_admin_fields(self):

        localctx = ZmeiLangParser.An_admin_fieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_an_admin_fields)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(ZmeiLangParser.KW_FIELDS)
            self.state = 1245
            self.match(ZmeiLangParser.COLON)
            self.state = 1246
            self.field_list_expr()
            self.state = 1250
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1247
                    self.match(ZmeiLangParser.NL) 
                self.state = 1252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def page_header(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_headerContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def page_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Page_fieldContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Page_fieldContext,i)


        def page_element(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_elementContext,0)


        def page_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage" ):
                listener.enterPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage" ):
                listener.exitPage(self)




    def page(self):

        localctx = ZmeiLangParser.PageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_page)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.page_header()
            self.state = 1257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1254
                    self.match(ZmeiLangParser.NL) 
                self.state = 1259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

            self.state = 1263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1260
                    self.page_field() 
                self.state = 1265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.XML_OPEN:
                self.state = 1266
                self.page_element()


            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.ASSIGN or _la==ZmeiLangParser.CODE_BLOCK_START:
                self.state = 1269
                self.page_code()


            self.state = 1275
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1272
                    self.match(ZmeiLangParser.NL) 
                self.state = 1277
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_codeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_code" ):
                listener.enterPage_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_code" ):
                listener.exitPage_code(self)




    def page_code(self):

        localctx = ZmeiLangParser.Page_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_page_code)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_headerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQ_BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.SQ_BRACE_OPEN, 0)

        def page_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_nameContext,0)


        def SQ_BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.SQ_BRACE_CLOSE, 0)

        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def page_base(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_baseContext,0)


        def page_alias(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_aliasContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COLON)
            else:
                return self.getToken(ZmeiLangParser.COLON, i)

        def page_url(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_urlContext,0)


        def page_template(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_templateContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_header" ):
                listener.enterPage_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_header" ):
                listener.exitPage_header(self)




    def page_header(self):

        localctx = ZmeiLangParser.Page_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_page_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(ZmeiLangParser.SQ_BRACE_OPEN)
            self.state = 1282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1281
                self.page_base()


            self.state = 1284
            self.page_name()
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.KW_AS:
                self.state = 1285
                self.page_alias()


            self.state = 1296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.COLON:
                self.state = 1288
                self.match(ZmeiLangParser.COLON)
                self.state = 1290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ZmeiLangParser.WRITE_MODE) | (1 << ZmeiLangParser.BOOL) | (1 << ZmeiLangParser.KW_CSS) | (1 << ZmeiLangParser.KW_JS) | (1 << ZmeiLangParser.KW_INLINE_TYPE) | (1 << ZmeiLangParser.KW_AUTH_TYPE) | (1 << ZmeiLangParser.KW_INLINE) | (1 << ZmeiLangParser.KW_TYPE) | (1 << ZmeiLangParser.KW_USER_FIELD) | (1 << ZmeiLangParser.KW_ANNOTATE) | (1 << ZmeiLangParser.KW_ON_CREATE) | (1 << ZmeiLangParser.KW_QUERY) | (1 << ZmeiLangParser.KW_AUTH) | (1 << ZmeiLangParser.KW_COUNT) | (1 << ZmeiLangParser.KW_I18N) | (1 << ZmeiLangParser.KW_EXTRA) | (1 << ZmeiLangParser.KW_TABS) | (1 << ZmeiLangParser.KW_LIST) | (1 << ZmeiLangParser.KW_READ_ONLY) | (1 << ZmeiLangParser.KW_LIST_EDITABLE) | (1 << ZmeiLangParser.KW_LIST_FILTER) | (1 << ZmeiLangParser.KW_LIST_SEARCH) | (1 << ZmeiLangParser.KW_FIELDS) | (1 << ZmeiLangParser.KW_IMPORT) | (1 << ZmeiLangParser.KW_AS) | (1 << ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_HTML) | (1 << ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FLOAT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DECIMAL) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DATE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DATETIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER) | (1 << ZmeiLangParser.COL_FIELD_TYPE_TEXT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_INT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_SLUG) | (1 << ZmeiLangParser.COL_FIELD_TYPE_BOOL) | (1 << ZmeiLangParser.COL_FIELD_TYPE_ONE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_MANY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ZmeiLangParser.COL_FIELD_CHOICES - 64)) | (1 << (ZmeiLangParser.ID - 64)) | (1 << (ZmeiLangParser.URL_SEGMENTS - 64)) | (1 << (ZmeiLangParser.SLASH - 64)))) != 0):
                    self.state = 1289
                    self.page_url()


                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ZmeiLangParser.COLON:
                    self.state = 1292
                    self.match(ZmeiLangParser.COLON)
                    self.state = 1293
                    self.page_template()




            self.state = 1298
            self.match(ZmeiLangParser.SQ_BRACE_CLOSE)
            self.state = 1299
            self.match(ZmeiLangParser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_baseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def RELATED(self):
            return self.getToken(ZmeiLangParser.RELATED, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_base" ):
                listener.enterPage_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_base" ):
                listener.exitPage_base(self)




    def page_base(self):

        localctx = ZmeiLangParser.Page_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_page_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.id_or_kw()
            self.state = 1302
            self.match(ZmeiLangParser.RELATED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AS(self):
            return self.getToken(ZmeiLangParser.KW_AS, 0)

        def page_alias_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_alias_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_alias" ):
                listener.enterPage_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_alias" ):
                listener.exitPage_alias(self)




    def page_alias(self):

        localctx = ZmeiLangParser.Page_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_page_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.match(ZmeiLangParser.KW_AS)
            self.state = 1305
            self.page_alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_alias_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_alias_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_alias_name" ):
                listener.enterPage_alias_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_alias_name" ):
                listener.exitPage_alias_name(self)




    def page_alias_name(self):

        localctx = ZmeiLangParser.Page_alias_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_page_alias_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_element(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_elementContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_element" ):
                listener.enterPage_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_element" ):
                listener.exitPage_element(self)




    def page_element(self):

        localctx = ZmeiLangParser.Page_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_page_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.xml_element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_templateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASSNAME(self):
            return self.getToken(ZmeiLangParser.CLASSNAME, 0)

        def TEMPLATE_NAME(self):
            return self.getToken(ZmeiLangParser.TEMPLATE_NAME, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_template

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_template" ):
                listener.enterPage_template(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_template" ):
                listener.exitPage_template(self)




    def page_template(self):

        localctx = ZmeiLangParser.Page_templateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_page_template)
        try:
            self.state = 1314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.CLASSNAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1311
                self.match(ZmeiLangParser.CLASSNAME)
                pass
            elif token in [ZmeiLangParser.TEMPLATE_NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1312
                self.match(ZmeiLangParser.TEMPLATE_NAME)
                pass
            elif token in [ZmeiLangParser.ASSIGN, ZmeiLangParser.CODE_BLOCK_START]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1313
                self.python_code()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_urlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def URL_SEGMENTS(self):
            return self.getToken(ZmeiLangParser.URL_SEGMENTS, 0)

        def SLASH(self):
            return self.getToken(ZmeiLangParser.SLASH, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_url" ):
                listener.enterPage_url(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_url" ):
                listener.exitPage_url(self)




    def page_url(self):

        localctx = ZmeiLangParser.Page_urlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_page_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 1316
                self.id_or_kw()
                pass
            elif token in [ZmeiLangParser.URL_SEGMENTS]:
                self.state = 1317
                self.match(ZmeiLangParser.URL_SEGMENTS)
                pass
            elif token in [ZmeiLangParser.SLASH]:
                self.state = 1318
                self.match(ZmeiLangParser.SLASH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_name" ):
                listener.enterPage_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_name" ):
                listener.exitPage_name(self)




    def page_name(self):

        localctx = ZmeiLangParser.Page_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_page_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def page_field_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_field_nameContext,0)


        def ASSIGN(self):
            return self.getToken(ZmeiLangParser.ASSIGN, 0)

        def page_field_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_field_codeContext,0)


        def EOF(self):
            return self.getToken(ZmeiLangParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_field" ):
                listener.enterPage_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_field" ):
                listener.exitPage_field(self)




    def page_field(self):

        localctx = ZmeiLangParser.Page_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_page_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.page_field_name()
            self.state = 1324
            self.match(ZmeiLangParser.ASSIGN)
            self.state = 1325
            self.page_field_code()
            self.state = 1332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.NL]:
                self.state = 1327 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1326
                        self.match(ZmeiLangParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1329 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                pass
            elif token in [ZmeiLangParser.EOF]:
                self.state = 1331
                self.match(ZmeiLangParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_field_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_field_name" ):
                listener.enterPage_field_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_field_name" ):
                listener.exitPage_field_name(self)




    def page_field_name(self):

        localctx = ZmeiLangParser.Page_field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_page_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_field_codeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTHON_CODE(self):
            return self.getToken(ZmeiLangParser.PYTHON_CODE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_field_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_field_code" ):
                listener.enterPage_field_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_field_code" ):
                listener.exitPage_field_code(self)




    def page_field_code(self):

        localctx = ZmeiLangParser.Page_field_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_page_field_code)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.match(ZmeiLangParser.PYTHON_CODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





