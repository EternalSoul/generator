# Generated from /Users/aleksandrrudakov/dev/generator/grammar/ZmeiLangParser.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3o")
        buf.write("\u05ac\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\3\2\7\2\u0156\n\2\f\2\16\2\u0159\13\2\3\2\7\2\u015c\n")
        buf.write("\2\f\2\16\2\u015f\13\2\3\2\5\2\u0162\n\2\3\2\7\2\u0165")
        buf.write("\n\2\f\2\16\2\u0168\13\2\3\2\7\2\u016b\n\2\f\2\16\2\u016e")
        buf.write("\13\2\3\2\5\2\u0171\n\2\3\2\7\2\u0174\n\2\f\2\16\2\u0177")
        buf.write("\13\2\3\2\7\2\u017a\n\2\f\2\16\2\u017d\13\2\3\2\3\2\3")
        buf.write("\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\7\7")
        buf.write("\u018e\n\7\f\7\16\7\u0191\13\7\3\b\5\b\u0194\n\b\3\b\3")
        buf.write("\b\3\b\3\b\7\b\u019a\n\b\f\b\16\b\u019d\13\b\3\b\3\b\3")
        buf.write("\b\5\b\u01a2\n\b\3\b\7\b\u01a5\n\b\f\b\16\b\u01a8\13\b")
        buf.write("\5\b\u01aa\n\b\3\t\5\t\u01ad\n\t\3\t\3\t\5\t\u01b1\n\t")
        buf.write("\3\n\3\n\3\n\3\n\3\13\3\13\5\13\u01b9\n\13\3\f\3\f\3\f")
        buf.write("\3\f\3\r\3\r\3\r\3\r\3\16\5\16\u01c4\n\16\3\16\3\16\5")
        buf.write("\16\u01c8\n\16\7\16\u01ca\n\16\f\16\16\16\u01cd\13\16")
        buf.write("\3\17\3\17\3\17\7\17\u01d2\n\17\f\17\16\17\u01d5\13\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17")
        buf.write("\u01e1\n\17\f\17\16\17\u01e4\13\17\3\17\3\17\3\17\5\17")
        buf.write("\u01e9\n\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\5\23\u01f7\n\23\3\24\3\24\5\24\u01fb")
        buf.write("\n\24\3\25\3\25\3\25\5\25\u0200\n\25\3\26\3\26\3\26\5")
        buf.write("\26\u0205\n\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30")
        buf.write("\7\30\u020f\n\30\f\30\16\30\u0212\13\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u0219\n\31\3\32\3\32\3\33\3\33\5\33\u021f")
        buf.write("\n\33\3\33\7\33\u0222\n\33\f\33\16\33\u0225\13\33\3\33")
        buf.write("\7\33\u0228\n\33\f\33\16\33\u022b\13\33\3\33\7\33\u022e")
        buf.write("\n\33\f\33\16\33\u0231\13\33\3\33\7\33\u0234\n\33\f\33")
        buf.write("\16\33\u0237\13\33\3\33\7\33\u023a\n\33\f\33\16\33\u023d")
        buf.write("\13\33\3\34\3\34\3\34\6\34\u0242\n\34\r\34\16\34\u0243")
        buf.write("\3\34\5\34\u0247\n\34\3\35\3\35\5\35\u024b\n\35\3\35\3")
        buf.write("\35\5\35\u024f\n\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\6\36\u0258\n\36\r\36\16\36\u0259\3\37\3\37\3\37\3\37")
        buf.write("\5\37\u0260\n\37\3 \3 \3 \5 \u0265\n \3!\3!\3!\3!\3!\5")
        buf.write("!\u026c\n!\3\"\3\"\3#\7#\u0271\n#\f#\16#\u0274\13#\3#")
        buf.write("\3#\5#\u0278\n#\3#\5#\u027b\n#\3#\5#\u027e\n#\3#\6#\u0281")
        buf.write("\n#\r#\16#\u0282\3#\5#\u0286\n#\3$\3$\3$\5$\u028b\n$\3")
        buf.write("$\3$\3$\5$\u0290\n$\3%\5%\u0293\n%\3%\3%\3&\3&\3&\3\'")
        buf.write("\3\'\3(\3(\3(\3)\3)\3*\3*\3+\6+\u02a4\n+\r+\16+\u02a5")
        buf.write("\3+\3+\5+\u02aa\n+\3,\3,\3,\3-\3-\3-\3.\3.\3/\3/\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u02c8\n\60\3\61\3")
        buf.write("\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66")
        buf.write("\3\67\3\67\38\38\39\39\3:\3:\3;\3;\3<\3<\3=\3=\3=\3=\3")
        buf.write("=\5=\u02e7\n=\3=\3=\5=\u02eb\n=\3>\3>\3?\3?\3?\3?\3?\7")
        buf.write("?\u02f4\n?\f?\16?\u02f7\13?\3@\5@\u02fa\n@\3@\3@\3A\3")
        buf.write("A\3A\5A\u0301\nA\3B\3B\3B\3C\3C\3C\3C\3C\5C\u030b\nC\3")
        buf.write("D\3D\3D\3D\3D\7D\u0312\nD\fD\16D\u0315\13D\3E\5E\u0318")
        buf.write("\nE\3E\3E\3F\3F\3F\5F\u031f\nF\3G\3G\3G\3H\3H\3H\3H\3")
        buf.write("H\3I\3I\3I\7I\u032c\nI\fI\16I\u032f\13I\3J\3J\3K\3K\3")
        buf.write("K\3K\3K\5K\u0338\nK\3L\3L\3M\3M\3M\3M\3M\5M\u0341\nM\3")
        buf.write("N\3N\3O\3O\3O\7O\u0348\nO\fO\16O\u034b\13O\3P\3P\3P\3")
        buf.write("P\3Q\3Q\3R\3R\3R\3S\7S\u0357\nS\fS\16S\u035a\13S\3T\3")
        buf.write("T\3T\3U\3U\3U\3U\5U\u0363\nU\3U\5U\u0366\nU\3U\3U\3V\3")
        buf.write("V\3W\3W\3W\3X\3X\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3")
        buf.write("Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0384\nZ\3[\3[\3[\3[\3[\3\\\3\\")
        buf.write("\3]\3]\3]\3]\3]\3^\3^\3^\7^\u0395\n^\f^\16^\u0398\13^")
        buf.write("\3_\3_\3_\5_\u039d\n_\3_\3_\3_\3_\5_\u03a3\n_\3`\3`\3")
        buf.write("`\3`\7`\u03a9\n`\f`\16`\u03ac\13`\3a\3a\3a\3a\3a\3a\3")
        buf.write("a\3a\3a\3a\7a\u03b8\na\fa\16a\u03bb\13a\3b\3b\3c\3c\3")
        buf.write("c\3c\7c\u03c3\nc\fc\16c\u03c6\13c\3d\3d\3d\7d\u03cb\n")
        buf.write("d\fd\16d\u03ce\13d\3e\3e\5e\u03d2\ne\3e\3e\7e\u03d6\n")
        buf.write("e\fe\16e\u03d9\13e\3f\3f\3f\3f\7f\u03df\nf\ff\16f\u03e2")
        buf.write("\13f\3g\3g\3g\3g\7g\u03e8\ng\fg\16g\u03eb\13g\3h\3h\3")
        buf.write("h\3h\5h\u03f1\nh\3h\7h\u03f4\nh\fh\16h\u03f7\13h\3i\3")
        buf.write("i\3j\3j\3j\3j\3j\7j\u0400\nj\fj\16j\u0403\13j\3j\3j\3")
        buf.write("k\3k\3k\3k\5k\u040b\nk\3l\3l\3l\3m\3m\3n\3n\3n\3n\7n\u0416")
        buf.write("\nn\fn\16n\u0419\13n\3o\3o\3o\3o\5o\u041f\no\3p\3p\3q")
        buf.write("\3q\3r\3r\3r\3r\3r\6r\u042a\nr\rr\16r\u042b\3s\3s\3s\3")
        buf.write("s\3s\3t\3t\3u\3u\3u\3u\3u\3u\7u\u043b\nu\fu\16u\u043e")
        buf.write("\13u\5u\u0440\nu\3u\3u\5u\u0444\nu\3v\3v\3w\3w\3x\3x\3")
        buf.write("x\3y\3y\3y\3z\3z\3z\3{\3{\3{\3|\3|\3|\3}\3}\3}\3~\3~\3")
        buf.write("~\3~\3~\3\177\3\177\3\177\3\177\3\177\3\u0080\3\u0080")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u046d")
        buf.write("\n\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\7\u0083\u047f\n\u0083\f\u0083")
        buf.write("\16\u0083\u0482\13\u0083\3\u0083\7\u0083\u0485\n\u0083")
        buf.write("\f\u0083\16\u0083\u0488\13\u0083\3\u0083\5\u0083\u048b")
        buf.write("\n\u0083\3\u0083\7\u0083\u048e\n\u0083\f\u0083\16\u0083")
        buf.write("\u0491\13\u0083\3\u0084\3\u0084\3\u0084\7\u0084\u0496")
        buf.write("\n\u0084\f\u0084\16\u0084\u0499\13\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\7\u0084\u049e\n\u0084\f\u0084\16\u0084\u04a1")
        buf.write("\13\u0084\3\u0084\7\u0084\u04a4\n\u0084\f\u0084\16\u0084")
        buf.write("\u04a7\13\u0084\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\7\u0085\u04ae\n\u0085\f\u0085\16\u0085\u04b1\13\u0085")
        buf.write("\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\7\u0088\u04bc\n\u0088\f\u0088\16\u0088")
        buf.write("\u04bf\13\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\7\u0089\u04c8\n\u0089\f\u0089\16\u0089")
        buf.write("\u04cb\13\u0089\3\u0089\5\u0089\u04ce\n\u0089\3\u008a")
        buf.write("\3\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\7\u008e\u04e3\n\u008e")
        buf.write("\f\u008e\16\u008e\u04e6\13\u008e\3\u008f\3\u008f\5\u008f")
        buf.write("\u04ea\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u0090")
        buf.write("\3\u0090\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\7\u0092\u04f8\n\u0092\f\u0092\16\u0092\u04fb\13\u0092")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\7\u0093\u0501\n\u0093")
        buf.write("\f\u0093\16\u0093\u0504\13\u0093\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\7\u0094\u050a\n\u0094\f\u0094\16\u0094\u050d")
        buf.write("\13\u0094\3\u0095\3\u0095\3\u0095\3\u0095\7\u0095\u0513")
        buf.write("\n\u0095\f\u0095\16\u0095\u0516\13\u0095\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\7\u0096\u051c\n\u0096\f\u0096\16\u0096")
        buf.write("\u051f\13\u0096\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097")
        buf.write("\u0525\n\u0097\f\u0097\16\u0097\u0528\13\u0097\3\u0098")
        buf.write("\3\u0098\7\u0098\u052c\n\u0098\f\u0098\16\u0098\u052f")
        buf.write("\13\u0098\3\u0098\7\u0098\u0532\n\u0098\f\u0098\16\u0098")
        buf.write("\u0535\13\u0098\3\u0098\5\u0098\u0538\n\u0098\3\u0098")
        buf.write("\5\u0098\u053b\n\u0098\3\u0098\7\u0098\u053e\n\u0098\f")
        buf.write("\u0098\16\u0098\u0541\13\u0098\3\u0099\3\u0099\3\u009a")
        buf.write("\3\u009a\5\u009a\u0547\n\u009a\3\u009a\3\u009a\5\u009a")
        buf.write("\u054b\n\u009a\3\u009a\3\u009a\5\u009a\u054f\n\u009a\3")
        buf.write("\u009a\3\u009a\5\u009a\u0553\n\u009a\5\u009a\u0555\n\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009e\3\u009e")
        buf.write("\3\u009f\3\u009f\5\u009f\u0567\n\u009f\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\7\u00a0\u056c\n\u00a0\f\u00a0\16\u00a0\u056f")
        buf.write("\13\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\6\u00a1")
        buf.write("\u0576\n\u00a1\r\u00a1\16\u00a1\u0577\3\u00a2\3\u00a2")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\6\u00a3\u057f\n\u00a3\r\u00a3")
        buf.write("\16\u00a3\u0580\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a5")
        buf.write("\3\u00a5\5\u00a5\u0589\n\u00a5\3\u00a6\5\u00a6\u058c\n")
        buf.write("\u00a6\3\u00a6\5\u00a6\u058f\n\u00a6\3\u00a6\3\u00a6\7")
        buf.write("\u00a6\u0593\n\u00a6\f\u00a6\16\u00a6\u0596\13\u00a6\3")
        buf.write("\u00a6\5\u00a6\u0599\n\u00a6\3\u00a7\3\u00a7\3\u00a8\3")
        buf.write("\u00a8\3\u00a8\3\u00a8\6\u00a8\u05a1\n\u00a8\r\u00a8\16")
        buf.write("\u00a8\u05a2\3\u00a8\5\u00a8\u05a6\n\u00a8\3\u00a9\3\u00a9")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\2\2\u00ab\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be")
        buf.write("\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0")
        buf.write("\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2")
        buf.write("\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4")
        buf.write("\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106")
        buf.write("\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118")
        buf.write("\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a")
        buf.write("\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c")
        buf.write("\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e")
        buf.write("\u0150\u0152\2\t\4\2\24DFF\3\2_`\3\2fg\3\2X]\4\2GGQQ\5")
        buf.write("\2\67\6799<<\3\2AC\2\u05d0\2\u0157\3\2\2\2\4\u0180\3\2")
        buf.write("\2\2\6\u0183\3\2\2\2\b\u0186\3\2\2\2\n\u0188\3\2\2\2\f")
        buf.write("\u018a\3\2\2\2\16\u01a9\3\2\2\2\20\u01ac\3\2\2\2\22\u01b2")
        buf.write("\3\2\2\2\24\u01b8\3\2\2\2\26\u01ba\3\2\2\2\30\u01be\3")
        buf.write("\2\2\2\32\u01c3\3\2\2\2\34\u01e8\3\2\2\2\36\u01ea\3\2")
        buf.write("\2\2 \u01ec\3\2\2\2\"\u01ee\3\2\2\2$\u01f0\3\2\2\2&\u01fa")
        buf.write("\3\2\2\2(\u01ff\3\2\2\2*\u0201\3\2\2\2,\u0206\3\2\2\2")
        buf.write(".\u020b\3\2\2\2\60\u0213\3\2\2\2\62\u021a\3\2\2\2\64\u021c")
        buf.write("\3\2\2\2\66\u023e\3\2\2\28\u0248\3\2\2\2:\u0253\3\2\2")
        buf.write("\2<\u025b\3\2\2\2>\u0264\3\2\2\2@\u0266\3\2\2\2B\u026d")
        buf.write("\3\2\2\2D\u0272\3\2\2\2F\u028f\3\2\2\2H\u0292\3\2\2\2")
        buf.write("J\u0296\3\2\2\2L\u0299\3\2\2\2N\u029b\3\2\2\2P\u029e\3")
        buf.write("\2\2\2R\u02a0\3\2\2\2T\u02a9\3\2\2\2V\u02ab\3\2\2\2X\u02ae")
        buf.write("\3\2\2\2Z\u02b1\3\2\2\2\\\u02b3\3\2\2\2^\u02c7\3\2\2\2")
        buf.write("`\u02c9\3\2\2\2b\u02cb\3\2\2\2d\u02cd\3\2\2\2f\u02cf\3")
        buf.write("\2\2\2h\u02d1\3\2\2\2j\u02d3\3\2\2\2l\u02d5\3\2\2\2n\u02d7")
        buf.write("\3\2\2\2p\u02d9\3\2\2\2r\u02db\3\2\2\2t\u02dd\3\2\2\2")
        buf.write("v\u02df\3\2\2\2x\u02e1\3\2\2\2z\u02ec\3\2\2\2|\u02ee\3")
        buf.write("\2\2\2~\u02f9\3\2\2\2\u0080\u0300\3\2\2\2\u0082\u0302")
        buf.write("\3\2\2\2\u0084\u0305\3\2\2\2\u0086\u030c\3\2\2\2\u0088")
        buf.write("\u0317\3\2\2\2\u008a\u031e\3\2\2\2\u008c\u0320\3\2\2\2")
        buf.write("\u008e\u0323\3\2\2\2\u0090\u0328\3\2\2\2\u0092\u0330\3")
        buf.write("\2\2\2\u0094\u0332\3\2\2\2\u0096\u0339\3\2\2\2\u0098\u033b")
        buf.write("\3\2\2\2\u009a\u0342\3\2\2\2\u009c\u0344\3\2\2\2\u009e")
        buf.write("\u034c\3\2\2\2\u00a0\u0350\3\2\2\2\u00a2\u0352\3\2\2\2")
        buf.write("\u00a4\u0358\3\2\2\2\u00a6\u035b\3\2\2\2\u00a8\u035e\3")
        buf.write("\2\2\2\u00aa\u0369\3\2\2\2\u00ac\u036b\3\2\2\2\u00ae\u036e")
        buf.write("\3\2\2\2\u00b0\u0370\3\2\2\2\u00b2\u0383\3\2\2\2\u00b4")
        buf.write("\u0385\3\2\2\2\u00b6\u038a\3\2\2\2\u00b8\u038c\3\2\2\2")
        buf.write("\u00ba\u0391\3\2\2\2\u00bc\u0399\3\2\2\2\u00be\u03a4\3")
        buf.write("\2\2\2\u00c0\u03b9\3\2\2\2\u00c2\u03bc\3\2\2\2\u00c4\u03be")
        buf.write("\3\2\2\2\u00c6\u03c7\3\2\2\2\u00c8\u03cf\3\2\2\2\u00ca")
        buf.write("\u03da\3\2\2\2\u00cc\u03e3\3\2\2\2\u00ce\u03ec\3\2\2\2")
        buf.write("\u00d0\u03f8\3\2\2\2\u00d2\u03fa\3\2\2\2\u00d4\u0406\3")
        buf.write("\2\2\2\u00d6\u040c\3\2\2\2\u00d8\u040f\3\2\2\2\u00da\u0411")
        buf.write("\3\2\2\2\u00dc\u041a\3\2\2\2\u00de\u0420\3\2\2\2\u00e0")
        buf.write("\u0422\3\2\2\2\u00e2\u0424\3\2\2\2\u00e4\u042d\3\2\2\2")
        buf.write("\u00e6\u0432\3\2\2\2\u00e8\u0434\3\2\2\2\u00ea\u0445\3")
        buf.write("\2\2\2\u00ec\u0447\3\2\2\2\u00ee\u0449\3\2\2\2\u00f0\u044c")
        buf.write("\3\2\2\2\u00f2\u044f\3\2\2\2\u00f4\u0452\3\2\2\2\u00f6")
        buf.write("\u0455\3\2\2\2\u00f8\u0458\3\2\2\2\u00fa\u045b\3\2\2\2")
        buf.write("\u00fc\u0460\3\2\2\2\u00fe\u0465\3\2\2\2\u0100\u0467\3")
        buf.write("\2\2\2\u0102\u046e\3\2\2\2\u0104\u0470\3\2\2\2\u0106\u0492")
        buf.write("\3\2\2\2\u0108\u04a8\3\2\2\2\u010a\u04b2\3\2\2\2\u010c")
        buf.write("\u04b4\3\2\2\2\u010e\u04b6\3\2\2\2\u0110\u04c0\3\2\2\2")
        buf.write("\u0112\u04cf\3\2\2\2\u0114\u04d1\3\2\2\2\u0116\u04d5\3")
        buf.write("\2\2\2\u0118\u04d9\3\2\2\2\u011a\u04dd\3\2\2\2\u011c\u04e7")
        buf.write("\3\2\2\2\u011e\u04ef\3\2\2\2\u0120\u04f1\3\2\2\2\u0122")
        buf.write("\u04f3\3\2\2\2\u0124\u04fc\3\2\2\2\u0126\u0505\3\2\2\2")
        buf.write("\u0128\u050e\3\2\2\2\u012a\u0517\3\2\2\2\u012c\u0520\3")
        buf.write("\2\2\2\u012e\u0529\3\2\2\2\u0130\u0542\3\2\2\2\u0132\u0544")
        buf.write("\3\2\2\2\u0134\u0559\3\2\2\2\u0136\u055d\3\2\2\2\u0138")
        buf.write("\u0560\3\2\2\2\u013a\u0562\3\2\2\2\u013c\u0566\3\2\2\2")
        buf.write("\u013e\u0568\3\2\2\2\u0140\u0575\3\2\2\2\u0142\u0579\3")
        buf.write("\2\2\2\u0144\u057e\3\2\2\2\u0146\u0582\3\2\2\2\u0148\u0588")
        buf.write("\3\2\2\2\u014a\u058b\3\2\2\2\u014c\u059a\3\2\2\2\u014e")
        buf.write("\u059c\3\2\2\2\u0150\u05a7\3\2\2\2\u0152\u05a9\3\2\2\2")
        buf.write("\u0154\u0156\7E\2\2\u0155\u0154\3\2\2\2\u0156\u0159\3")
        buf.write("\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u015d")
        buf.write("\3\2\2\2\u0159\u0157\3\2\2\2\u015a\u015c\5(\25\2\u015b")
        buf.write("\u015a\3\2\2\2\u015c\u015f\3\2\2\2\u015d\u015b\3\2\2\2")
        buf.write("\u015d\u015e\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u015d\3")
        buf.write("\2\2\2\u0160\u0162\5\4\3\2\u0161\u0160\3\2\2\2\u0161\u0162")
        buf.write("\3\2\2\2\u0162\u0166\3\2\2\2\u0163\u0165\7E\2\2\u0164")
        buf.write("\u0163\3\2\2\2\u0165\u0168\3\2\2\2\u0166\u0164\3\2\2\2")
        buf.write("\u0166\u0167\3\2\2\2\u0167\u016c\3\2\2\2\u0168\u0166\3")
        buf.write("\2\2\2\u0169\u016b\5\u012e\u0098\2\u016a\u0169\3\2\2\2")
        buf.write("\u016b\u016e\3\2\2\2\u016c\u016a\3\2\2\2\u016c\u016d\3")
        buf.write("\2\2\2\u016d\u0170\3\2\2\2\u016e\u016c\3\2\2\2\u016f\u0171")
        buf.write("\5\6\4\2\u0170\u016f\3\2\2\2\u0170\u0171\3\2\2\2\u0171")
        buf.write("\u0175\3\2\2\2\u0172\u0174\5\64\33\2\u0173\u0172\3\2\2")
        buf.write("\2\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2\u0175\u0176")
        buf.write("\3\2\2\2\u0176\u017b\3\2\2\2\u0177\u0175\3\2\2\2\u0178")
        buf.write("\u017a\7E\2\2\u0179\u0178\3\2\2\2\u017a\u017d\3\2\2\2")
        buf.write("\u017b\u0179\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017e\3")
        buf.write("\2\2\2\u017d\u017b\3\2\2\2\u017e\u017f\7\2\2\3\u017f\3")
        buf.write("\3\2\2\2\u0180\u0181\7,\2\2\u0181\u0182\5\b\5\2\u0182")
        buf.write("\5\3\2\2\2\u0183\u0184\7,\2\2\u0184\u0185\5\b\5\2\u0185")
        buf.write("\7\3\2\2\2\u0186\u0187\5\30\r\2\u0187\t\3\2\2\2\u0188")
        buf.write("\u0189\t\2\2\2\u0189\13\3\2\2\2\u018a\u018f\5\n\6\2\u018b")
        buf.write("\u018c\7U\2\2\u018c\u018e\5\n\6\2\u018d\u018b\3\2\2\2")
        buf.write("\u018e\u0191\3\2\2\2\u018f\u018d\3\2\2\2\u018f\u0190\3")
        buf.write("\2\2\2\u0190\r\3\2\2\2\u0191\u018f\3\2\2\2\u0192\u0194")
        buf.write("\7U\2\2\u0193\u0192\3\2\2\2\u0193\u0194\3\2\2\2\u0194")
        buf.write("\u0195\3\2\2\2\u0195\u019b\7\\\2\2\u0196\u0197\7T\2\2")
        buf.write("\u0197\u0198\7L\2\2\u0198\u019a\5\20\t\2\u0199\u0196\3")
        buf.write("\2\2\2\u019a\u019d\3\2\2\2\u019b\u0199\3\2\2\2\u019b\u019c")
        buf.write("\3\2\2\2\u019c\u01aa\3\2\2\2\u019d\u019b\3\2\2\2\u019e")
        buf.write("\u01a6\5\n\6\2\u019f\u01a1\7T\2\2\u01a0\u01a2\7L\2\2\u01a1")
        buf.write("\u01a0\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a3\3\2\2\2")
        buf.write("\u01a3\u01a5\5\20\t\2\u01a4\u019f\3\2\2\2\u01a5\u01a8")
        buf.write("\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7")
        buf.write("\u01aa\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a9\u0193\3\2\2\2")
        buf.write("\u01a9\u019e\3\2\2\2\u01aa\17\3\2\2\2\u01ab\u01ad\7\\")
        buf.write("\2\2\u01ac\u01ab\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ae")
        buf.write("\3\2\2\2\u01ae\u01b0\5\n\6\2\u01af\u01b1\7\\\2\2\u01b0")
        buf.write("\u01af\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\21\3\2\2\2\u01b2")
        buf.write("\u01b3\7O\2\2\u01b3\u01b4\7\24\2\2\u01b4\u01b5\7P\2\2")
        buf.write("\u01b5\23\3\2\2\2\u01b6\u01b9\5\30\r\2\u01b7\u01b9\5\26")
        buf.write("\f\2\u01b8\u01b6\3\2\2\2\u01b8\u01b7\3\2\2\2\u01b9\25")
        buf.write("\3\2\2\2\u01ba\u01bb\7f\2\2\u01bb\u01bc\7i\2\2\u01bc\u01bd")
        buf.write("\7E\2\2\u01bd\27\3\2\2\2\u01be\u01bf\7h\2\2\u01bf\u01c0")
        buf.write("\7i\2\2\u01c0\u01c1\7j\2\2\u01c1\31\3\2\2\2\u01c2\u01c4")
        buf.write("\5&\24\2\u01c3\u01c2\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4")
        buf.write("\u01cb\3\2\2\2\u01c5\u01c7\5\34\17\2\u01c6\u01c8\5&\24")
        buf.write("\2\u01c7\u01c6\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01ca")
        buf.write("\3\2\2\2\u01c9\u01c5\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb")
        buf.write("\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\33\3\2\2\2\u01cd")
        buf.write("\u01cb\3\2\2\2\u01ce\u01cf\7I\2\2\u01cf\u01d3\5\36\20")
        buf.write("\2\u01d0\u01d2\5$\23\2\u01d1\u01d0\3\2\2\2\u01d2\u01d5")
        buf.write("\3\2\2\2\u01d3\u01d1\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4")
        buf.write("\u01d6\3\2\2\2\u01d5\u01d3\3\2\2\2\u01d6\u01d7\7J\2\2")
        buf.write("\u01d7\u01d8\5\32\16\2\u01d8\u01d9\7I\2\2\u01d9\u01da")
        buf.write("\7W\2\2\u01da\u01db\5 \21\2\u01db\u01dc\7J\2\2\u01dc\u01e9")
        buf.write("\3\2\2\2\u01dd\u01de\7I\2\2\u01de\u01e2\5\36\20\2\u01df")
        buf.write("\u01e1\5$\23\2\u01e0\u01df\3\2\2\2\u01e1\u01e4\3\2\2\2")
        buf.write("\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3\u01e5\3")
        buf.write("\2\2\2\u01e4\u01e2\3\2\2\2\u01e5\u01e6\7W\2\2\u01e6\u01e7")
        buf.write("\7J\2\2\u01e7\u01e9\3\2\2\2\u01e8\u01ce\3\2\2\2\u01e8")
        buf.write("\u01dd\3\2\2\2\u01e9\35\3\2\2\2\u01ea\u01eb\5\"\22\2\u01eb")
        buf.write("\37\3\2\2\2\u01ec\u01ed\5\"\22\2\u01ed!\3\2\2\2\u01ee")
        buf.write("\u01ef\5\n\6\2\u01ef#\3\2\2\2\u01f0\u01f1\5\n\6\2\u01f1")
        buf.write("\u01f6\7X\2\2\u01f2\u01f7\7_\2\2\u01f3\u01f7\7`\2\2\u01f4")
        buf.write("\u01f7\5\30\r\2\u01f5\u01f7\7c\2\2\u01f6\u01f2\3\2\2\2")
        buf.write("\u01f6\u01f3\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f6\u01f5\3")
        buf.write("\2\2\2\u01f7%\3\2\2\2\u01f8\u01fb\5\n\6\2\u01f9\u01fb")
        buf.write("\7E\2\2\u01fa\u01f8\3\2\2\2\u01fa\u01f9\3\2\2\2\u01fb")
        buf.write("\'\3\2\2\2\u01fc\u0200\5\60\31\2\u01fd\u0200\5,\27\2\u01fe")
        buf.write("\u0200\7E\2\2\u01ff\u01fc\3\2\2\2\u01ff\u01fd\3\2\2\2")
        buf.write("\u01ff\u01fe\3\2\2\2\u0200)\3\2\2\2\u0201\u0204\7\21\2")
        buf.write("\2\u0202\u0203\7M\2\2\u0203\u0205\7N\2\2\u0204\u0202\3")
        buf.write("\2\2\2\u0204\u0205\3\2\2\2\u0205+\3\2\2\2\u0206\u0207")
        buf.write("\7\20\2\2\u0207\u0208\7M\2\2\u0208\u0209\5.\30\2\u0209")
        buf.write("\u020a\7N\2\2\u020a-\3\2\2\2\u020b\u0210\7F\2\2\u020c")
        buf.write("\u020d\7T\2\2\u020d\u020f\7F\2\2\u020e\u020c\3\2\2\2\u020f")
        buf.write("\u0212\3\2\2\2\u0210\u020e\3\2\2\2\u0210\u0211\3\2\2\2")
        buf.write("\u0211/\3\2\2\2\u0212\u0210\3\2\2\2\u0213\u0218\7\23\2")
        buf.write("\2\u0214\u0215\7M\2\2\u0215\u0216\5\62\32\2\u0216\u0217")
        buf.write("\7N\2\2\u0217\u0219\3\2\2\2\u0218\u0214\3\2\2\2\u0218")
        buf.write("\u0219\3\2\2\2\u0219\61\3\2\2\2\u021a\u021b\t\3\2\2\u021b")
        buf.write("\63\3\2\2\2\u021c\u021e\58\35\2\u021d\u021f\5\66\34\2")
        buf.write("\u021e\u021d\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u0223\3")
        buf.write("\2\2\2\u0220\u0222\7E\2\2\u0221\u0220\3\2\2\2\u0222\u0225")
        buf.write("\3\2\2\2\u0223\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224")
        buf.write("\u0229\3\2\2\2\u0225\u0223\3\2\2\2\u0226\u0228\5D#\2\u0227")
        buf.write("\u0226\3\2\2\2\u0228\u022b\3\2\2\2\u0229\u0227\3\2\2\2")
        buf.write("\u0229\u022a\3\2\2\2\u022a\u022f\3\2\2\2\u022b\u0229\3")
        buf.write("\2\2\2\u022c\u022e\7E\2\2\u022d\u022c\3\2\2\2\u022e\u0231")
        buf.write("\3\2\2\2\u022f\u022d\3\2\2\2\u022f\u0230\3\2\2\2\u0230")
        buf.write("\u0235\3\2\2\2\u0231\u022f\3\2\2\2\u0232\u0234\5\u00b2")
        buf.write("Z\2\u0233\u0232\3\2\2\2\u0234\u0237\3\2\2\2\u0235\u0233")
        buf.write("\3\2\2\2\u0235\u0236\3\2\2\2\u0236\u023b\3\2\2\2\u0237")
        buf.write("\u0235\3\2\2\2\u0238\u023a\7E\2\2\u0239\u0238\3\2\2\2")
        buf.write("\u023a\u023d\3\2\2\2\u023b\u0239\3\2\2\2\u023b\u023c\3")
        buf.write("\2\2\2\u023c\65\3\2\2\2\u023d\u023b\3\2\2\2\u023e\u023f")
        buf.write("\7X\2\2\u023f\u0246\t\3\2\2\u0240\u0242\7E\2\2\u0241\u0240")
        buf.write("\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0241\3\2\2\2\u0243")
        buf.write("\u0244\3\2\2\2\u0244\u0247\3\2\2\2\u0245\u0247\7\2\2\3")
        buf.write("\u0246\u0241\3\2\2\2\u0246\u0245\3\2\2\2\u0247\67\3\2")
        buf.write("\2\2\u0248\u024a\7V\2\2\u0249\u024b\5@!\2\u024a\u0249")
        buf.write("\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u024c\3\2\2\2\u024c")
        buf.write("\u024e\5B\"\2\u024d\u024f\5<\37\2\u024e\u024d\3\2\2\2")
        buf.write("\u024e\u024f\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0251\5")
        buf.write(":\36\2\u0251\u0252\7E\2\2\u02529\3\2\2\2\u0253\u0254\7")
        buf.write("E\2\2\u0254\u0255\7S\2\2\u0255\u0257\7S\2\2\u0256\u0258")
        buf.write("\7S\2\2\u0257\u0256\3\2\2\2\u0258\u0259\3\2\2\2\u0259")
        buf.write("\u0257\3\2\2\2\u0259\u025a\3\2\2\2\u025a;\3\2\2\2\u025b")
        buf.write("\u025c\7K\2\2\u025c\u025f\5> \2\u025d\u025e\7W\2\2\u025e")
        buf.write("\u0260\5> \2\u025f\u025d\3\2\2\2\u025f\u0260\3\2\2\2\u0260")
        buf.write("=\3\2\2\2\u0261\u0265\5\n\6\2\u0262\u0265\7_\2\2\u0263")
        buf.write("\u0265\7`\2\2\u0264\u0261\3\2\2\2\u0264\u0262\3\2\2\2")
        buf.write("\u0264\u0263\3\2\2\2\u0265?\3\2\2\2\u0266\u026b\5\n\6")
        buf.write("\2\u0267\u0268\7S\2\2\u0268\u026c\7J\2\2\u0269\u026a\7")
        buf.write("]\2\2\u026a\u026c\7J\2\2\u026b\u0267\3\2\2\2\u026b\u0269")
        buf.write("\3\2\2\2\u026cA\3\2\2\2\u026d\u026e\5\n\6\2\u026eC\3\2")
        buf.write("\2\2\u026f\u0271\5\\/\2\u0270\u026f\3\2\2\2\u0271\u0274")
        buf.write("\3\2\2\2\u0272\u0270\3\2\2\2\u0272\u0273\3\2\2\2\u0273")
        buf.write("\u0275\3\2\2\2\u0274\u0272\3\2\2\2\u0275\u0277\5Z.\2\u0276")
        buf.write("\u0278\5F$\2\u0277\u0276\3\2\2\2\u0277\u0278\3\2\2\2\u0278")
        buf.write("\u027a\3\2\2\2\u0279\u027b\5X-\2\u027a\u0279\3\2\2\2\u027a")
        buf.write("\u027b\3\2\2\2\u027b\u027d\3\2\2\2\u027c\u027e\5V,\2\u027d")
        buf.write("\u027c\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u0285\3\2\2\2")
        buf.write("\u027f\u0281\7E\2\2\u0280\u027f\3\2\2\2\u0281\u0282\3")
        buf.write("\2\2\2\u0282\u0280\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0286")
        buf.write("\3\2\2\2\u0284\u0286\7\2\2\3\u0285\u0280\3\2\2\2\u0285")
        buf.write("\u0284\3\2\2\2\u0286E\3\2\2\2\u0287\u0288\7K\2\2\u0288")
        buf.write("\u028a\5^\60\2\u0289\u028b\5H%\2\u028a\u0289\3\2\2\2\u028a")
        buf.write("\u028b\3\2\2\2\u028b\u0290\3\2\2\2\u028c\u028d\7K\2\2")
        buf.write("\u028d\u0290\5L\'\2\u028e\u0290\5N(\2\u028f\u0287\3\2")
        buf.write("\2\2\u028f\u028c\3\2\2\2\u028f\u028e\3\2\2\2\u0290G\3")
        buf.write("\2\2\2\u0291\u0293\5J&\2\u0292\u0291\3\2\2\2\u0292\u0293")
        buf.write("\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0295\5\30\r\2\u0295")
        buf.write("I\3\2\2\2\u0296\u0297\7U\2\2\u0297\u0298\7U\2\2\u0298")
        buf.write("K\3\2\2\2\u0299\u029a\5\n\6\2\u029aM\3\2\2\2\u029b\u029c")
        buf.write("\5P)\2\u029c\u029d\5R*\2\u029dO\3\2\2\2\u029e\u029f\t")
        buf.write("\4\2\2\u029fQ\3\2\2\2\u02a0\u02a1\7i\2\2\u02a1S\3\2\2")
        buf.write("\2\u02a2\u02a4\5\n\6\2\u02a3\u02a2\3\2\2\2\u02a4\u02a5")
        buf.write("\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6")
        buf.write("\u02aa\3\2\2\2\u02a7\u02aa\7_\2\2\u02a8\u02aa\7`\2\2\u02a9")
        buf.write("\u02a3\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02a8\3\2\2\2")
        buf.write("\u02aaU\3\2\2\2\u02ab\u02ac\7Q\2\2\u02ac\u02ad\5T+\2\u02ad")
        buf.write("W\3\2\2\2\u02ae\u02af\7W\2\2\u02af\u02b0\5T+\2\u02b0Y")
        buf.write("\3\2\2\2\u02b1\u02b2\5\n\6\2\u02b2[\3\2\2\2\u02b3\u02b4")
        buf.write("\t\5\2\2\u02b4]\3\2\2\2\u02b5\u02c8\5`\61\2\u02b6\u02c8")
        buf.write("\5d\63\2\u02b7\u02c8\5b\62\2\u02b8\u02c8\5f\64\2\u02b9")
        buf.write("\u02c8\5h\65\2\u02ba\u02c8\5j\66\2\u02bb\u02c8\5l\67\2")
        buf.write("\u02bc\u02c8\5n8\2\u02bd\u02c8\5p9\2\u02be\u02c8\5x=\2")
        buf.write("\u02bf\u02c8\5\u0084C\2\u02c0\u02c8\5\u008eH\2\u02c1\u02c8")
        buf.write("\5\u0094K\2\u02c2\u02c8\5\u00a8U\2\u02c3\u02c8\5\u0098")
        buf.write("M\2\u02c4\u02c8\5r:\2\u02c5\u02c8\5t;\2\u02c6\u02c8\5")
        buf.write("v<\2\u02c7\u02b5\3\2\2\2\u02c7\u02b6\3\2\2\2\u02c7\u02b7")
        buf.write("\3\2\2\2\u02c7\u02b8\3\2\2\2\u02c7\u02b9\3\2\2\2\u02c7")
        buf.write("\u02ba\3\2\2\2\u02c7\u02bb\3\2\2\2\u02c7\u02bc\3\2\2\2")
        buf.write("\u02c7\u02bd\3\2\2\2\u02c7\u02be\3\2\2\2\u02c7\u02bf\3")
        buf.write("\2\2\2\u02c7\u02c0\3\2\2\2\u02c7\u02c1\3\2\2\2\u02c7\u02c2")
        buf.write("\3\2\2\2\u02c7\u02c3\3\2\2\2\u02c7\u02c4\3\2\2\2\u02c7")
        buf.write("\u02c5\3\2\2\2\u02c7\u02c6\3\2\2\2\u02c8_\3\2\2\2\u02c9")
        buf.write("\u02ca\7.\2\2\u02caa\3\2\2\2\u02cb\u02cc\7/\2\2\u02cc")
        buf.write("c\3\2\2\2\u02cd\u02ce\7\60\2\2\u02cee\3\2\2\2\u02cf\u02d0")
        buf.write("\7\61\2\2\u02d0g\3\2\2\2\u02d1\u02d2\7\62\2\2\u02d2i\3")
        buf.write("\2\2\2\u02d3\u02d4\7\63\2\2\u02d4k\3\2\2\2\u02d5\u02d6")
        buf.write("\7\64\2\2\u02d6m\3\2\2\2\u02d7\u02d8\7\65\2\2\u02d8o\3")
        buf.write("\2\2\2\u02d9\u02da\7\66\2\2\u02daq\3\2\2\2\u02db\u02dc")
        buf.write("\78\2\2\u02dcs\3\2\2\2\u02dd\u02de\7:\2\2\u02deu\3\2\2")
        buf.write("\2\u02df\u02e0\7;\2\2\u02e0w\3\2\2\2\u02e1\u02ea\7=\2")
        buf.write("\2\u02e2\u02e3\7M\2\2\u02e3\u02e6\5z>\2\u02e4\u02e5\7")
        buf.write("T\2\2\u02e5\u02e7\5|?\2\u02e6\u02e4\3\2\2\2\u02e6\u02e7")
        buf.write("\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\7N\2\2\u02e9")
        buf.write("\u02eb\3\2\2\2\u02ea\u02e2\3\2\2\2\u02ea\u02eb\3\2\2\2")
        buf.write("\u02eby\3\2\2\2\u02ec\u02ed\t\6\2\2\u02ed{\3\2\2\2\u02ee")
        buf.write("\u02ef\7D\2\2\u02ef\u02f0\7X\2\2\u02f0\u02f5\5~@\2\u02f1")
        buf.write("\u02f2\7T\2\2\u02f2\u02f4\5~@\2\u02f3\u02f1\3\2\2\2\u02f4")
        buf.write("\u02f7\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f5\u02f6\3\2\2\2")
        buf.write("\u02f6}\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f8\u02fa\5\u0082")
        buf.write("B\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fb")
        buf.write("\3\2\2\2\u02fb\u02fc\5\u0080A\2\u02fc\177\3\2\2\2\u02fd")
        buf.write("\u0301\5\n\6\2\u02fe\u0301\7_\2\2\u02ff\u0301\7`\2\2\u0300")
        buf.write("\u02fd\3\2\2\2\u0300\u02fe\3\2\2\2\u0300\u02ff\3\2\2\2")
        buf.write("\u0301\u0081\3\2\2\2\u0302\u0303\5\n\6\2\u0303\u0304\7")
        buf.write("K\2\2\u0304\u0083\3\2\2\2\u0305\u030a\7>\2\2\u0306\u0307")
        buf.write("\7M\2\2\u0307\u0308\5\u0086D\2\u0308\u0309\7N\2\2\u0309")
        buf.write("\u030b\3\2\2\2\u030a\u0306\3\2\2\2\u030a\u030b\3\2\2\2")
        buf.write("\u030b\u0085\3\2\2\2\u030c\u030d\7D\2\2\u030d\u030e\7")
        buf.write("X\2\2\u030e\u0313\5\u0088E\2\u030f\u0310\7T\2\2\u0310")
        buf.write("\u0312\5\u0088E\2\u0311\u030f\3\2\2\2\u0312\u0315\3\2")
        buf.write("\2\2\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0087")
        buf.write("\3\2\2\2\u0315\u0313\3\2\2\2\u0316\u0318\5\u008cG\2\u0317")
        buf.write("\u0316\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0319\3\2\2\2")
        buf.write("\u0319\u031a\5\u008aF\2\u031a\u0089\3\2\2\2\u031b\u031f")
        buf.write("\5\n\6\2\u031c\u031f\7_\2\2\u031d\u031f\7`\2\2\u031e\u031b")
        buf.write("\3\2\2\2\u031e\u031c\3\2\2\2\u031e\u031d\3\2\2\2\u031f")
        buf.write("\u008b\3\2\2\2\u0320\u0321\7G\2\2\u0321\u0322\7K\2\2\u0322")
        buf.write("\u008d\3\2\2\2\u0323\u0324\7?\2\2\u0324\u0325\7M\2\2\u0325")
        buf.write("\u0326\5\u0090I\2\u0326\u0327\7N\2\2\u0327\u008f\3\2\2")
        buf.write("\2\u0328\u032d\5\u0092J\2\u0329\u032a\7T\2\2\u032a\u032c")
        buf.write("\5\u0092J\2\u032b\u0329\3\2\2\2\u032c\u032f\3\2\2\2\u032d")
        buf.write("\u032b\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u0091\3\2\2\2")
        buf.write("\u032f\u032d\3\2\2\2\u0330\u0331\5\n\6\2\u0331\u0093\3")
        buf.write("\2\2\2\u0332\u0337\7@\2\2\u0333\u0334\7M\2\2\u0334\u0335")
        buf.write("\5\u0096L\2\u0335\u0336\7N\2\2\u0336\u0338\3\2\2\2\u0337")
        buf.write("\u0333\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0095\3\2\2\2")
        buf.write("\u0339\u033a\7\25\2\2\u033a\u0097\3\2\2\2\u033b\u0340")
        buf.write("\5\u009aN\2\u033c\u033d\7M\2\2\u033d\u033e\5\u009cO\2")
        buf.write("\u033e\u033f\7N\2\2\u033f\u0341\3\2\2\2\u0340\u033c\3")
        buf.write("\2\2\2\u0340\u0341\3\2\2\2\u0341\u0099\3\2\2\2\u0342\u0343")
        buf.write("\t\7\2\2\u0343\u009b\3\2\2\2\u0344\u0349\5\u009eP\2\u0345")
        buf.write("\u0346\7T\2\2\u0346\u0348\5\u009eP\2\u0347\u0345\3\2\2")
        buf.write("\2\u0348\u034b\3\2\2\2\u0349\u0347\3\2\2\2\u0349\u034a")
        buf.write("\3\2\2\2\u034a\u009d\3\2\2\2\u034b\u0349\3\2\2\2\u034c")
        buf.write("\u034d\5\u00a2R\2\u034d\u034e\5\u00a0Q\2\u034e\u034f\5")
        buf.write("\u00a4S\2\u034f\u009f\3\2\2\2\u0350\u0351\7H\2\2\u0351")
        buf.write("\u00a1\3\2\2\2\u0352\u0353\5\n\6\2\u0353\u0354\7X\2\2")
        buf.write("\u0354\u00a3\3\2\2\2\u0355\u0357\5\u00a6T\2\u0356\u0355")
        buf.write("\3\2\2\2\u0357\u035a\3\2\2\2\u0358\u0356\3\2\2\2\u0358")
        buf.write("\u0359\3\2\2\2\u0359\u00a5\3\2\2\2\u035a\u0358\3\2\2\2")
        buf.write("\u035b\u035c\7^\2\2\u035c\u035d\5\n\6\2\u035d\u00a7\3")
        buf.write("\2\2\2\u035e\u035f\5\u00aaV\2\u035f\u0362\7M\2\2\u0360")
        buf.write("\u0363\5\u00acW\2\u0361\u0363\5\u00aeX\2\u0362\u0360\3")
        buf.write("\2\2\2\u0362\u0361\3\2\2\2\u0363\u0365\3\2\2\2\u0364\u0366")
        buf.write("\5\u00b0Y\2\u0365\u0364\3\2\2\2\u0365\u0366\3\2\2\2\u0366")
        buf.write("\u0367\3\2\2\2\u0367\u0368\7N\2\2\u0368\u00a9\3\2\2\2")
        buf.write("\u0369\u036a\t\b\2\2\u036a\u00ab\3\2\2\2\u036b\u036c\7")
        buf.write("V\2\2\u036c\u036d\5\n\6\2\u036d\u00ad\3\2\2\2\u036e\u036f")
        buf.write("\5\f\7\2\u036f\u00af\3\2\2\2\u0370\u0371\7S\2\2\u0371")
        buf.write("\u0372\7J\2\2\u0372\u0373\5\n\6\2\u0373\u00b1\3\2\2\2")
        buf.write("\u0374\u0384\5\u0104\u0083\2\u0375\u0384\5\u0100\u0081")
        buf.write("\2\u0376\u0384\5\u00fc\177\2\u0377\u0384\5\u00fa~\2\u0378")
        buf.write("\u0384\5\u00f8}\2\u0379\u0384\5\u00f6|\2\u037a\u0384\5")
        buf.write("\u00f4{\2\u037b\u0384\5\u00f2z\2\u037c\u0384\5\u00f0y")
        buf.write("\2\u037d\u0384\5\u00eex\2\u037e\u0384\5\u00e8u\2\u037f")
        buf.write("\u0384\5\u00bc_\2\u0380\u0384\5\u00b8]\2\u0381\u0384\5")
        buf.write("\u00b4[\2\u0382\u0384\7E\2\2\u0383\u0374\3\2\2\2\u0383")
        buf.write("\u0375\3\2\2\2\u0383\u0376\3\2\2\2\u0383\u0377\3\2\2\2")
        buf.write("\u0383\u0378\3\2\2\2\u0383\u0379\3\2\2\2\u0383\u037a\3")
        buf.write("\2\2\2\u0383\u037b\3\2\2\2\u0383\u037c\3\2\2\2\u0383\u037d")
        buf.write("\3\2\2\2\u0383\u037e\3\2\2\2\u0383\u037f\3\2\2\2\u0383")
        buf.write("\u0380\3\2\2\2\u0383\u0381\3\2\2\2\u0383\u0382\3\2\2\2")
        buf.write("\u0384\u00b3\3\2\2\2\u0385\u0386\7\17\2\2\u0386\u0387")
        buf.write("\7M\2\2\u0387\u0388\5\u00b6\\\2\u0388\u0389\7N\2\2\u0389")
        buf.write("\u00b5\3\2\2\2\u038a\u038b\5\n\6\2\u038b\u00b7\3\2\2\2")
        buf.write("\u038c\u038d\7\16\2\2\u038d\u038e\7M\2\2\u038e\u038f\5")
        buf.write("\u00ba^\2\u038f\u0390\7N\2\2\u0390\u00b9\3\2\2\2\u0391")
        buf.write("\u0396\5\n\6\2\u0392\u0393\7T\2\2\u0393\u0395\5\n\6\2")
        buf.write("\u0394\u0392\3\2\2\2\u0395\u0398\3\2\2\2\u0396\u0394\3")
        buf.write("\2\2\2\u0396\u0397\3\2\2\2\u0397\u00bb\3\2\2\2\u0398\u0396")
        buf.write("\3\2\2\2\u0399\u039c\7\r\2\2\u039a\u039b\7U\2\2\u039b")
        buf.write("\u039d\5\u00c2b\2\u039c\u039a\3\2\2\2\u039c\u039d\3\2")
        buf.write("\2\2\u039d\u03a2\3\2\2\2\u039e\u039f\7M\2\2\u039f\u03a0")
        buf.write("\5\u00be`\2\u03a0\u03a1\7N\2\2\u03a1\u03a3\3\2\2\2\u03a2")
        buf.write("\u039e\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u00bd\3\2\2\2")
        buf.write("\u03a4\u03aa\5\u00c0a\2\u03a5\u03a9\5\u00e2r\2\u03a6\u03a9")
        buf.write("\7E\2\2\u03a7\u03a9\7T\2\2\u03a8\u03a5\3\2\2\2\u03a8\u03a6")
        buf.write("\3\2\2\2\u03a8\u03a7\3\2\2\2\u03a9\u03ac\3\2\2\2\u03aa")
        buf.write("\u03a8\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u00bf\3\2\2\2")
        buf.write("\u03ac\u03aa\3\2\2\2\u03ad\u03b8\5\u00ceh\2\u03ae\u03b8")
        buf.write("\5\u00c4c\2\u03af\u03b8\5\u00d2j\2\u03b0\u03b8\5\u00c6")
        buf.write("d\2\u03b1\u03b8\5\u00c8e\2\u03b2\u03b8\5\u00caf\2\u03b3")
        buf.write("\u03b8\5\u00ccg\2\u03b4\u03b8\5\u00dan\2\u03b5\u03b8\7")
        buf.write("E\2\2\u03b6\u03b8\7T\2\2\u03b7\u03ad\3\2\2\2\u03b7\u03ae")
        buf.write("\3\2\2\2\u03b7\u03af\3\2\2\2\u03b7\u03b0\3\2\2\2\u03b7")
        buf.write("\u03b1\3\2\2\2\u03b7\u03b2\3\2\2\2\u03b7\u03b3\3\2\2\2")
        buf.write("\u03b7\u03b4\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7\u03b6\3")
        buf.write("\2\2\2\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba")
        buf.write("\3\2\2\2\u03ba\u00c1\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bc")
        buf.write("\u03bd\5\n\6\2\u03bd\u00c3\3\2\2\2\u03be\u03bf\7#\2\2")
        buf.write("\u03bf\u03c0\7K\2\2\u03c0\u03c4\7\25\2\2\u03c1\u03c3\7")
        buf.write("E\2\2\u03c2\u03c1\3\2\2\2\u03c3\u03c6\3\2\2\2\u03c4\u03c2")
        buf.write("\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u00c5\3\2\2\2\u03c6")
        buf.write("\u03c4\3\2\2\2\u03c7\u03c8\7 \2\2\u03c8\u03cc\5\24\13")
        buf.write("\2\u03c9\u03cb\7E\2\2\u03ca\u03c9\3\2\2\2\u03cb\u03ce")
        buf.write("\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd")
        buf.write("\u00c7\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03d1\7\37\2")
        buf.write("\2\u03d0\u03d2\7K\2\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2")
        buf.write("\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d7\5\24\13\2\u03d4")
        buf.write("\u03d6\7E\2\2\u03d5\u03d4\3\2\2\2\u03d6\u03d9\3\2\2\2")
        buf.write("\u03d7\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u00c9\3")
        buf.write("\2\2\2\u03d9\u03d7\3\2\2\2\u03da\u03db\7\'\2\2\u03db\u03dc")
        buf.write("\7K\2\2\u03dc\u03e0\5\16\b\2\u03dd\u03df\7E\2\2\u03de")
        buf.write("\u03dd\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0\u03de\3\2\2\2")
        buf.write("\u03e0\u03e1\3\2\2\2\u03e1\u00cb\3\2\2\2\u03e2\u03e0\3")
        buf.write("\2\2\2\u03e3\u03e4\7\35\2\2\u03e4\u03e5\7K\2\2\u03e5\u03e9")
        buf.write("\5\n\6\2\u03e6\u03e8\7E\2\2\u03e7\u03e6\3\2\2\2\u03e8")
        buf.write("\u03eb\3\2\2\2\u03e9\u03e7\3\2\2\2\u03e9\u03ea\3\2\2\2")
        buf.write("\u03ea\u00cd\3\2\2\2\u03eb\u03e9\3\2\2\2\u03ec\u03ed\7")
        buf.write("+\2\2\u03ed\u03ee\7K\2\2\u03ee\u03f0\5\16\b\2\u03ef\u03f1")
        buf.write("\5\u00d0i\2\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1")
        buf.write("\u03f5\3\2\2\2\u03f2\u03f4\7E\2\2\u03f3\u03f2\3\2\2\2")
        buf.write("\u03f4\u03f7\3\2\2\2\u03f5\u03f3\3\2\2\2\u03f5\u03f6\3")
        buf.write("\2\2\2\u03f6\u00cf\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f8\u03f9")
        buf.write("\5\22\n\2\u03f9\u00d1\3\2\2\2\u03fa\u03fb\7!\2\2\u03fb")
        buf.write("\u03fc\7M\2\2\u03fc\u0401\5\u00d4k\2\u03fd\u03fe\7T\2")
        buf.write("\2\u03fe\u0400\5\u00d4k\2\u03ff\u03fd\3\2\2\2\u0400\u0403")
        buf.write("\3\2\2\2\u0401\u03ff\3\2\2\2\u0401\u0402\3\2\2\2\u0402")
        buf.write("\u0404\3\2\2\2\u0403\u0401\3\2\2\2\u0404\u0405\7N\2\2")
        buf.write("\u0405\u00d3\3\2\2\2\u0406\u040a\7\32\2\2\u0407\u0408")
        buf.write("\7K\2\2\u0408\u040b\5\u00d6l\2\u0409\u040b\5\u00d8m\2")
        buf.write("\u040a\u0407\3\2\2\2\u040a\u0409\3\2\2\2\u040a\u040b\3")
        buf.write("\2\2\2\u040b\u00d5\3\2\2\2\u040c\u040d\7V\2\2\u040d\u040e")
        buf.write("\5\n\6\2\u040e\u00d7\3\2\2\2\u040f\u0410\5\f\7\2\u0410")
        buf.write("\u00d9\3\2\2\2\u0411\u0412\7\36\2\2\u0412\u0413\7K\2\2")
        buf.write("\u0413\u0417\5\u00dco\2\u0414\u0416\7E\2\2\u0415\u0414")
        buf.write("\3\2\2\2\u0416\u0419\3\2\2\2\u0417\u0415\3\2\2\2\u0417")
        buf.write("\u0418\3\2\2\2\u0418\u00db\3\2\2\2\u0419\u0417\3\2\2\2")
        buf.write("\u041a\u041b\7\"\2\2\u041b\u041e\5\u00dep\2\u041c\u041d")
        buf.write("\7-\2\2\u041d\u041f\5\u00e0q\2\u041e\u041c\3\2\2\2\u041e")
        buf.write("\u041f\3\2\2\2\u041f\u00dd\3\2\2\2\u0420\u0421\5\n\6\2")
        buf.write("\u0421\u00df\3\2\2\2\u0422\u0423\5\n\6\2\u0423\u00e1\3")
        buf.write("\2\2\2\u0424\u0425\7\33\2\2\u0425\u0429\7K\2\2\u0426\u042a")
        buf.write("\5\u00e4s\2\u0427\u042a\7T\2\2\u0428\u042a\7E\2\2\u0429")
        buf.write("\u0426\3\2\2\2\u0429\u0427\3\2\2\2\u0429\u0428\3\2\2\2")
        buf.write("\u042a\u042b\3\2\2\2\u042b\u0429\3\2\2\2\u042b\u042c\3")
        buf.write("\2\2\2\u042c\u00e3\3\2\2\2\u042d\u042e\5\u00e6t\2\u042e")
        buf.write("\u042f\7M\2\2\u042f\u0430\5\u00be`\2\u0430\u0431\7N\2")
        buf.write("\2\u0431\u00e5\3\2\2\2\u0432\u0433\5\n\6\2\u0433\u00e7")
        buf.write("\3\2\2\2\u0434\u0443\7\f\2\2\u0435\u043f\7M\2\2\u0436")
        buf.write("\u0440\5\u00eav\2\u0437\u043c\5\u00ecw\2\u0438\u0439\7")
        buf.write("T\2\2\u0439\u043b\5\u00ecw\2\u043a\u0438\3\2\2\2\u043b")
        buf.write("\u043e\3\2\2\2\u043c\u043a\3\2\2\2\u043c\u043d\3\2\2\2")
        buf.write("\u043d\u0440\3\2\2\2\u043e\u043c\3\2\2\2\u043f\u0436\3")
        buf.write("\2\2\2\u043f\u0437\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0442")
        buf.write("\7N\2\2\u0442\u0444\3\2\2\2\u0443\u0435\3\2\2\2\u0443")
        buf.write("\u0444\3\2\2\2\u0444\u00e9\3\2\2\2\u0445\u0446\7\\\2\2")
        buf.write("\u0446\u00eb\3\2\2\2\u0447\u0448\5\n\6\2\u0448\u00ed\3")
        buf.write("\2\2\2\u0449\u044a\7\13\2\2\u044a\u044b\5\24\13\2\u044b")
        buf.write("\u00ef\3\2\2\2\u044c\u044d\7\n\2\2\u044d\u044e\5\24\13")
        buf.write("\2\u044e\u00f1\3\2\2\2\u044f\u0450\7\t\2\2\u0450\u0451")
        buf.write("\5\24\13\2\u0451\u00f3\3\2\2\2\u0452\u0453\7\b\2\2\u0453")
        buf.write("\u0454\5\24\13\2\u0454\u00f5\3\2\2\2\u0455\u0456\7\7\2")
        buf.write("\2\u0456\u0457\5\24\13\2\u0457\u00f7\3\2\2\2\u0458\u0459")
        buf.write("\7\6\2\2\u0459\u045a\5\24\13\2\u045a\u00f9\3\2\2\2\u045b")
        buf.write("\u045c\7\5\2\2\u045c\u045d\7M\2\2\u045d\u045e\5\f\7\2")
        buf.write("\u045e\u045f\7N\2\2\u045f\u00fb\3\2\2\2\u0460\u0461\7")
        buf.write("\4\2\2\u0461\u0462\7M\2\2\u0462\u0463\5\u00fe\u0080\2")
        buf.write("\u0463\u0464\7N\2\2\u0464\u00fd\3\2\2\2\u0465\u0466\5")
        buf.write("\n\6\2\u0466\u00ff\3\2\2\2\u0467\u046c\7\3\2\2\u0468\u0469")
        buf.write("\7M\2\2\u0469\u046a\5\u0102\u0082\2\u046a\u046b\7N\2\2")
        buf.write("\u046b\u046d\3\2\2\2\u046c\u0468\3\2\2\2\u046c\u046d\3")
        buf.write("\2\2\2\u046d\u0101\3\2\2\2\u046e\u046f\7\26\2\2\u046f")
        buf.write("\u0103\3\2\2\2\u0470\u048a\7\22\2\2\u0471\u0480\7M\2\2")
        buf.write("\u0472\u047f\5\u0122\u0092\2\u0473\u047f\5\u0124\u0093")
        buf.write("\2\u0474\u047f\5\u0126\u0094\2\u0475\u047f\5\u0128\u0095")
        buf.write("\2\u0476\u047f\5\u012a\u0096\2\u0477\u047f\5\u012c\u0097")
        buf.write("\2\u0478\u047f\5\u011a\u008e\2\u0479\u047f\5\u010e\u0088")
        buf.write("\2\u047a\u047f\5\u0108\u0085\2\u047b\u047f\5\u0106\u0084")
        buf.write("\2\u047c\u047f\7E\2\2\u047d\u047f\7T\2\2\u047e\u0472\3")
        buf.write("\2\2\2\u047e\u0473\3\2\2\2\u047e\u0474\3\2\2\2\u047e\u0475")
        buf.write("\3\2\2\2\u047e\u0476\3\2\2\2\u047e\u0477\3\2\2\2\u047e")
        buf.write("\u0478\3\2\2\2\u047e\u0479\3\2\2\2\u047e\u047a\3\2\2\2")
        buf.write("\u047e\u047b\3\2\2\2\u047e\u047c\3\2\2\2\u047e\u047d\3")
        buf.write("\2\2\2\u047f\u0482\3\2\2\2\u0480\u047e\3\2\2\2\u0480\u0481")
        buf.write("\3\2\2\2\u0481\u0486\3\2\2\2\u0482\u0480\3\2\2\2\u0483")
        buf.write("\u0485\7E\2\2\u0484\u0483\3\2\2\2\u0485\u0488\3\2\2\2")
        buf.write("\u0486\u0484\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0489\3")
        buf.write("\2\2\2\u0488\u0486\3\2\2\2\u0489\u048b\7N\2\2\u048a\u0471")
        buf.write("\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048f\3\2\2\2\u048c")
        buf.write("\u048e\7E\2\2\u048d\u048c\3\2\2\2\u048e\u0491\3\2\2\2")
        buf.write("\u048f\u048d\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u0105\3")
        buf.write("\2\2\2\u0491\u048f\3\2\2\2\u0492\u0493\7\30\2\2\u0493")
        buf.write("\u0497\7K\2\2\u0494\u0496\7E\2\2\u0495\u0494\3\2\2\2\u0496")
        buf.write("\u0499\3\2\2\2\u0497\u0495\3\2\2\2\u0497\u0498\3\2\2\2")
        buf.write("\u0498\u049a\3\2\2\2\u0499\u0497\3\2\2\2\u049a\u04a5\5")
        buf.write("\u010c\u0087\2\u049b\u049f\7T\2\2\u049c\u049e\7E\2\2\u049d")
        buf.write("\u049c\3\2\2\2\u049e\u04a1\3\2\2\2\u049f\u049d\3\2\2\2")
        buf.write("\u049f\u04a0\3\2\2\2\u04a0\u04a2\3\2\2\2\u04a1\u049f\3")
        buf.write("\2\2\2\u04a2\u04a4\5\u010c\u0087\2\u04a3\u049b\3\2\2\2")
        buf.write("\u04a4\u04a7\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a5\u04a6\3")
        buf.write("\2\2\2\u04a6\u0107\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a8\u04a9")
        buf.write("\7\27\2\2\u04a9\u04aa\7K\2\2\u04aa\u04af\5\u010a\u0086")
        buf.write("\2\u04ab\u04ac\7T\2\2\u04ac\u04ae\5\u010a\u0086\2\u04ad")
        buf.write("\u04ab\3\2\2\2\u04ae\u04b1\3\2\2\2\u04af\u04ad\3\2\2\2")
        buf.write("\u04af\u04b0\3\2\2\2\u04b0\u0109\3\2\2\2\u04b1\u04af\3")
        buf.write("\2\2\2\u04b2\u04b3\t\3\2\2\u04b3\u010b\3\2\2\2\u04b4\u04b5")
        buf.write("\t\3\2\2\u04b5\u010d\3\2\2\2\u04b6\u04b7\7\33\2\2\u04b7")
        buf.write("\u04b8\7K\2\2\u04b8\u04bd\5\u0110\u0089\2\u04b9\u04ba")
        buf.write("\7T\2\2\u04ba\u04bc\5\u0110\u0089\2\u04bb\u04b9\3\2\2")
        buf.write("\2\u04bc\u04bf\3\2\2\2\u04bd\u04bb\3\2\2\2\u04bd\u04be")
        buf.write("\3\2\2\2\u04be\u010f\3\2\2\2\u04bf\u04bd\3\2\2\2\u04c0")
        buf.write("\u04cd\5\u0112\u008a\2\u04c1\u04c9\7M\2\2\u04c2\u04c8")
        buf.write("\5\u0114\u008b\2\u04c3\u04c8\5\u0116\u008c\2\u04c4\u04c8")
        buf.write("\5\u0118\u008d\2\u04c5\u04c8\7E\2\2\u04c6\u04c8\7T\2\2")
        buf.write("\u04c7\u04c2\3\2\2\2\u04c7\u04c3\3\2\2\2\u04c7\u04c4\3")
        buf.write("\2\2\2\u04c7\u04c5\3\2\2\2\u04c7\u04c6\3\2\2\2\u04c8\u04cb")
        buf.write("\3\2\2\2\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca")
        buf.write("\u04cc\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cc\u04ce\7N\2\2")
        buf.write("\u04cd\u04c1\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u0111\3")
        buf.write("\2\2\2\u04cf\u04d0\5\n\6\2\u04d0\u0113\3\2\2\2\u04d1\u04d2")
        buf.write("\7\34\2\2\u04d2\u04d3\7K\2\2\u04d3\u04d4\7\31\2\2\u04d4")
        buf.write("\u0115\3\2\2\2\u04d5\u04d6\7$\2\2\u04d6\u04d7\7K\2\2\u04d7")
        buf.write("\u04d8\7G\2\2\u04d8\u0117\3\2\2\2\u04d9\u04da\7+\2\2\u04da")
        buf.write("\u04db\7K\2\2\u04db\u04dc\5\16\b\2\u04dc\u0119\3\2\2\2")
        buf.write("\u04dd\u04de\7%\2\2\u04de\u04df\7K\2\2\u04df\u04e4\5\u011c")
        buf.write("\u008f\2\u04e0\u04e1\7T\2\2\u04e1\u04e3\5\u011c\u008f")
        buf.write("\2\u04e2\u04e0\3\2\2\2\u04e3\u04e6\3\2\2\2\u04e4\u04e2")
        buf.write("\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u011b\3\2\2\2\u04e6")
        buf.write("\u04e4\3\2\2\2\u04e7\u04e9\5\u011e\u0090\2\u04e8\u04ea")
        buf.write("\5\u0120\u0091\2\u04e9\u04e8\3\2\2\2\u04e9\u04ea\3\2\2")
        buf.write("\2\u04ea\u04eb\3\2\2\2\u04eb\u04ec\7M\2\2\u04ec\u04ed")
        buf.write("\5\16\b\2\u04ed\u04ee\7N\2\2\u04ee\u011d\3\2\2\2\u04ef")
        buf.write("\u04f0\5\n\6\2\u04f0\u011f\3\2\2\2\u04f1\u04f2\t\3\2\2")
        buf.write("\u04f2\u0121\3\2\2\2\u04f3\u04f4\7&\2\2\u04f4\u04f5\7")
        buf.write("K\2\2\u04f5\u04f9\5\16\b\2\u04f6\u04f8\7E\2\2\u04f7\u04f6")
        buf.write("\3\2\2\2\u04f8\u04fb\3\2\2\2\u04f9\u04f7\3\2\2\2\u04f9")
        buf.write("\u04fa\3\2\2\2\u04fa\u0123\3\2\2\2\u04fb\u04f9\3\2\2\2")
        buf.write("\u04fc\u04fd\7\'\2\2\u04fd\u04fe\7K\2\2\u04fe\u0502\5")
        buf.write("\16\b\2\u04ff\u0501\7E\2\2\u0500\u04ff\3\2\2\2\u0501\u0504")
        buf.write("\3\2\2\2\u0502\u0500\3\2\2\2\u0502\u0503\3\2\2\2\u0503")
        buf.write("\u0125\3\2\2\2\u0504\u0502\3\2\2\2\u0505\u0506\7(\2\2")
        buf.write("\u0506\u0507\7K\2\2\u0507\u050b\5\16\b\2\u0508\u050a\7")
        buf.write("E\2\2\u0509\u0508\3\2\2\2\u050a\u050d\3\2\2\2\u050b\u0509")
        buf.write("\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u0127\3\2\2\2\u050d")
        buf.write("\u050b\3\2\2\2\u050e\u050f\7)\2\2\u050f\u0510\7K\2\2\u0510")
        buf.write("\u0514\5\16\b\2\u0511\u0513\7E\2\2\u0512\u0511\3\2\2\2")
        buf.write("\u0513\u0516\3\2\2\2\u0514\u0512\3\2\2\2\u0514\u0515\3")
        buf.write("\2\2\2\u0515\u0129\3\2\2\2\u0516\u0514\3\2\2\2\u0517\u0518")
        buf.write("\7*\2\2\u0518\u0519\7K\2\2\u0519\u051d\5\16\b\2\u051a")
        buf.write("\u051c\7E\2\2\u051b\u051a\3\2\2\2\u051c\u051f\3\2\2\2")
        buf.write("\u051d\u051b\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u012b\3")
        buf.write("\2\2\2\u051f\u051d\3\2\2\2\u0520\u0521\7+\2\2\u0521\u0522")
        buf.write("\7K\2\2\u0522\u0526\5\16\b\2\u0523\u0525\7E\2\2\u0524")
        buf.write("\u0523\3\2\2\2\u0525\u0528\3\2\2\2\u0526\u0524\3\2\2\2")
        buf.write("\u0526\u0527\3\2\2\2\u0527\u012d\3\2\2\2\u0528\u0526\3")
        buf.write("\2\2\2\u0529\u052d\5\u0132\u009a\2\u052a\u052c\7E\2\2")
        buf.write("\u052b\u052a\3\2\2\2\u052c\u052f\3\2\2\2\u052d\u052b\3")
        buf.write("\2\2\2\u052d\u052e\3\2\2\2\u052e\u0533\3\2\2\2\u052f\u052d")
        buf.write("\3\2\2\2\u0530\u0532\5\u014e\u00a8\2\u0531\u0530\3\2\2")
        buf.write("\2\u0532\u0535\3\2\2\2\u0533\u0531\3\2\2\2\u0533\u0534")
        buf.write("\3\2\2\2\u0534\u0537\3\2\2\2\u0535\u0533\3\2\2\2\u0536")
        buf.write("\u0538\5\u013a\u009e\2\u0537\u0536\3\2\2\2\u0537\u0538")
        buf.write("\3\2\2\2\u0538\u053a\3\2\2\2\u0539\u053b\5\u0130\u0099")
        buf.write("\2\u053a\u0539\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u053f")
        buf.write("\3\2\2\2\u053c\u053e\7E\2\2\u053d\u053c\3\2\2\2\u053e")
        buf.write("\u0541\3\2\2\2\u053f\u053d\3\2\2\2\u053f\u0540\3\2\2\2")
        buf.write("\u0540\u012f\3\2\2\2\u0541\u053f\3\2\2\2\u0542\u0543\5")
        buf.write("\24\13\2\u0543\u0131\3\2\2\2\u0544\u0546\7O\2\2\u0545")
        buf.write("\u0547\5\u0134\u009b\2\u0546\u0545\3\2\2\2\u0546\u0547")
        buf.write("\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u054a\5\u014c\u00a7")
        buf.write("\2\u0549\u054b\5\u0136\u009c\2\u054a\u0549\3\2\2\2\u054a")
        buf.write("\u054b\3\2\2\2\u054b\u0554\3\2\2\2\u054c\u054e\7K\2\2")
        buf.write("\u054d\u054f\5\u0142\u00a2\2\u054e\u054d\3\2\2\2\u054e")
        buf.write("\u054f\3\2\2\2\u054f\u0552\3\2\2\2\u0550\u0551\7K\2\2")
        buf.write("\u0551\u0553\5\u013c\u009f\2\u0552\u0550\3\2\2\2\u0552")
        buf.write("\u0553\3\2\2\2\u0553\u0555\3\2\2\2\u0554\u054c\3\2\2\2")
        buf.write("\u0554\u0555\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0557\7")
        buf.write("P\2\2\u0557\u0558\7E\2\2\u0558\u0133\3\2\2\2\u0559\u055a")
        buf.write("\5\n\6\2\u055a\u055b\7S\2\2\u055b\u055c\7J\2\2\u055c\u0135")
        buf.write("\3\2\2\2\u055d\u055e\7-\2\2\u055e\u055f\5\u0138\u009d")
        buf.write("\2\u055f\u0137\3\2\2\2\u0560\u0561\5\n\6\2\u0561\u0139")
        buf.write("\3\2\2\2\u0562\u0563\5\34\17\2\u0563\u013b\3\2\2\2\u0564")
        buf.write("\u0567\5\u013e\u00a0\2\u0565\u0567\5\24\13\2\u0566\u0564")
        buf.write("\3\2\2\2\u0566\u0565\3\2\2\2\u0567\u013d\3\2\2\2\u0568")
        buf.write("\u056d\5\u0140\u00a1\2\u0569\u056a\7W\2\2\u056a\u056c")
        buf.write("\5\u0140\u00a1\2\u056b\u0569\3\2\2\2\u056c\u056f\3\2\2")
        buf.write("\2\u056d\u056b\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u013f")
        buf.write("\3\2\2\2\u056f\u056d\3\2\2\2\u0570\u0576\5\n\6\2\u0571")
        buf.write("\u0576\7G\2\2\u0572\u0576\7S\2\2\u0573\u0576\7R\2\2\u0574")
        buf.write("\u0576\7U\2\2\u0575\u0570\3\2\2\2\u0575\u0571\3\2\2\2")
        buf.write("\u0575\u0572\3\2\2\2\u0575\u0573\3\2\2\2\u0575\u0574\3")
        buf.write("\2\2\2\u0576\u0577\3\2\2\2\u0577\u0575\3\2\2\2\u0577\u0578")
        buf.write("\3\2\2\2\u0578\u0141\3\2\2\2\u0579\u057a\5\u014a\u00a6")
        buf.write("\2\u057a\u0143\3\2\2\2\u057b\u057f\5\n\6\2\u057c\u057f")
        buf.write("\7S\2\2\u057d\u057f\7G\2\2\u057e\u057b\3\2\2\2\u057e\u057c")
        buf.write("\3\2\2\2\u057e\u057d\3\2\2\2\u057f\u0580\3\2\2\2\u0580")
        buf.write("\u057e\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0145\3\2\2\2")
        buf.write("\u0582\u0583\7I\2\2\u0583\u0584\5\n\6\2\u0584\u0585\7")
        buf.write("J\2\2\u0585\u0147\3\2\2\2\u0586\u0589\5\u0144\u00a3\2")
        buf.write("\u0587\u0589\5\u0146\u00a4\2\u0588\u0586\3\2\2\2\u0588")
        buf.write("\u0587\3\2\2\2\u0589\u0149\3\2\2\2\u058a\u058c\7W\2\2")
        buf.write("\u058b\u058a\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058e\3")
        buf.write("\2\2\2\u058d\u058f\5\u0148\u00a5\2\u058e\u058d\3\2\2\2")
        buf.write("\u058e\u058f\3\2\2\2\u058f\u0594\3\2\2\2\u0590\u0591\7")
        buf.write("W\2\2\u0591\u0593\5\u0148\u00a5\2\u0592\u0590\3\2\2\2")
        buf.write("\u0593\u0596\3\2\2\2\u0594\u0592\3\2\2\2\u0594\u0595\3")
        buf.write("\2\2\2\u0595\u0598\3\2\2\2\u0596\u0594\3\2\2\2\u0597\u0599")
        buf.write("\7W\2\2\u0598\u0597\3\2\2\2\u0598\u0599\3\2\2\2\u0599")
        buf.write("\u014b\3\2\2\2\u059a\u059b\5\n\6\2\u059b\u014d\3\2\2\2")
        buf.write("\u059c\u059d\5\u0150\u00a9\2\u059d\u059e\7f\2\2\u059e")
        buf.write("\u05a5\5\u0152\u00aa\2\u059f\u05a1\7E\2\2\u05a0\u059f")
        buf.write("\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a0\3\2\2\2\u05a2")
        buf.write("\u05a3\3\2\2\2\u05a3\u05a6\3\2\2\2\u05a4\u05a6\7\2\2\3")
        buf.write("\u05a5\u05a0\3\2\2\2\u05a5\u05a4\3\2\2\2\u05a6\u014f\3")
        buf.write("\2\2\2\u05a7\u05a8\5\n\6\2\u05a8\u0151\3\2\2\2\u05a9\u05aa")
        buf.write("\7i\2\2\u05aa\u0153\3\2\2\2\u008f\u0157\u015d\u0161\u0166")
        buf.write("\u016c\u0170\u0175\u017b\u018f\u0193\u019b\u01a1\u01a6")
        buf.write("\u01a9\u01ac\u01b0\u01b8\u01c3\u01c7\u01cb\u01d3\u01e2")
        buf.write("\u01e8\u01f6\u01fa\u01ff\u0204\u0210\u0218\u021e\u0223")
        buf.write("\u0229\u022f\u0235\u023b\u0243\u0246\u024a\u024e\u0259")
        buf.write("\u025f\u0264\u026b\u0272\u0277\u027a\u027d\u0282\u0285")
        buf.write("\u028a\u028f\u0292\u02a5\u02a9\u02c7\u02e6\u02ea\u02f5")
        buf.write("\u02f9\u0300\u030a\u0313\u0317\u031e\u032d\u0337\u0340")
        buf.write("\u0349\u0358\u0362\u0365\u0383\u0396\u039c\u03a2\u03a8")
        buf.write("\u03aa\u03b7\u03b9\u03c4\u03cc\u03d1\u03d7\u03e0\u03e9")
        buf.write("\u03f0\u03f5\u0401\u040a\u0417\u041e\u0429\u042b\u043c")
        buf.write("\u043f\u0443\u046c\u047e\u0480\u0486\u048a\u048f\u0497")
        buf.write("\u049f\u04a5\u04af\u04bd\u04c7\u04c9\u04cd\u04e4\u04e9")
        buf.write("\u04f9\u0502\u050b\u0514\u051d\u0526\u052d\u0533\u0537")
        buf.write("\u053a\u053f\u0546\u054a\u054e\u0552\u0554\u0566\u056d")
        buf.write("\u0575\u0577\u057e\u0580\u0588\u058b\u058e\u0594\u0598")
        buf.write("\u05a2\u05a5")
        return buf.getvalue()


class ZmeiLangParser ( Parser ):

    grammarFileName = "ZmeiLangParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'@tree'", "'@date_tree'", "'@mixin'", 
                     "'@m2m_changed'", "'@post_delete'", "'@pre_delete'", 
                     "'@post_save'", "'@pre_save'", "'@clean'", "'@api'", 
                     "'@rest'", "'@order'", "'@sortable'", "'@langs'", "'@filer'", 
                     "'@admin'", "'@suit'", "<INVALID>", "<INVALID>", "'+polymorphic_list'", 
                     "'css'", "'js'", "<INVALID>", "<INVALID>", "'inline'", 
                     "'type'", "'user_field'", "'annotate'", "'on_create'", 
                     "'query'", "'auth'", "'count'", "'i18n'", "'extra'", 
                     "'tabs'", "'list'", "'read_only'", "'list_editable'", 
                     "'list_filter'", "'list_search'", "'fields'", "'import'", 
                     "'as'", "'text'", "'html'", "'html_media'", "'float'", 
                     "'decimal'", "'date'", "'datetime'", "'create_time'", 
                     "'update_time'", "'image'", "'file'", "'filer_image'", 
                     "'filer_file'", "'filer_folder'", "'filer_image_folder'", 
                     "'str'", "'int'", "'slug'", "'bool'", "'one'", "'one2one'", 
                     "'many'", "'choices'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'<'", "'>'", "':'", "'^'", "'('", "')'", 
                     "'['", "']'", "'?'", "'_'", "'-'", "','", "'.'", "'#'", 
                     "'/'", "'='", "'$'", "'&'", "'!'", "'*'", "'~'", "'|'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "' '", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'{'", "<INVALID>", "'}'", "<INVALID>", "<INVALID>", 
                     "';'", "<INVALID>", "'\n'" ]

    symbolicNames = [ "<INVALID>", "AN_TREE", "AN_DATE_TREE", "AN_MIXIN", 
                      "AN_M2M_CHANGED", "AN_POST_DELETE", "AN_PRE_DELETE", 
                      "AN_POST_SAVE", "AN_PRE_SAVE", "AN_CLEAN", "AN_API", 
                      "AN_REST", "AN_ORDER", "AN_SORTABLE", "AN_LANGS", 
                      "AN_FILER", "AN_ADMIN", "AN_SUIT", "WRITE_MODE", "BOOL", 
                      "KW_POLY_LIST", "KW_CSS", "KW_JS", "KW_INLINE_TYPE", 
                      "KW_AUTH_TYPE", "KW_INLINE", "KW_TYPE", "KW_USER_FIELD", 
                      "KW_ANNOTATE", "KW_ON_CREATE", "KW_QUERY", "KW_AUTH", 
                      "KW_COUNT", "KW_I18N", "KW_EXTRA", "KW_TABS", "KW_LIST", 
                      "KW_READ_ONLY", "KW_LIST_EDITABLE", "KW_LIST_FILTER", 
                      "KW_LIST_SEARCH", "KW_FIELDS", "KW_IMPORT", "KW_AS", 
                      "COL_FIELD_TYPE_LONGTEXT", "COL_FIELD_TYPE_HTML", 
                      "COL_FIELD_TYPE_HTML_MEDIA", "COL_FIELD_TYPE_FLOAT", 
                      "COL_FIELD_TYPE_DECIMAL", "COL_FIELD_TYPE_DATE", "COL_FIELD_TYPE_DATETIME", 
                      "COL_FIELD_TYPE_CREATE_TIME", "COL_FIELD_TYPE_UPDATE_TIME", 
                      "COL_FIELD_TYPE_IMAGE", "COL_FIELD_TYPE_FILE", "COL_FIELD_TYPE_FILER_IMAGE", 
                      "COL_FIELD_TYPE_FILER_FILE", "COL_FIELD_TYPE_FILER_FOLDER", 
                      "COL_FIELD_TYPE_FILER_IMAGE_FOLDER", "COL_FIELD_TYPE_TEXT", 
                      "COL_FIELD_TYPE_INT", "COL_FIELD_TYPE_SLUG", "COL_FIELD_TYPE_BOOL", 
                      "COL_FIELD_TYPE_ONE", "COL_FIELD_TYPE_ONE2ONE", "COL_FIELD_TYPE_MANY", 
                      "COL_FIELD_CHOICES", "NL", "ID", "DIGIT", "SIZE2D", 
                      "LT", "GT", "COLON", "EXCLUDE", "BRACE_OPEN", "BRACE_CLOSE", 
                      "SQ_BRACE_OPEN", "SQ_BRACE_CLOSE", "QUESTION_MARK", 
                      "UNDERSCORE", "DASH", "COMA", "DOT", "HASH", "SLASH", 
                      "EQUALS", "DOLLAR", "AMP", "EXCLAM", "STAR", "APPROX", 
                      "PIPE", "STRING_DQ", "STRING_SQ", "COMMENT_LINE", 
                      "COMMENT_BLOCK", "UNICODE", "WS", "COL_FIELD_CALCULATED", 
                      "ASSIGN", "ASSIGN_STATIC", "CODE_BLOCK_START", "PYTHON_CODE", 
                      "CODE_BLOCK_END", "CODE_BLOCK_ERRCHAR", "PYTHON_LINE_ERRCHAR", 
                      "PYTHON_LINE_END", "PYTHON_EXPR_ERRCHAR", "PYTHON_LINE_NL" ]

    RULE_col_file = 0
    RULE_page_imports = 1
    RULE_model_imports = 2
    RULE_import_source = 3
    RULE_id_or_kw = 4
    RULE_classname = 5
    RULE_field_list_expr = 6
    RULE_field_list_expr_field = 7
    RULE_write_mode_expr = 8
    RULE_python_code = 9
    RULE_code_line = 10
    RULE_code_block = 11
    RULE_xml_content = 12
    RULE_xml_element = 13
    RULE_xml_name = 14
    RULE_xml_name_end = 15
    RULE_xml_tag_name = 16
    RULE_xml_attribute = 17
    RULE_xml_chardata = 18
    RULE_cs_annotation = 19
    RULE_an_filer = 20
    RULE_an_langs = 21
    RULE_an_langs_list = 22
    RULE_an_suit = 23
    RULE_an_suit_app_name = 24
    RULE_col = 25
    RULE_col_str_expr = 26
    RULE_col_header = 27
    RULE_col_header_line_separator = 28
    RULE_col_verbose_name = 29
    RULE_verbose_name_part = 30
    RULE_col_base_name = 31
    RULE_col_name = 32
    RULE_col_field = 33
    RULE_col_field_expr_or_def = 34
    RULE_col_field_extend = 35
    RULE_col_field_extend_append = 36
    RULE_wrong_field_type = 37
    RULE_col_field_expr = 38
    RULE_col_field_expr_marker = 39
    RULE_col_feild_expr_code = 40
    RULE_string_or_quoted = 41
    RULE_col_field_help_text = 42
    RULE_col_field_vrebose_name = 43
    RULE_col_field_name = 44
    RULE_col_modifier = 45
    RULE_col_field_def = 46
    RULE_field_longtext = 47
    RULE_field_html = 48
    RULE_field_html_media = 49
    RULE_field_float = 50
    RULE_field_decimal = 51
    RULE_field_date = 52
    RULE_field_datetime = 53
    RULE_field_create_time = 54
    RULE_field_update_time = 55
    RULE_field_file = 56
    RULE_field_filer_file = 57
    RULE_field_filer_folder = 58
    RULE_field_text = 59
    RULE_field_text_size = 60
    RULE_field_text_choices = 61
    RULE_field_text_choice = 62
    RULE_field_text_choice_val = 63
    RULE_field_text_choice_key = 64
    RULE_field_int = 65
    RULE_field_int_choices = 66
    RULE_field_int_choice = 67
    RULE_field_int_choice_val = 68
    RULE_field_int_choice_key = 69
    RULE_field_slug = 70
    RULE_field_slug_ref_field = 71
    RULE_field_slug_ref_field_id = 72
    RULE_field_bool = 73
    RULE_field_bool_default = 74
    RULE_field_image = 75
    RULE_filer_image_type = 76
    RULE_field_image_sizes = 77
    RULE_field_image_size = 78
    RULE_field_image_size_dimensions = 79
    RULE_field_image_size_name = 80
    RULE_field_image_filters = 81
    RULE_field_image_filter = 82
    RULE_field_relation = 83
    RULE_field_relation_type = 84
    RULE_field_relation_target_ref = 85
    RULE_field_relation_target_class = 86
    RULE_field_relation_related_name = 87
    RULE_model_annotation = 88
    RULE_an_sortable = 89
    RULE_an_sortable_field_name = 90
    RULE_an_order = 91
    RULE_an_order_fields = 92
    RULE_an_rest = 93
    RULE_an_rest_config = 94
    RULE_an_rest_main_part = 95
    RULE_an_rest_discriminator = 96
    RULE_an_rest_i18n = 97
    RULE_an_rest_query = 98
    RULE_an_rest_on_create = 99
    RULE_an_rest_read_only = 100
    RULE_an_rest_user_field = 101
    RULE_an_rest_fields = 102
    RULE_an_rest_fields_write_mode = 103
    RULE_an_rest_auth = 104
    RULE_an_rest_auth_type = 105
    RULE_an_rest_auth_token_model = 106
    RULE_an_rest_auth_token_class = 107
    RULE_an_rest_annotate = 108
    RULE_an_rest_annotate_count = 109
    RULE_an_rest_annotate_count_field = 110
    RULE_an_rest_annotate_count_alias = 111
    RULE_an_rest_inline = 112
    RULE_an_rest_inline_decl = 113
    RULE_an_rest_inline_name = 114
    RULE_an_api = 115
    RULE_an_api_all = 116
    RULE_an_api_name = 117
    RULE_an_clean = 118
    RULE_an_pre_save = 119
    RULE_an_post_save = 120
    RULE_an_pre_delete = 121
    RULE_an_post_delete = 122
    RULE_an_m2m_changed = 123
    RULE_an_mixin = 124
    RULE_an_date_tree = 125
    RULE_an_date_tree_field = 126
    RULE_an_tree = 127
    RULE_an_tree_poly = 128
    RULE_an_admin = 129
    RULE_an_admin_js = 130
    RULE_an_admin_css = 131
    RULE_an_admin_css_file_name = 132
    RULE_an_admin_js_file_name = 133
    RULE_an_admin_inlines = 134
    RULE_an_admin_inline = 135
    RULE_inline_name = 136
    RULE_inline_type = 137
    RULE_inline_extra = 138
    RULE_inline_fields = 139
    RULE_an_admin_tabs = 140
    RULE_an_admin_tab = 141
    RULE_tab_name = 142
    RULE_tab_verbose_name = 143
    RULE_an_admin_list = 144
    RULE_an_admin_read_only = 145
    RULE_an_admin_list_editable = 146
    RULE_an_admin_list_filter = 147
    RULE_an_admin_list_search = 148
    RULE_an_admin_fields = 149
    RULE_page = 150
    RULE_page_code = 151
    RULE_page_header = 152
    RULE_page_base = 153
    RULE_page_alias = 154
    RULE_page_alias_name = 155
    RULE_page_element = 156
    RULE_page_template = 157
    RULE_template_name = 158
    RULE_file_name_part = 159
    RULE_page_url = 160
    RULE_url_part = 161
    RULE_url_param = 162
    RULE_url_segment = 163
    RULE_url_segments = 164
    RULE_page_name = 165
    RULE_page_field = 166
    RULE_page_field_name = 167
    RULE_page_field_code = 168

    ruleNames =  [ "col_file", "page_imports", "model_imports", "import_source", 
                   "id_or_kw", "classname", "field_list_expr", "field_list_expr_field", 
                   "write_mode_expr", "python_code", "code_line", "code_block", 
                   "xml_content", "xml_element", "xml_name", "xml_name_end", 
                   "xml_tag_name", "xml_attribute", "xml_chardata", "cs_annotation", 
                   "an_filer", "an_langs", "an_langs_list", "an_suit", "an_suit_app_name", 
                   "col", "col_str_expr", "col_header", "col_header_line_separator", 
                   "col_verbose_name", "verbose_name_part", "col_base_name", 
                   "col_name", "col_field", "col_field_expr_or_def", "col_field_extend", 
                   "col_field_extend_append", "wrong_field_type", "col_field_expr", 
                   "col_field_expr_marker", "col_feild_expr_code", "string_or_quoted", 
                   "col_field_help_text", "col_field_vrebose_name", "col_field_name", 
                   "col_modifier", "col_field_def", "field_longtext", "field_html", 
                   "field_html_media", "field_float", "field_decimal", "field_date", 
                   "field_datetime", "field_create_time", "field_update_time", 
                   "field_file", "field_filer_file", "field_filer_folder", 
                   "field_text", "field_text_size", "field_text_choices", 
                   "field_text_choice", "field_text_choice_val", "field_text_choice_key", 
                   "field_int", "field_int_choices", "field_int_choice", 
                   "field_int_choice_val", "field_int_choice_key", "field_slug", 
                   "field_slug_ref_field", "field_slug_ref_field_id", "field_bool", 
                   "field_bool_default", "field_image", "filer_image_type", 
                   "field_image_sizes", "field_image_size", "field_image_size_dimensions", 
                   "field_image_size_name", "field_image_filters", "field_image_filter", 
                   "field_relation", "field_relation_type", "field_relation_target_ref", 
                   "field_relation_target_class", "field_relation_related_name", 
                   "model_annotation", "an_sortable", "an_sortable_field_name", 
                   "an_order", "an_order_fields", "an_rest", "an_rest_config", 
                   "an_rest_main_part", "an_rest_discriminator", "an_rest_i18n", 
                   "an_rest_query", "an_rest_on_create", "an_rest_read_only", 
                   "an_rest_user_field", "an_rest_fields", "an_rest_fields_write_mode", 
                   "an_rest_auth", "an_rest_auth_type", "an_rest_auth_token_model", 
                   "an_rest_auth_token_class", "an_rest_annotate", "an_rest_annotate_count", 
                   "an_rest_annotate_count_field", "an_rest_annotate_count_alias", 
                   "an_rest_inline", "an_rest_inline_decl", "an_rest_inline_name", 
                   "an_api", "an_api_all", "an_api_name", "an_clean", "an_pre_save", 
                   "an_post_save", "an_pre_delete", "an_post_delete", "an_m2m_changed", 
                   "an_mixin", "an_date_tree", "an_date_tree_field", "an_tree", 
                   "an_tree_poly", "an_admin", "an_admin_js", "an_admin_css", 
                   "an_admin_css_file_name", "an_admin_js_file_name", "an_admin_inlines", 
                   "an_admin_inline", "inline_name", "inline_type", "inline_extra", 
                   "inline_fields", "an_admin_tabs", "an_admin_tab", "tab_name", 
                   "tab_verbose_name", "an_admin_list", "an_admin_read_only", 
                   "an_admin_list_editable", "an_admin_list_filter", "an_admin_list_search", 
                   "an_admin_fields", "page", "page_code", "page_header", 
                   "page_base", "page_alias", "page_alias_name", "page_element", 
                   "page_template", "template_name", "file_name_part", "page_url", 
                   "url_part", "url_param", "url_segment", "url_segments", 
                   "page_name", "page_field", "page_field_name", "page_field_code" ]

    EOF = Token.EOF
    AN_TREE=1
    AN_DATE_TREE=2
    AN_MIXIN=3
    AN_M2M_CHANGED=4
    AN_POST_DELETE=5
    AN_PRE_DELETE=6
    AN_POST_SAVE=7
    AN_PRE_SAVE=8
    AN_CLEAN=9
    AN_API=10
    AN_REST=11
    AN_ORDER=12
    AN_SORTABLE=13
    AN_LANGS=14
    AN_FILER=15
    AN_ADMIN=16
    AN_SUIT=17
    WRITE_MODE=18
    BOOL=19
    KW_POLY_LIST=20
    KW_CSS=21
    KW_JS=22
    KW_INLINE_TYPE=23
    KW_AUTH_TYPE=24
    KW_INLINE=25
    KW_TYPE=26
    KW_USER_FIELD=27
    KW_ANNOTATE=28
    KW_ON_CREATE=29
    KW_QUERY=30
    KW_AUTH=31
    KW_COUNT=32
    KW_I18N=33
    KW_EXTRA=34
    KW_TABS=35
    KW_LIST=36
    KW_READ_ONLY=37
    KW_LIST_EDITABLE=38
    KW_LIST_FILTER=39
    KW_LIST_SEARCH=40
    KW_FIELDS=41
    KW_IMPORT=42
    KW_AS=43
    COL_FIELD_TYPE_LONGTEXT=44
    COL_FIELD_TYPE_HTML=45
    COL_FIELD_TYPE_HTML_MEDIA=46
    COL_FIELD_TYPE_FLOAT=47
    COL_FIELD_TYPE_DECIMAL=48
    COL_FIELD_TYPE_DATE=49
    COL_FIELD_TYPE_DATETIME=50
    COL_FIELD_TYPE_CREATE_TIME=51
    COL_FIELD_TYPE_UPDATE_TIME=52
    COL_FIELD_TYPE_IMAGE=53
    COL_FIELD_TYPE_FILE=54
    COL_FIELD_TYPE_FILER_IMAGE=55
    COL_FIELD_TYPE_FILER_FILE=56
    COL_FIELD_TYPE_FILER_FOLDER=57
    COL_FIELD_TYPE_FILER_IMAGE_FOLDER=58
    COL_FIELD_TYPE_TEXT=59
    COL_FIELD_TYPE_INT=60
    COL_FIELD_TYPE_SLUG=61
    COL_FIELD_TYPE_BOOL=62
    COL_FIELD_TYPE_ONE=63
    COL_FIELD_TYPE_ONE2ONE=64
    COL_FIELD_TYPE_MANY=65
    COL_FIELD_CHOICES=66
    NL=67
    ID=68
    DIGIT=69
    SIZE2D=70
    LT=71
    GT=72
    COLON=73
    EXCLUDE=74
    BRACE_OPEN=75
    BRACE_CLOSE=76
    SQ_BRACE_OPEN=77
    SQ_BRACE_CLOSE=78
    QUESTION_MARK=79
    UNDERSCORE=80
    DASH=81
    COMA=82
    DOT=83
    HASH=84
    SLASH=85
    EQUALS=86
    DOLLAR=87
    AMP=88
    EXCLAM=89
    STAR=90
    APPROX=91
    PIPE=92
    STRING_DQ=93
    STRING_SQ=94
    COMMENT_LINE=95
    COMMENT_BLOCK=96
    UNICODE=97
    WS=98
    COL_FIELD_CALCULATED=99
    ASSIGN=100
    ASSIGN_STATIC=101
    CODE_BLOCK_START=102
    PYTHON_CODE=103
    CODE_BLOCK_END=104
    CODE_BLOCK_ERRCHAR=105
    PYTHON_LINE_ERRCHAR=106
    PYTHON_LINE_END=107
    PYTHON_EXPR_ERRCHAR=108
    PYTHON_LINE_NL=109

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Col_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ZmeiLangParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def cs_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Cs_annotationContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Cs_annotationContext,i)


        def page_imports(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_importsContext,0)


        def page(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.PageContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.PageContext,i)


        def model_imports(self):
            return self.getTypedRuleContext(ZmeiLangParser.Model_importsContext,0)


        def col(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.ColContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.ColContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_file" ):
                listener.enterCol_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_file" ):
                listener.exitCol_file(self)




    def col_file(self):

        localctx = ZmeiLangParser.Col_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_col_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 338
                    self.match(ZmeiLangParser.NL) 
                self.state = 343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 347
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 344
                    self.cs_annotation() 
                self.state = 349
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 350
                self.page_imports()


            self.state = 356
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 353
                    self.match(ZmeiLangParser.NL) 
                self.state = 358
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.SQ_BRACE_OPEN:
                self.state = 359
                self.page()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.KW_IMPORT:
                self.state = 365
                self.model_imports()


            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.HASH:
                self.state = 368
                self.col()
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.NL:
                self.state = 374
                self.match(ZmeiLangParser.NL)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 380
            self.match(ZmeiLangParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_importsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(ZmeiLangParser.KW_IMPORT, 0)

        def import_source(self):
            return self.getTypedRuleContext(ZmeiLangParser.Import_sourceContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_imports

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_imports" ):
                listener.enterPage_imports(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_imports" ):
                listener.exitPage_imports(self)




    def page_imports(self):

        localctx = ZmeiLangParser.Page_importsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_page_imports)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(ZmeiLangParser.KW_IMPORT)
            self.state = 383
            self.import_source()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_importsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(ZmeiLangParser.KW_IMPORT, 0)

        def import_source(self):
            return self.getTypedRuleContext(ZmeiLangParser.Import_sourceContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_model_imports

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_imports" ):
                listener.enterModel_imports(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_imports" ):
                listener.exitModel_imports(self)




    def model_imports(self):

        localctx = ZmeiLangParser.Model_importsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_model_imports)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(ZmeiLangParser.KW_IMPORT)
            self.state = 386
            self.import_source()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(ZmeiLangParser.Code_blockContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_import_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_source" ):
                listener.enterImport_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_source" ):
                listener.exitImport_source(self)




    def import_source(self):

        localctx = ZmeiLangParser.Import_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_or_kwContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ZmeiLangParser.ID, 0)

        def BOOL(self):
            return self.getToken(ZmeiLangParser.BOOL, 0)

        def WRITE_MODE(self):
            return self.getToken(ZmeiLangParser.WRITE_MODE, 0)

        def KW_POLY_LIST(self):
            return self.getToken(ZmeiLangParser.KW_POLY_LIST, 0)

        def KW_CSS(self):
            return self.getToken(ZmeiLangParser.KW_CSS, 0)

        def KW_JS(self):
            return self.getToken(ZmeiLangParser.KW_JS, 0)

        def KW_INLINE_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_INLINE_TYPE, 0)

        def KW_AUTH_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_AUTH_TYPE, 0)

        def KW_INLINE(self):
            return self.getToken(ZmeiLangParser.KW_INLINE, 0)

        def KW_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_TYPE, 0)

        def KW_USER_FIELD(self):
            return self.getToken(ZmeiLangParser.KW_USER_FIELD, 0)

        def KW_ANNOTATE(self):
            return self.getToken(ZmeiLangParser.KW_ANNOTATE, 0)

        def KW_ON_CREATE(self):
            return self.getToken(ZmeiLangParser.KW_ON_CREATE, 0)

        def KW_QUERY(self):
            return self.getToken(ZmeiLangParser.KW_QUERY, 0)

        def KW_AUTH(self):
            return self.getToken(ZmeiLangParser.KW_AUTH, 0)

        def KW_COUNT(self):
            return self.getToken(ZmeiLangParser.KW_COUNT, 0)

        def KW_I18N(self):
            return self.getToken(ZmeiLangParser.KW_I18N, 0)

        def KW_EXTRA(self):
            return self.getToken(ZmeiLangParser.KW_EXTRA, 0)

        def KW_TABS(self):
            return self.getToken(ZmeiLangParser.KW_TABS, 0)

        def KW_LIST(self):
            return self.getToken(ZmeiLangParser.KW_LIST, 0)

        def KW_READ_ONLY(self):
            return self.getToken(ZmeiLangParser.KW_READ_ONLY, 0)

        def KW_LIST_EDITABLE(self):
            return self.getToken(ZmeiLangParser.KW_LIST_EDITABLE, 0)

        def KW_LIST_FILTER(self):
            return self.getToken(ZmeiLangParser.KW_LIST_FILTER, 0)

        def KW_LIST_SEARCH(self):
            return self.getToken(ZmeiLangParser.KW_LIST_SEARCH, 0)

        def KW_FIELDS(self):
            return self.getToken(ZmeiLangParser.KW_FIELDS, 0)

        def KW_IMPORT(self):
            return self.getToken(ZmeiLangParser.KW_IMPORT, 0)

        def KW_AS(self):
            return self.getToken(ZmeiLangParser.KW_AS, 0)

        def COL_FIELD_TYPE_LONGTEXT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, 0)

        def COL_FIELD_TYPE_HTML(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_HTML, 0)

        def COL_FIELD_TYPE_HTML_MEDIA(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, 0)

        def COL_FIELD_TYPE_FLOAT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FLOAT, 0)

        def COL_FIELD_TYPE_DECIMAL(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, 0)

        def COL_FIELD_TYPE_DATE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DATE, 0)

        def COL_FIELD_TYPE_DATETIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DATETIME, 0)

        def COL_FIELD_TYPE_CREATE_TIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, 0)

        def COL_FIELD_TYPE_UPDATE_TIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, 0)

        def COL_FIELD_TYPE_IMAGE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_IMAGE, 0)

        def COL_FIELD_TYPE_FILE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILE, 0)

        def COL_FIELD_TYPE_FILER_IMAGE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, 0)

        def COL_FIELD_TYPE_FILER_FILE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, 0)

        def COL_FIELD_TYPE_FILER_FOLDER(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, 0)

        def COL_FIELD_TYPE_FILER_IMAGE_FOLDER(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, 0)

        def COL_FIELD_TYPE_TEXT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_TEXT, 0)

        def COL_FIELD_TYPE_INT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_INT, 0)

        def COL_FIELD_TYPE_SLUG(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_SLUG, 0)

        def COL_FIELD_TYPE_BOOL(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_BOOL, 0)

        def COL_FIELD_TYPE_ONE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_ONE, 0)

        def COL_FIELD_TYPE_ONE2ONE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, 0)

        def COL_FIELD_TYPE_MANY(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_MANY, 0)

        def COL_FIELD_CHOICES(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_CHOICES, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_id_or_kw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_or_kw" ):
                listener.enterId_or_kw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_or_kw" ):
                listener.exitId_or_kw(self)




    def id_or_kw(self):

        localctx = ZmeiLangParser.Id_or_kwContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_id_or_kw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            _la = self._input.LA(1)
            if not(((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ZmeiLangParser.WRITE_MODE - 18)) | (1 << (ZmeiLangParser.BOOL - 18)) | (1 << (ZmeiLangParser.KW_POLY_LIST - 18)) | (1 << (ZmeiLangParser.KW_CSS - 18)) | (1 << (ZmeiLangParser.KW_JS - 18)) | (1 << (ZmeiLangParser.KW_INLINE_TYPE - 18)) | (1 << (ZmeiLangParser.KW_AUTH_TYPE - 18)) | (1 << (ZmeiLangParser.KW_INLINE - 18)) | (1 << (ZmeiLangParser.KW_TYPE - 18)) | (1 << (ZmeiLangParser.KW_USER_FIELD - 18)) | (1 << (ZmeiLangParser.KW_ANNOTATE - 18)) | (1 << (ZmeiLangParser.KW_ON_CREATE - 18)) | (1 << (ZmeiLangParser.KW_QUERY - 18)) | (1 << (ZmeiLangParser.KW_AUTH - 18)) | (1 << (ZmeiLangParser.KW_COUNT - 18)) | (1 << (ZmeiLangParser.KW_I18N - 18)) | (1 << (ZmeiLangParser.KW_EXTRA - 18)) | (1 << (ZmeiLangParser.KW_TABS - 18)) | (1 << (ZmeiLangParser.KW_LIST - 18)) | (1 << (ZmeiLangParser.KW_READ_ONLY - 18)) | (1 << (ZmeiLangParser.KW_LIST_EDITABLE - 18)) | (1 << (ZmeiLangParser.KW_LIST_FILTER - 18)) | (1 << (ZmeiLangParser.KW_LIST_SEARCH - 18)) | (1 << (ZmeiLangParser.KW_FIELDS - 18)) | (1 << (ZmeiLangParser.KW_IMPORT - 18)) | (1 << (ZmeiLangParser.KW_AS - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FLOAT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DECIMAL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATETIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_TEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_INT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_SLUG - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_BOOL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 18)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 18)) | (1 << (ZmeiLangParser.ID - 18)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Id_or_kwContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.DOT)
            else:
                return self.getToken(ZmeiLangParser.DOT, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_classname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassname" ):
                listener.enterClassname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassname" ):
                listener.exitClassname(self)




    def classname(self):

        localctx = ZmeiLangParser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classname)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.id_or_kw()
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.DOT:
                self.state = 393
                self.match(ZmeiLangParser.DOT)
                self.state = 394
                self.id_or_kw()
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_list_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(ZmeiLangParser.STAR, 0)

        def DOT(self):
            return self.getToken(ZmeiLangParser.DOT, 0)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def EXCLUDE(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.EXCLUDE)
            else:
                return self.getToken(ZmeiLangParser.EXCLUDE, i)

        def field_list_expr_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_list_expr_fieldContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_list_expr_fieldContext,i)


        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_list_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_list_expr" ):
                listener.enterField_list_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_list_expr" ):
                listener.exitField_list_expr(self)




    def field_list_expr(self):

        localctx = ZmeiLangParser.Field_list_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_field_list_expr)
        self._la = 0 # Token type
        try:
            self.state = 423
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.DOT, ZmeiLangParser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ZmeiLangParser.DOT:
                    self.state = 400
                    self.match(ZmeiLangParser.DOT)


                self.state = 403
                self.match(ZmeiLangParser.STAR)
                self.state = 409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 404
                        self.match(ZmeiLangParser.COMA)
                        self.state = 405
                        self.match(ZmeiLangParser.EXCLUDE)
                        self.state = 406
                        self.field_list_expr_field() 
                    self.state = 411
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                pass
            elif token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.id_or_kw()
                self.state = 420
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 413
                        self.match(ZmeiLangParser.COMA)
                        self.state = 415
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==ZmeiLangParser.EXCLUDE:
                            self.state = 414
                            self.match(ZmeiLangParser.EXCLUDE)


                        self.state = 417
                        self.field_list_expr_field() 
                    self.state = 422
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_list_expr_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.STAR)
            else:
                return self.getToken(ZmeiLangParser.STAR, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_list_expr_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_list_expr_field" ):
                listener.enterField_list_expr_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_list_expr_field" ):
                listener.exitField_list_expr_field(self)




    def field_list_expr_field(self):

        localctx = ZmeiLangParser.Field_list_expr_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_field_list_expr_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.STAR:
                self.state = 425
                self.match(ZmeiLangParser.STAR)


            self.state = 428
            self.id_or_kw()
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.STAR:
                self.state = 429
                self.match(ZmeiLangParser.STAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Write_mode_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQ_BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.SQ_BRACE_OPEN, 0)

        def WRITE_MODE(self):
            return self.getToken(ZmeiLangParser.WRITE_MODE, 0)

        def SQ_BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.SQ_BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_write_mode_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_mode_expr" ):
                listener.enterWrite_mode_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_mode_expr" ):
                listener.exitWrite_mode_expr(self)




    def write_mode_expr(self):

        localctx = ZmeiLangParser.Write_mode_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_write_mode_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(ZmeiLangParser.SQ_BRACE_OPEN)
            self.state = 433
            self.match(ZmeiLangParser.WRITE_MODE)
            self.state = 434
            self.match(ZmeiLangParser.SQ_BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Python_codeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(ZmeiLangParser.Code_blockContext,0)


        def code_line(self):
            return self.getTypedRuleContext(ZmeiLangParser.Code_lineContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_python_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPython_code" ):
                listener.enterPython_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPython_code" ):
                listener.exitPython_code(self)




    def python_code(self):

        localctx = ZmeiLangParser.Python_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_python_code)
        try:
            self.state = 438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.CODE_BLOCK_START]:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.code_block()
                pass
            elif token in [ZmeiLangParser.ASSIGN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.code_line()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_lineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(ZmeiLangParser.ASSIGN, 0)

        def PYTHON_CODE(self):
            return self.getToken(ZmeiLangParser.PYTHON_CODE, 0)

        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_code_line

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_line" ):
                listener.enterCode_line(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_line" ):
                listener.exitCode_line(self)




    def code_line(self):

        localctx = ZmeiLangParser.Code_lineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_code_line)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(ZmeiLangParser.ASSIGN)
            self.state = 441
            self.match(ZmeiLangParser.PYTHON_CODE)
            self.state = 442
            self.match(ZmeiLangParser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Code_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CODE_BLOCK_START(self):
            return self.getToken(ZmeiLangParser.CODE_BLOCK_START, 0)

        def PYTHON_CODE(self):
            return self.getToken(ZmeiLangParser.PYTHON_CODE, 0)

        def CODE_BLOCK_END(self):
            return self.getToken(ZmeiLangParser.CODE_BLOCK_END, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_code_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCode_block" ):
                listener.enterCode_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCode_block" ):
                listener.exitCode_block(self)




    def code_block(self):

        localctx = ZmeiLangParser.Code_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_code_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(ZmeiLangParser.CODE_BLOCK_START)
            self.state = 445
            self.match(ZmeiLangParser.PYTHON_CODE)
            self.state = 446
            self.match(ZmeiLangParser.CODE_BLOCK_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_contentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_chardata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Xml_chardataContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Xml_chardataContext,i)


        def xml_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Xml_elementContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Xml_elementContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_content

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_content" ):
                listener.enterXml_content(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_content" ):
                listener.exitXml_content(self)




    def xml_content(self):

        localctx = ZmeiLangParser.Xml_contentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_xml_content)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ZmeiLangParser.WRITE_MODE - 18)) | (1 << (ZmeiLangParser.BOOL - 18)) | (1 << (ZmeiLangParser.KW_POLY_LIST - 18)) | (1 << (ZmeiLangParser.KW_CSS - 18)) | (1 << (ZmeiLangParser.KW_JS - 18)) | (1 << (ZmeiLangParser.KW_INLINE_TYPE - 18)) | (1 << (ZmeiLangParser.KW_AUTH_TYPE - 18)) | (1 << (ZmeiLangParser.KW_INLINE - 18)) | (1 << (ZmeiLangParser.KW_TYPE - 18)) | (1 << (ZmeiLangParser.KW_USER_FIELD - 18)) | (1 << (ZmeiLangParser.KW_ANNOTATE - 18)) | (1 << (ZmeiLangParser.KW_ON_CREATE - 18)) | (1 << (ZmeiLangParser.KW_QUERY - 18)) | (1 << (ZmeiLangParser.KW_AUTH - 18)) | (1 << (ZmeiLangParser.KW_COUNT - 18)) | (1 << (ZmeiLangParser.KW_I18N - 18)) | (1 << (ZmeiLangParser.KW_EXTRA - 18)) | (1 << (ZmeiLangParser.KW_TABS - 18)) | (1 << (ZmeiLangParser.KW_LIST - 18)) | (1 << (ZmeiLangParser.KW_READ_ONLY - 18)) | (1 << (ZmeiLangParser.KW_LIST_EDITABLE - 18)) | (1 << (ZmeiLangParser.KW_LIST_FILTER - 18)) | (1 << (ZmeiLangParser.KW_LIST_SEARCH - 18)) | (1 << (ZmeiLangParser.KW_FIELDS - 18)) | (1 << (ZmeiLangParser.KW_IMPORT - 18)) | (1 << (ZmeiLangParser.KW_AS - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FLOAT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DECIMAL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATETIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_TEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_INT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_SLUG - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_BOOL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 18)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 18)) | (1 << (ZmeiLangParser.NL - 18)) | (1 << (ZmeiLangParser.ID - 18)))) != 0):
                self.state = 448
                self.xml_chardata()


            self.state = 457
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 451
                    self.xml_element()
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ZmeiLangParser.WRITE_MODE - 18)) | (1 << (ZmeiLangParser.BOOL - 18)) | (1 << (ZmeiLangParser.KW_POLY_LIST - 18)) | (1 << (ZmeiLangParser.KW_CSS - 18)) | (1 << (ZmeiLangParser.KW_JS - 18)) | (1 << (ZmeiLangParser.KW_INLINE_TYPE - 18)) | (1 << (ZmeiLangParser.KW_AUTH_TYPE - 18)) | (1 << (ZmeiLangParser.KW_INLINE - 18)) | (1 << (ZmeiLangParser.KW_TYPE - 18)) | (1 << (ZmeiLangParser.KW_USER_FIELD - 18)) | (1 << (ZmeiLangParser.KW_ANNOTATE - 18)) | (1 << (ZmeiLangParser.KW_ON_CREATE - 18)) | (1 << (ZmeiLangParser.KW_QUERY - 18)) | (1 << (ZmeiLangParser.KW_AUTH - 18)) | (1 << (ZmeiLangParser.KW_COUNT - 18)) | (1 << (ZmeiLangParser.KW_I18N - 18)) | (1 << (ZmeiLangParser.KW_EXTRA - 18)) | (1 << (ZmeiLangParser.KW_TABS - 18)) | (1 << (ZmeiLangParser.KW_LIST - 18)) | (1 << (ZmeiLangParser.KW_READ_ONLY - 18)) | (1 << (ZmeiLangParser.KW_LIST_EDITABLE - 18)) | (1 << (ZmeiLangParser.KW_LIST_FILTER - 18)) | (1 << (ZmeiLangParser.KW_LIST_SEARCH - 18)) | (1 << (ZmeiLangParser.KW_FIELDS - 18)) | (1 << (ZmeiLangParser.KW_IMPORT - 18)) | (1 << (ZmeiLangParser.KW_AS - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FLOAT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DECIMAL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATETIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_TEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_INT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_SLUG - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_BOOL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 18)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 18)) | (1 << (ZmeiLangParser.NL - 18)) | (1 << (ZmeiLangParser.ID - 18)))) != 0):
                        self.state = 452
                        self.xml_chardata()

             
                self.state = 459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.LT)
            else:
                return self.getToken(ZmeiLangParser.LT, i)

        def xml_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_nameContext,0)


        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.GT)
            else:
                return self.getToken(ZmeiLangParser.GT, i)

        def xml_content(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_contentContext,0)


        def SLASH(self):
            return self.getToken(ZmeiLangParser.SLASH, 0)

        def xml_name_end(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_name_endContext,0)


        def xml_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Xml_attributeContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Xml_attributeContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_element" ):
                listener.enterXml_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_element" ):
                listener.exitXml_element(self)




    def xml_element(self):

        localctx = ZmeiLangParser.Xml_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_xml_element)
        self._la = 0 # Token type
        try:
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 460
                self.match(ZmeiLangParser.LT)
                self.state = 461
                self.xml_name()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ZmeiLangParser.WRITE_MODE - 18)) | (1 << (ZmeiLangParser.BOOL - 18)) | (1 << (ZmeiLangParser.KW_POLY_LIST - 18)) | (1 << (ZmeiLangParser.KW_CSS - 18)) | (1 << (ZmeiLangParser.KW_JS - 18)) | (1 << (ZmeiLangParser.KW_INLINE_TYPE - 18)) | (1 << (ZmeiLangParser.KW_AUTH_TYPE - 18)) | (1 << (ZmeiLangParser.KW_INLINE - 18)) | (1 << (ZmeiLangParser.KW_TYPE - 18)) | (1 << (ZmeiLangParser.KW_USER_FIELD - 18)) | (1 << (ZmeiLangParser.KW_ANNOTATE - 18)) | (1 << (ZmeiLangParser.KW_ON_CREATE - 18)) | (1 << (ZmeiLangParser.KW_QUERY - 18)) | (1 << (ZmeiLangParser.KW_AUTH - 18)) | (1 << (ZmeiLangParser.KW_COUNT - 18)) | (1 << (ZmeiLangParser.KW_I18N - 18)) | (1 << (ZmeiLangParser.KW_EXTRA - 18)) | (1 << (ZmeiLangParser.KW_TABS - 18)) | (1 << (ZmeiLangParser.KW_LIST - 18)) | (1 << (ZmeiLangParser.KW_READ_ONLY - 18)) | (1 << (ZmeiLangParser.KW_LIST_EDITABLE - 18)) | (1 << (ZmeiLangParser.KW_LIST_FILTER - 18)) | (1 << (ZmeiLangParser.KW_LIST_SEARCH - 18)) | (1 << (ZmeiLangParser.KW_FIELDS - 18)) | (1 << (ZmeiLangParser.KW_IMPORT - 18)) | (1 << (ZmeiLangParser.KW_AS - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FLOAT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DECIMAL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATETIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_TEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_INT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_SLUG - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_BOOL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 18)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 18)) | (1 << (ZmeiLangParser.ID - 18)))) != 0):
                    self.state = 462
                    self.xml_attribute()
                    self.state = 467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 468
                self.match(ZmeiLangParser.GT)
                self.state = 469
                self.xml_content()
                self.state = 470
                self.match(ZmeiLangParser.LT)
                self.state = 471
                self.match(ZmeiLangParser.SLASH)
                self.state = 472
                self.xml_name_end()
                self.state = 473
                self.match(ZmeiLangParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.match(ZmeiLangParser.LT)
                self.state = 476
                self.xml_name()
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ZmeiLangParser.WRITE_MODE - 18)) | (1 << (ZmeiLangParser.BOOL - 18)) | (1 << (ZmeiLangParser.KW_POLY_LIST - 18)) | (1 << (ZmeiLangParser.KW_CSS - 18)) | (1 << (ZmeiLangParser.KW_JS - 18)) | (1 << (ZmeiLangParser.KW_INLINE_TYPE - 18)) | (1 << (ZmeiLangParser.KW_AUTH_TYPE - 18)) | (1 << (ZmeiLangParser.KW_INLINE - 18)) | (1 << (ZmeiLangParser.KW_TYPE - 18)) | (1 << (ZmeiLangParser.KW_USER_FIELD - 18)) | (1 << (ZmeiLangParser.KW_ANNOTATE - 18)) | (1 << (ZmeiLangParser.KW_ON_CREATE - 18)) | (1 << (ZmeiLangParser.KW_QUERY - 18)) | (1 << (ZmeiLangParser.KW_AUTH - 18)) | (1 << (ZmeiLangParser.KW_COUNT - 18)) | (1 << (ZmeiLangParser.KW_I18N - 18)) | (1 << (ZmeiLangParser.KW_EXTRA - 18)) | (1 << (ZmeiLangParser.KW_TABS - 18)) | (1 << (ZmeiLangParser.KW_LIST - 18)) | (1 << (ZmeiLangParser.KW_READ_ONLY - 18)) | (1 << (ZmeiLangParser.KW_LIST_EDITABLE - 18)) | (1 << (ZmeiLangParser.KW_LIST_FILTER - 18)) | (1 << (ZmeiLangParser.KW_LIST_SEARCH - 18)) | (1 << (ZmeiLangParser.KW_FIELDS - 18)) | (1 << (ZmeiLangParser.KW_IMPORT - 18)) | (1 << (ZmeiLangParser.KW_AS - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FLOAT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DECIMAL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATETIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_TEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_INT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_SLUG - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_BOOL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 18)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 18)) | (1 << (ZmeiLangParser.ID - 18)))) != 0):
                    self.state = 477
                    self.xml_attribute()
                    self.state = 482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 483
                self.match(ZmeiLangParser.SLASH)
                self.state = 484
                self.match(ZmeiLangParser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_tag_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_tag_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_name" ):
                listener.enterXml_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_name" ):
                listener.exitXml_name(self)




    def xml_name(self):

        localctx = ZmeiLangParser.Xml_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_xml_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.xml_tag_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_name_endContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_tag_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_tag_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_name_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_name_end" ):
                listener.enterXml_name_end(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_name_end" ):
                listener.exitXml_name_end(self)




    def xml_name_end(self):

        localctx = ZmeiLangParser.Xml_name_endContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_xml_name_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.xml_tag_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_tag_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_tag_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_tag_name" ):
                listener.enterXml_tag_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_tag_name" ):
                listener.exitXml_tag_name(self)




    def xml_tag_name(self):

        localctx = ZmeiLangParser.Xml_tag_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_xml_tag_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def code_block(self):
            return self.getTypedRuleContext(ZmeiLangParser.Code_blockContext,0)


        def UNICODE(self):
            return self.getToken(ZmeiLangParser.UNICODE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute" ):
                listener.enterXml_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute" ):
                listener.exitXml_attribute(self)




    def xml_attribute(self):

        localctx = ZmeiLangParser.Xml_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_xml_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.id_or_kw()
            self.state = 495
            self.match(ZmeiLangParser.EQUALS)
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.STRING_DQ]:
                self.state = 496
                self.match(ZmeiLangParser.STRING_DQ)
                pass
            elif token in [ZmeiLangParser.STRING_SQ]:
                self.state = 497
                self.match(ZmeiLangParser.STRING_SQ)
                pass
            elif token in [ZmeiLangParser.CODE_BLOCK_START]:
                self.state = 498
                self.code_block()
                pass
            elif token in [ZmeiLangParser.UNICODE]:
                self.state = 499
                self.match(ZmeiLangParser.UNICODE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_chardataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_xml_chardata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_chardata" ):
                listener.enterXml_chardata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_chardata" ):
                listener.exitXml_chardata(self)




    def xml_chardata(self):

        localctx = ZmeiLangParser.Xml_chardataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_xml_chardata)
        try:
            self.state = 504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.id_or_kw()
                pass
            elif token in [ZmeiLangParser.NL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 503
                self.match(ZmeiLangParser.NL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cs_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_suit(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_suitContext,0)


        def an_langs(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_langsContext,0)


        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_cs_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCs_annotation" ):
                listener.enterCs_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCs_annotation" ):
                listener.exitCs_annotation(self)




    def cs_annotation(self):

        localctx = ZmeiLangParser.Cs_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_cs_annotation)
        try:
            self.state = 509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.AN_SUIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.an_suit()
                pass
            elif token in [ZmeiLangParser.AN_LANGS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.an_langs()
                pass
            elif token in [ZmeiLangParser.NL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 508
                self.match(ZmeiLangParser.NL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_filerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_FILER(self):
            return self.getToken(ZmeiLangParser.AN_FILER, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_filer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_filer" ):
                listener.enterAn_filer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_filer" ):
                listener.exitAn_filer(self)




    def an_filer(self):

        localctx = ZmeiLangParser.An_filerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_an_filer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(ZmeiLangParser.AN_FILER)
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 512
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 513
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_langsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_LANGS(self):
            return self.getToken(ZmeiLangParser.AN_LANGS, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_langs_list(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_langs_listContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_langs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_langs" ):
                listener.enterAn_langs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_langs" ):
                listener.exitAn_langs(self)




    def an_langs(self):

        localctx = ZmeiLangParser.An_langsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_an_langs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(ZmeiLangParser.AN_LANGS)
            self.state = 517
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 518
            self.an_langs_list()
            self.state = 519
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_langs_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.ID)
            else:
                return self.getToken(ZmeiLangParser.ID, i)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_langs_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_langs_list" ):
                listener.enterAn_langs_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_langs_list" ):
                listener.exitAn_langs_list(self)




    def an_langs_list(self):

        localctx = ZmeiLangParser.An_langs_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_an_langs_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(ZmeiLangParser.ID)
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 522
                self.match(ZmeiLangParser.COMA)
                self.state = 523
                self.match(ZmeiLangParser.ID)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_suitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_SUIT(self):
            return self.getToken(ZmeiLangParser.AN_SUIT, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_suit_app_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_suit_app_nameContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_suit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_suit" ):
                listener.enterAn_suit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_suit" ):
                listener.exitAn_suit(self)




    def an_suit(self):

        localctx = ZmeiLangParser.An_suitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_an_suit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(ZmeiLangParser.AN_SUIT)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 530
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 531
                self.an_suit_app_name()
                self.state = 532
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_suit_app_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_suit_app_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_suit_app_name" ):
                listener.enterAn_suit_app_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_suit_app_name" ):
                listener.exitAn_suit_app_name(self)




    def an_suit_app_name(self):

        localctx = ZmeiLangParser.An_suit_app_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_an_suit_app_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_header(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_headerContext,0)


        def col_str_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_str_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def col_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Col_fieldContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Col_fieldContext,i)


        def model_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Model_annotationContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Model_annotationContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol" ):
                listener.enterCol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol" ):
                listener.exitCol(self)




    def col(self):

        localctx = ZmeiLangParser.ColContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_col)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.col_header()
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 539
                self.col_str_expr()


            self.state = 545
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 542
                    self.match(ZmeiLangParser.NL) 
                self.state = 547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ZmeiLangParser.WRITE_MODE) | (1 << ZmeiLangParser.BOOL) | (1 << ZmeiLangParser.KW_POLY_LIST) | (1 << ZmeiLangParser.KW_CSS) | (1 << ZmeiLangParser.KW_JS) | (1 << ZmeiLangParser.KW_INLINE_TYPE) | (1 << ZmeiLangParser.KW_AUTH_TYPE) | (1 << ZmeiLangParser.KW_INLINE) | (1 << ZmeiLangParser.KW_TYPE) | (1 << ZmeiLangParser.KW_USER_FIELD) | (1 << ZmeiLangParser.KW_ANNOTATE) | (1 << ZmeiLangParser.KW_ON_CREATE) | (1 << ZmeiLangParser.KW_QUERY) | (1 << ZmeiLangParser.KW_AUTH) | (1 << ZmeiLangParser.KW_COUNT) | (1 << ZmeiLangParser.KW_I18N) | (1 << ZmeiLangParser.KW_EXTRA) | (1 << ZmeiLangParser.KW_TABS) | (1 << ZmeiLangParser.KW_LIST) | (1 << ZmeiLangParser.KW_READ_ONLY) | (1 << ZmeiLangParser.KW_LIST_EDITABLE) | (1 << ZmeiLangParser.KW_LIST_FILTER) | (1 << ZmeiLangParser.KW_LIST_SEARCH) | (1 << ZmeiLangParser.KW_FIELDS) | (1 << ZmeiLangParser.KW_IMPORT) | (1 << ZmeiLangParser.KW_AS) | (1 << ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_HTML) | (1 << ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FLOAT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DECIMAL) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DATE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DATETIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER) | (1 << ZmeiLangParser.COL_FIELD_TYPE_TEXT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_INT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_SLUG) | (1 << ZmeiLangParser.COL_FIELD_TYPE_BOOL) | (1 << ZmeiLangParser.COL_FIELD_TYPE_ONE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 64)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 64)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 64)) | (1 << (ZmeiLangParser.ID - 64)) | (1 << (ZmeiLangParser.EQUALS - 64)) | (1 << (ZmeiLangParser.DOLLAR - 64)) | (1 << (ZmeiLangParser.AMP - 64)) | (1 << (ZmeiLangParser.EXCLAM - 64)) | (1 << (ZmeiLangParser.STAR - 64)) | (1 << (ZmeiLangParser.APPROX - 64)))) != 0):
                self.state = 548
                self.col_field()
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 557
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 554
                    self.match(ZmeiLangParser.NL) 
                self.state = 559
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 563
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 560
                    self.model_annotation() 
                self.state = 565
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 569
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 566
                    self.match(ZmeiLangParser.NL) 
                self.state = 571
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_str_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def EOF(self):
            return self.getToken(ZmeiLangParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_str_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_str_expr" ):
                listener.enterCol_str_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_str_expr" ):
                listener.exitCol_str_expr(self)




    def col_str_expr(self):

        localctx = ZmeiLangParser.Col_str_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_col_str_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(ZmeiLangParser.EQUALS)
            self.state = 573
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.NL]:
                self.state = 575 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 574
                        self.match(ZmeiLangParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 577 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                pass
            elif token in [ZmeiLangParser.EOF]:
                self.state = 579
                self.match(ZmeiLangParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_headerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(ZmeiLangParser.HASH, 0)

        def col_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_nameContext,0)


        def col_header_line_separator(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_header_line_separatorContext,0)


        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def col_base_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_base_nameContext,0)


        def col_verbose_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_verbose_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_header" ):
                listener.enterCol_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_header" ):
                listener.exitCol_header(self)




    def col_header(self):

        localctx = ZmeiLangParser.Col_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_col_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(ZmeiLangParser.HASH)
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 583
                self.col_base_name()


            self.state = 586
            self.col_name()
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.COLON:
                self.state = 587
                self.col_verbose_name()


            self.state = 590
            self.col_header_line_separator()
            self.state = 591
            self.match(ZmeiLangParser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_header_line_separatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def DASH(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.DASH)
            else:
                return self.getToken(ZmeiLangParser.DASH, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_header_line_separator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_header_line_separator" ):
                listener.enterCol_header_line_separator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_header_line_separator" ):
                listener.exitCol_header_line_separator(self)




    def col_header_line_separator(self):

        localctx = ZmeiLangParser.Col_header_line_separatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_col_header_line_separator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(ZmeiLangParser.NL)
            self.state = 594
            self.match(ZmeiLangParser.DASH)
            self.state = 595
            self.match(ZmeiLangParser.DASH)
            self.state = 597 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 596
                self.match(ZmeiLangParser.DASH)
                self.state = 599 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==ZmeiLangParser.DASH):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_verbose_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def verbose_name_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Verbose_name_partContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Verbose_name_partContext,i)


        def SLASH(self):
            return self.getToken(ZmeiLangParser.SLASH, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_verbose_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_verbose_name" ):
                listener.enterCol_verbose_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_verbose_name" ):
                listener.exitCol_verbose_name(self)




    def col_verbose_name(self):

        localctx = ZmeiLangParser.Col_verbose_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_col_verbose_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(ZmeiLangParser.COLON)
            self.state = 602
            self.verbose_name_part()
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.SLASH:
                self.state = 603
                self.match(ZmeiLangParser.SLASH)
                self.state = 604
                self.verbose_name_part()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Verbose_name_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_verbose_name_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVerbose_name_part" ):
                listener.enterVerbose_name_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVerbose_name_part" ):
                listener.exitVerbose_name_part(self)




    def verbose_name_part(self):

        localctx = ZmeiLangParser.Verbose_name_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_verbose_name_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 607
                self.id_or_kw()
                pass
            elif token in [ZmeiLangParser.STRING_DQ]:
                self.state = 608
                self.match(ZmeiLangParser.STRING_DQ)
                pass
            elif token in [ZmeiLangParser.STRING_SQ]:
                self.state = 609
                self.match(ZmeiLangParser.STRING_SQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_base_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def DASH(self):
            return self.getToken(ZmeiLangParser.DASH, 0)

        def GT(self):
            return self.getToken(ZmeiLangParser.GT, 0)

        def APPROX(self):
            return self.getToken(ZmeiLangParser.APPROX, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_base_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_base_name" ):
                listener.enterCol_base_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_base_name" ):
                listener.exitCol_base_name(self)




    def col_base_name(self):

        localctx = ZmeiLangParser.Col_base_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_col_base_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.id_or_kw()
            self.state = 617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.DASH]:
                self.state = 613
                self.match(ZmeiLangParser.DASH)
                self.state = 614
                self.match(ZmeiLangParser.GT)
                pass
            elif token in [ZmeiLangParser.APPROX]:
                self.state = 615
                self.match(ZmeiLangParser.APPROX)
                self.state = 616
                self.match(ZmeiLangParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_name" ):
                listener.enterCol_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_name" ):
                listener.exitCol_name(self)




    def col_name(self):

        localctx = ZmeiLangParser.Col_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_col_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_field_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_nameContext,0)


        def EOF(self):
            return self.getToken(ZmeiLangParser.EOF, 0)

        def col_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Col_modifierContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Col_modifierContext,i)


        def col_field_expr_or_def(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_expr_or_defContext,0)


        def col_field_vrebose_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_vrebose_nameContext,0)


        def col_field_help_text(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_help_textContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field" ):
                listener.enterCol_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field" ):
                listener.exitCol_field(self)




    def col_field(self):

        localctx = ZmeiLangParser.Col_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_col_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (ZmeiLangParser.EQUALS - 86)) | (1 << (ZmeiLangParser.DOLLAR - 86)) | (1 << (ZmeiLangParser.AMP - 86)) | (1 << (ZmeiLangParser.EXCLAM - 86)) | (1 << (ZmeiLangParser.STAR - 86)) | (1 << (ZmeiLangParser.APPROX - 86)))) != 0):
                self.state = 621
                self.col_modifier()
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 627
            self.col_field_name()
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (ZmeiLangParser.COLON - 73)) | (1 << (ZmeiLangParser.ASSIGN - 73)) | (1 << (ZmeiLangParser.ASSIGN_STATIC - 73)))) != 0):
                self.state = 628
                self.col_field_expr_or_def()


            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.SLASH:
                self.state = 631
                self.col_field_vrebose_name()


            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.QUESTION_MARK:
                self.state = 634
                self.col_field_help_text()


            self.state = 643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.NL]:
                self.state = 638 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 637
                        self.match(ZmeiLangParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 640 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                pass
            elif token in [ZmeiLangParser.EOF]:
                self.state = 642
                self.match(ZmeiLangParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_expr_or_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_field_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_exprContext,0)


        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def col_field_def(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_defContext,0)


        def wrong_field_type(self):
            return self.getTypedRuleContext(ZmeiLangParser.Wrong_field_typeContext,0)


        def col_field_extend(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_extendContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_expr_or_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_expr_or_def" ):
                listener.enterCol_field_expr_or_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_expr_or_def" ):
                listener.exitCol_field_expr_or_def(self)




    def col_field_expr_or_def(self):

        localctx = ZmeiLangParser.Col_field_expr_or_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_col_field_expr_or_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 645
                self.match(ZmeiLangParser.COLON)
                self.state = 646
                self.col_field_def()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ZmeiLangParser.DOT or _la==ZmeiLangParser.CODE_BLOCK_START:
                    self.state = 647
                    self.col_field_extend()


                pass

            elif la_ == 2:
                self.state = 650
                self.match(ZmeiLangParser.COLON)
                self.state = 651
                self.wrong_field_type()
                pass

            elif la_ == 3:
                self.state = 652
                self.col_field_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_extendContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def code_block(self):
            return self.getTypedRuleContext(ZmeiLangParser.Code_blockContext,0)


        def col_field_extend_append(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_extend_appendContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_extend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_extend" ):
                listener.enterCol_field_extend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_extend" ):
                listener.exitCol_field_extend(self)




    def col_field_extend(self):

        localctx = ZmeiLangParser.Col_field_extendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_col_field_extend)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.DOT:
                self.state = 655
                self.col_field_extend_append()


            self.state = 658
            self.code_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_extend_appendContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.DOT)
            else:
                return self.getToken(ZmeiLangParser.DOT, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_extend_append

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_extend_append" ):
                listener.enterCol_field_extend_append(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_extend_append" ):
                listener.exitCol_field_extend_append(self)




    def col_field_extend_append(self):

        localctx = ZmeiLangParser.Col_field_extend_appendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_col_field_extend_append)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(ZmeiLangParser.DOT)
            self.state = 661
            self.match(ZmeiLangParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wrong_field_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_wrong_field_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrong_field_type" ):
                listener.enterWrong_field_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrong_field_type" ):
                listener.exitWrong_field_type(self)




    def wrong_field_type(self):

        localctx = ZmeiLangParser.Wrong_field_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_wrong_field_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_field_expr_marker(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_field_expr_markerContext,0)


        def col_feild_expr_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Col_feild_expr_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_expr" ):
                listener.enterCol_field_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_expr" ):
                listener.exitCol_field_expr(self)




    def col_field_expr(self):

        localctx = ZmeiLangParser.Col_field_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_col_field_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.col_field_expr_marker()
            self.state = 666
            self.col_feild_expr_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_expr_markerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(ZmeiLangParser.ASSIGN, 0)

        def ASSIGN_STATIC(self):
            return self.getToken(ZmeiLangParser.ASSIGN_STATIC, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_expr_marker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_expr_marker" ):
                listener.enterCol_field_expr_marker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_expr_marker" ):
                listener.exitCol_field_expr_marker(self)




    def col_field_expr_marker(self):

        localctx = ZmeiLangParser.Col_field_expr_markerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_col_field_expr_marker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.ASSIGN or _la==ZmeiLangParser.ASSIGN_STATIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_feild_expr_codeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTHON_CODE(self):
            return self.getToken(ZmeiLangParser.PYTHON_CODE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_feild_expr_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_feild_expr_code" ):
                listener.enterCol_feild_expr_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_feild_expr_code" ):
                listener.exitCol_feild_expr_code(self)




    def col_feild_expr_code(self):

        localctx = ZmeiLangParser.Col_feild_expr_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_col_feild_expr_code)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(ZmeiLangParser.PYTHON_CODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_or_quotedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def id_or_kw(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Id_or_kwContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_string_or_quoted

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_or_quoted" ):
                listener.enterString_or_quoted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_or_quoted" ):
                listener.exitString_or_quoted(self)




    def string_or_quoted(self):

        localctx = ZmeiLangParser.String_or_quotedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_string_or_quoted)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 673 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 672
                    self.id_or_kw()
                    self.state = 675 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ZmeiLangParser.WRITE_MODE - 18)) | (1 << (ZmeiLangParser.BOOL - 18)) | (1 << (ZmeiLangParser.KW_POLY_LIST - 18)) | (1 << (ZmeiLangParser.KW_CSS - 18)) | (1 << (ZmeiLangParser.KW_JS - 18)) | (1 << (ZmeiLangParser.KW_INLINE_TYPE - 18)) | (1 << (ZmeiLangParser.KW_AUTH_TYPE - 18)) | (1 << (ZmeiLangParser.KW_INLINE - 18)) | (1 << (ZmeiLangParser.KW_TYPE - 18)) | (1 << (ZmeiLangParser.KW_USER_FIELD - 18)) | (1 << (ZmeiLangParser.KW_ANNOTATE - 18)) | (1 << (ZmeiLangParser.KW_ON_CREATE - 18)) | (1 << (ZmeiLangParser.KW_QUERY - 18)) | (1 << (ZmeiLangParser.KW_AUTH - 18)) | (1 << (ZmeiLangParser.KW_COUNT - 18)) | (1 << (ZmeiLangParser.KW_I18N - 18)) | (1 << (ZmeiLangParser.KW_EXTRA - 18)) | (1 << (ZmeiLangParser.KW_TABS - 18)) | (1 << (ZmeiLangParser.KW_LIST - 18)) | (1 << (ZmeiLangParser.KW_READ_ONLY - 18)) | (1 << (ZmeiLangParser.KW_LIST_EDITABLE - 18)) | (1 << (ZmeiLangParser.KW_LIST_FILTER - 18)) | (1 << (ZmeiLangParser.KW_LIST_SEARCH - 18)) | (1 << (ZmeiLangParser.KW_FIELDS - 18)) | (1 << (ZmeiLangParser.KW_IMPORT - 18)) | (1 << (ZmeiLangParser.KW_AS - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FLOAT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DECIMAL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATETIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_TEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_INT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_SLUG - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_BOOL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 18)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 18)) | (1 << (ZmeiLangParser.ID - 18)))) != 0)):
                        break

                pass
            elif token in [ZmeiLangParser.STRING_DQ]:
                self.state = 677
                self.match(ZmeiLangParser.STRING_DQ)
                pass
            elif token in [ZmeiLangParser.STRING_SQ]:
                self.state = 678
                self.match(ZmeiLangParser.STRING_SQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_help_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION_MARK(self):
            return self.getToken(ZmeiLangParser.QUESTION_MARK, 0)

        def string_or_quoted(self):
            return self.getTypedRuleContext(ZmeiLangParser.String_or_quotedContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_help_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_help_text" ):
                listener.enterCol_field_help_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_help_text" ):
                listener.exitCol_field_help_text(self)




    def col_field_help_text(self):

        localctx = ZmeiLangParser.Col_field_help_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_col_field_help_text)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(ZmeiLangParser.QUESTION_MARK)
            self.state = 682
            self.string_or_quoted()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_vrebose_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(ZmeiLangParser.SLASH, 0)

        def string_or_quoted(self):
            return self.getTypedRuleContext(ZmeiLangParser.String_or_quotedContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_vrebose_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_vrebose_name" ):
                listener.enterCol_field_vrebose_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_vrebose_name" ):
                listener.exitCol_field_vrebose_name(self)




    def col_field_vrebose_name(self):

        localctx = ZmeiLangParser.Col_field_vrebose_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_col_field_vrebose_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(ZmeiLangParser.SLASH)
            self.state = 685
            self.string_or_quoted()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_name" ):
                listener.enterCol_field_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_name" ):
                listener.exitCol_field_name(self)




    def col_field_name(self):

        localctx = ZmeiLangParser.Col_field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_col_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_modifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def DOLLAR(self):
            return self.getToken(ZmeiLangParser.DOLLAR, 0)

        def AMP(self):
            return self.getToken(ZmeiLangParser.AMP, 0)

        def EXCLAM(self):
            return self.getToken(ZmeiLangParser.EXCLAM, 0)

        def STAR(self):
            return self.getToken(ZmeiLangParser.STAR, 0)

        def APPROX(self):
            return self.getToken(ZmeiLangParser.APPROX, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_modifier" ):
                listener.enterCol_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_modifier" ):
                listener.exitCol_modifier(self)




    def col_modifier(self):

        localctx = ZmeiLangParser.Col_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_col_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            _la = self._input.LA(1)
            if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (ZmeiLangParser.EQUALS - 86)) | (1 << (ZmeiLangParser.DOLLAR - 86)) | (1 << (ZmeiLangParser.AMP - 86)) | (1 << (ZmeiLangParser.EXCLAM - 86)) | (1 << (ZmeiLangParser.STAR - 86)) | (1 << (ZmeiLangParser.APPROX - 86)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Col_field_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_longtext(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_longtextContext,0)


        def field_html_media(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_html_mediaContext,0)


        def field_html(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_htmlContext,0)


        def field_float(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_floatContext,0)


        def field_decimal(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_decimalContext,0)


        def field_date(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_dateContext,0)


        def field_datetime(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_datetimeContext,0)


        def field_create_time(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_create_timeContext,0)


        def field_update_time(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_update_timeContext,0)


        def field_text(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_textContext,0)


        def field_int(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_intContext,0)


        def field_slug(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_slugContext,0)


        def field_bool(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_boolContext,0)


        def field_relation(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_relationContext,0)


        def field_image(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_imageContext,0)


        def field_file(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_fileContext,0)


        def field_filer_file(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_filer_fileContext,0)


        def field_filer_folder(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_filer_folderContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_col_field_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_field_def" ):
                listener.enterCol_field_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_field_def" ):
                listener.exitCol_field_def(self)




    def col_field_def(self):

        localctx = ZmeiLangParser.Col_field_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_col_field_def)
        try:
            self.state = 709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 691
                self.field_longtext()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 692
                self.field_html_media()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_HTML]:
                self.enterOuterAlt(localctx, 3)
                self.state = 693
                self.field_html()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_FLOAT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 694
                self.field_float()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_DECIMAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 695
                self.field_decimal()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_DATE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 696
                self.field_date()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_DATETIME]:
                self.enterOuterAlt(localctx, 7)
                self.state = 697
                self.field_datetime()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME]:
                self.enterOuterAlt(localctx, 8)
                self.state = 698
                self.field_create_time()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME]:
                self.enterOuterAlt(localctx, 9)
                self.state = 699
                self.field_update_time()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_TEXT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 700
                self.field_text()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_INT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 701
                self.field_int()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_SLUG]:
                self.enterOuterAlt(localctx, 12)
                self.state = 702
                self.field_slug()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_BOOL]:
                self.enterOuterAlt(localctx, 13)
                self.state = 703
                self.field_bool()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY]:
                self.enterOuterAlt(localctx, 14)
                self.state = 704
                self.field_relation()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER]:
                self.enterOuterAlt(localctx, 15)
                self.state = 705
                self.field_image()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_FILE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 706
                self.field_file()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 707
                self.field_filer_file()
                pass
            elif token in [ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER]:
                self.enterOuterAlt(localctx, 18)
                self.state = 708
                self.field_filer_folder()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_longtextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_LONGTEXT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_longtext

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_longtext" ):
                listener.enterField_longtext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_longtext" ):
                listener.exitField_longtext(self)




    def field_longtext(self):

        localctx = ZmeiLangParser.Field_longtextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_field_longtext)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_htmlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_HTML(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_HTML, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_html

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_html" ):
                listener.enterField_html(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_html" ):
                listener.exitField_html(self)




    def field_html(self):

        localctx = ZmeiLangParser.Field_htmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_field_html)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(ZmeiLangParser.COL_FIELD_TYPE_HTML)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_html_mediaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_HTML_MEDIA(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_html_media

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_html_media" ):
                listener.enterField_html_media(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_html_media" ):
                listener.exitField_html_media(self)




    def field_html_media(self):

        localctx = ZmeiLangParser.Field_html_mediaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_field_html_media)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_floatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_FLOAT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FLOAT, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_float

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_float" ):
                listener.enterField_float(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_float" ):
                listener.exitField_float(self)




    def field_float(self):

        localctx = ZmeiLangParser.Field_floatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_field_float)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(ZmeiLangParser.COL_FIELD_TYPE_FLOAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_decimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_DECIMAL(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_decimal" ):
                listener.enterField_decimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_decimal" ):
                listener.exitField_decimal(self)




    def field_decimal(self):

        localctx = ZmeiLangParser.Field_decimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_field_decimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(ZmeiLangParser.COL_FIELD_TYPE_DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_dateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_DATE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DATE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_date

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_date" ):
                listener.enterField_date(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_date" ):
                listener.exitField_date(self)




    def field_date(self):

        localctx = ZmeiLangParser.Field_dateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_field_date)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(ZmeiLangParser.COL_FIELD_TYPE_DATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_datetimeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_DATETIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_DATETIME, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_datetime

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_datetime" ):
                listener.enterField_datetime(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_datetime" ):
                listener.exitField_datetime(self)




    def field_datetime(self):

        localctx = ZmeiLangParser.Field_datetimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_field_datetime)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(ZmeiLangParser.COL_FIELD_TYPE_DATETIME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_create_timeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_CREATE_TIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_create_time

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_create_time" ):
                listener.enterField_create_time(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_create_time" ):
                listener.exitField_create_time(self)




    def field_create_time(self):

        localctx = ZmeiLangParser.Field_create_timeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_field_create_time)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_update_timeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_UPDATE_TIME(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_update_time

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_update_time" ):
                listener.enterField_update_time(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_update_time" ):
                listener.exitField_update_time(self)




    def field_update_time(self):

        localctx = ZmeiLangParser.Field_update_timeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_field_update_time)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_FILE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_file" ):
                listener.enterField_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_file" ):
                listener.exitField_file(self)




    def field_file(self):

        localctx = ZmeiLangParser.Field_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_field_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(ZmeiLangParser.COL_FIELD_TYPE_FILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_filer_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_FILER_FILE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_filer_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_filer_file" ):
                listener.enterField_filer_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_filer_file" ):
                listener.exitField_filer_file(self)




    def field_filer_file(self):

        localctx = ZmeiLangParser.Field_filer_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_field_filer_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_filer_folderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_FILER_FOLDER(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_filer_folder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_filer_folder" ):
                listener.enterField_filer_folder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_filer_folder" ):
                listener.exitField_filer_folder(self)




    def field_filer_folder(self):

        localctx = ZmeiLangParser.Field_filer_folderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_field_filer_folder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_textContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_TEXT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_TEXT, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_text_size(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_text_sizeContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def COMA(self):
            return self.getToken(ZmeiLangParser.COMA, 0)

        def field_text_choices(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_text_choicesContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text" ):
                listener.enterField_text(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text" ):
                listener.exitField_text(self)




    def field_text(self):

        localctx = ZmeiLangParser.Field_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_field_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(ZmeiLangParser.COL_FIELD_TYPE_TEXT)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 736
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 737
                self.field_text_size()
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ZmeiLangParser.COMA:
                    self.state = 738
                    self.match(ZmeiLangParser.COMA)
                    self.state = 739
                    self.field_text_choices()


                self.state = 742
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_text_sizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self):
            return self.getToken(ZmeiLangParser.DIGIT, 0)

        def QUESTION_MARK(self):
            return self.getToken(ZmeiLangParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text_size" ):
                listener.enterField_text_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text_size" ):
                listener.exitField_text_size(self)




    def field_text_size(self):

        localctx = ZmeiLangParser.Field_text_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_field_text_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.DIGIT or _la==ZmeiLangParser.QUESTION_MARK):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_text_choicesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_CHOICES(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_CHOICES, 0)

        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def field_text_choice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_text_choiceContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_text_choiceContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text_choices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text_choices" ):
                listener.enterField_text_choices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text_choices" ):
                listener.exitField_text_choices(self)




    def field_text_choices(self):

        localctx = ZmeiLangParser.Field_text_choicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_field_text_choices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(ZmeiLangParser.COL_FIELD_CHOICES)
            self.state = 749
            self.match(ZmeiLangParser.EQUALS)
            self.state = 750
            self.field_text_choice()
            self.state = 755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 751
                self.match(ZmeiLangParser.COMA)
                self.state = 752
                self.field_text_choice()
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_text_choiceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_text_choice_val(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_text_choice_valContext,0)


        def field_text_choice_key(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_text_choice_keyContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text_choice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text_choice" ):
                listener.enterField_text_choice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text_choice" ):
                listener.exitField_text_choice(self)




    def field_text_choice(self):

        localctx = ZmeiLangParser.Field_text_choiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_field_text_choice)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 758
                self.field_text_choice_key()


            self.state = 761
            self.field_text_choice_val()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_text_choice_valContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text_choice_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text_choice_val" ):
                listener.enterField_text_choice_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text_choice_val" ):
                listener.exitField_text_choice_val(self)




    def field_text_choice_val(self):

        localctx = ZmeiLangParser.Field_text_choice_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_field_text_choice_val)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 763
                self.id_or_kw()
                pass
            elif token in [ZmeiLangParser.STRING_DQ]:
                self.state = 764
                self.match(ZmeiLangParser.STRING_DQ)
                pass
            elif token in [ZmeiLangParser.STRING_SQ]:
                self.state = 765
                self.match(ZmeiLangParser.STRING_SQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_text_choice_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_text_choice_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_text_choice_key" ):
                listener.enterField_text_choice_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_text_choice_key" ):
                listener.exitField_text_choice_key(self)




    def field_text_choice_key(self):

        localctx = ZmeiLangParser.Field_text_choice_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_field_text_choice_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.id_or_kw()
            self.state = 769
            self.match(ZmeiLangParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_intContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_INT(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_INT, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_int_choices(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_int_choicesContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_int

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_int" ):
                listener.enterField_int(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_int" ):
                listener.exitField_int(self)




    def field_int(self):

        localctx = ZmeiLangParser.Field_intContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_field_int)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(ZmeiLangParser.COL_FIELD_TYPE_INT)
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 772
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 773
                self.field_int_choices()
                self.state = 774
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_int_choicesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_CHOICES(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_CHOICES, 0)

        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def field_int_choice(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_int_choiceContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_int_choiceContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_int_choices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_int_choices" ):
                listener.enterField_int_choices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_int_choices" ):
                listener.exitField_int_choices(self)




    def field_int_choices(self):

        localctx = ZmeiLangParser.Field_int_choicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_field_int_choices)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(ZmeiLangParser.COL_FIELD_CHOICES)
            self.state = 779
            self.match(ZmeiLangParser.EQUALS)
            self.state = 780
            self.field_int_choice()
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 781
                self.match(ZmeiLangParser.COMA)
                self.state = 782
                self.field_int_choice()
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_int_choiceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_int_choice_val(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_int_choice_valContext,0)


        def field_int_choice_key(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_int_choice_keyContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_int_choice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_int_choice" ):
                listener.enterField_int_choice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_int_choice" ):
                listener.exitField_int_choice(self)




    def field_int_choice(self):

        localctx = ZmeiLangParser.Field_int_choiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_field_int_choice)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.DIGIT:
                self.state = 788
                self.field_int_choice_key()


            self.state = 791
            self.field_int_choice_val()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_int_choice_valContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_int_choice_val

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_int_choice_val" ):
                listener.enterField_int_choice_val(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_int_choice_val" ):
                listener.exitField_int_choice_val(self)




    def field_int_choice_val(self):

        localctx = ZmeiLangParser.Field_int_choice_valContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_field_int_choice_val)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 793
                self.id_or_kw()
                pass
            elif token in [ZmeiLangParser.STRING_DQ]:
                self.state = 794
                self.match(ZmeiLangParser.STRING_DQ)
                pass
            elif token in [ZmeiLangParser.STRING_SQ]:
                self.state = 795
                self.match(ZmeiLangParser.STRING_SQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_int_choice_keyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self):
            return self.getToken(ZmeiLangParser.DIGIT, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_int_choice_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_int_choice_key" ):
                listener.enterField_int_choice_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_int_choice_key" ):
                listener.exitField_int_choice_key(self)




    def field_int_choice_key(self):

        localctx = ZmeiLangParser.Field_int_choice_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_field_int_choice_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(ZmeiLangParser.DIGIT)
            self.state = 799
            self.match(ZmeiLangParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_slugContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_SLUG(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_SLUG, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_slug_ref_field(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_slug_ref_fieldContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_slug

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_slug" ):
                listener.enterField_slug(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_slug" ):
                listener.exitField_slug(self)




    def field_slug(self):

        localctx = ZmeiLangParser.Field_slugContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_field_slug)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(ZmeiLangParser.COL_FIELD_TYPE_SLUG)
            self.state = 802
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 803
            self.field_slug_ref_field()
            self.state = 804
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_slug_ref_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_slug_ref_field_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_slug_ref_field_idContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_slug_ref_field_idContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_slug_ref_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_slug_ref_field" ):
                listener.enterField_slug_ref_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_slug_ref_field" ):
                listener.exitField_slug_ref_field(self)




    def field_slug_ref_field(self):

        localctx = ZmeiLangParser.Field_slug_ref_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_field_slug_ref_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.field_slug_ref_field_id()
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 807
                self.match(ZmeiLangParser.COMA)
                self.state = 808
                self.field_slug_ref_field_id()
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_slug_ref_field_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_slug_ref_field_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_slug_ref_field_id" ):
                listener.enterField_slug_ref_field_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_slug_ref_field_id" ):
                listener.exitField_slug_ref_field_id(self)




    def field_slug_ref_field_id(self):

        localctx = ZmeiLangParser.Field_slug_ref_field_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_field_slug_ref_field_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_boolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_BOOL(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_BOOL, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_bool_default(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_bool_defaultContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_bool

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_bool" ):
                listener.enterField_bool(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_bool" ):
                listener.exitField_bool(self)




    def field_bool(self):

        localctx = ZmeiLangParser.Field_boolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_field_bool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(ZmeiLangParser.COL_FIELD_TYPE_BOOL)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 817
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 818
                self.field_bool_default()
                self.state = 819
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_bool_defaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(ZmeiLangParser.BOOL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_bool_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_bool_default" ):
                listener.enterField_bool_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_bool_default" ):
                listener.exitField_bool_default(self)




    def field_bool_default(self):

        localctx = ZmeiLangParser.Field_bool_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_field_bool_default)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(ZmeiLangParser.BOOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_imageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filer_image_type(self):
            return self.getTypedRuleContext(ZmeiLangParser.Filer_image_typeContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_image_sizes(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_image_sizesContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image" ):
                listener.enterField_image(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image" ):
                listener.exitField_image(self)




    def field_image(self):

        localctx = ZmeiLangParser.Field_imageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_field_image)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.filer_image_type()
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 826
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 827
                self.field_image_sizes()
                self.state = 828
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Filer_image_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_IMAGE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_IMAGE, 0)

        def COL_FIELD_TYPE_FILER_IMAGE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, 0)

        def COL_FIELD_TYPE_FILER_IMAGE_FOLDER(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_filer_image_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiler_image_type" ):
                listener.enterFiler_image_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiler_image_type" ):
                listener.exitFiler_image_type(self)




    def filer_image_type(self):

        localctx = ZmeiLangParser.Filer_image_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_filer_image_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ZmeiLangParser.COL_FIELD_TYPE_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_sizesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_image_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_image_sizeContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_image_sizeContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_sizes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_sizes" ):
                listener.enterField_image_sizes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_sizes" ):
                listener.exitField_image_sizes(self)




    def field_image_sizes(self):

        localctx = ZmeiLangParser.Field_image_sizesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_field_image_sizes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.field_image_size()
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 835
                self.match(ZmeiLangParser.COMA)
                self.state = 836
                self.field_image_size()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_sizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_image_size_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_image_size_nameContext,0)


        def field_image_size_dimensions(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_image_size_dimensionsContext,0)


        def field_image_filters(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_image_filtersContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_size" ):
                listener.enterField_image_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_size" ):
                listener.exitField_image_size(self)




    def field_image_size(self):

        localctx = ZmeiLangParser.Field_image_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_field_image_size)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.field_image_size_name()
            self.state = 843
            self.field_image_size_dimensions()
            self.state = 844
            self.field_image_filters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_size_dimensionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE2D(self):
            return self.getToken(ZmeiLangParser.SIZE2D, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_size_dimensions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_size_dimensions" ):
                listener.enterField_image_size_dimensions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_size_dimensions" ):
                listener.exitField_image_size_dimensions(self)




    def field_image_size_dimensions(self):

        localctx = ZmeiLangParser.Field_image_size_dimensionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_field_image_size_dimensions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(ZmeiLangParser.SIZE2D)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_size_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def EQUALS(self):
            return self.getToken(ZmeiLangParser.EQUALS, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_size_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_size_name" ):
                listener.enterField_image_size_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_size_name" ):
                listener.exitField_image_size_name(self)




    def field_image_size_name(self):

        localctx = ZmeiLangParser.Field_image_size_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_field_image_size_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.id_or_kw()
            self.state = 849
            self.match(ZmeiLangParser.EQUALS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_filtersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_image_filter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Field_image_filterContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Field_image_filterContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_filters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_filters" ):
                listener.enterField_image_filters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_filters" ):
                listener.exitField_image_filters(self)




    def field_image_filters(self):

        localctx = ZmeiLangParser.Field_image_filtersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_field_image_filters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.PIPE:
                self.state = 851
                self.field_image_filter()
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_image_filterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIPE(self):
            return self.getToken(ZmeiLangParser.PIPE, 0)

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_image_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_image_filter" ):
                listener.enterField_image_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_image_filter" ):
                listener.exitField_image_filter(self)




    def field_image_filter(self):

        localctx = ZmeiLangParser.Field_image_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_field_image_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(ZmeiLangParser.PIPE)
            self.state = 858
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_relationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_relation_type(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_relation_typeContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def field_relation_target_ref(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_relation_target_refContext,0)


        def field_relation_target_class(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_relation_target_classContext,0)


        def field_relation_related_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_relation_related_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_relation" ):
                listener.enterField_relation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_relation" ):
                listener.exitField_relation(self)




    def field_relation(self):

        localctx = ZmeiLangParser.Field_relationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_field_relation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.field_relation_type()
            self.state = 861
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.HASH]:
                self.state = 862
                self.field_relation_target_ref()
                pass
            elif token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 863
                self.field_relation_target_class()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.DASH:
                self.state = 866
                self.field_relation_related_name()


            self.state = 869
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_relation_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COL_FIELD_TYPE_ONE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_ONE, 0)

        def COL_FIELD_TYPE_ONE2ONE(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, 0)

        def COL_FIELD_TYPE_MANY(self):
            return self.getToken(ZmeiLangParser.COL_FIELD_TYPE_MANY, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_relation_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_relation_type" ):
                listener.enterField_relation_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_relation_type" ):
                listener.exitField_relation_type(self)




    def field_relation_type(self):

        localctx = ZmeiLangParser.Field_relation_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_field_relation_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            _la = self._input.LA(1)
            if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 63)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 63)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 63)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_relation_target_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(ZmeiLangParser.HASH, 0)

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_relation_target_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_relation_target_ref" ):
                listener.enterField_relation_target_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_relation_target_ref" ):
                listener.exitField_relation_target_ref(self)




    def field_relation_target_ref(self):

        localctx = ZmeiLangParser.Field_relation_target_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_field_relation_target_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(ZmeiLangParser.HASH)
            self.state = 874
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_relation_target_classContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(ZmeiLangParser.ClassnameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_relation_target_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_relation_target_class" ):
                listener.enterField_relation_target_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_relation_target_class" ):
                listener.exitField_relation_target_class(self)




    def field_relation_target_class(self):

        localctx = ZmeiLangParser.Field_relation_target_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_field_relation_target_class)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_relation_related_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DASH(self):
            return self.getToken(ZmeiLangParser.DASH, 0)

        def GT(self):
            return self.getToken(ZmeiLangParser.GT, 0)

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_field_relation_related_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_relation_related_name" ):
                listener.enterField_relation_related_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_relation_related_name" ):
                listener.exitField_relation_related_name(self)




    def field_relation_related_name(self):

        localctx = ZmeiLangParser.Field_relation_related_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_field_relation_related_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(ZmeiLangParser.DASH)
            self.state = 879
            self.match(ZmeiLangParser.GT)
            self.state = 880
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Model_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_admin(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_adminContext,0)


        def an_tree(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_treeContext,0)


        def an_date_tree(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_date_treeContext,0)


        def an_mixin(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_mixinContext,0)


        def an_m2m_changed(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_m2m_changedContext,0)


        def an_post_delete(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_post_deleteContext,0)


        def an_pre_delete(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_pre_deleteContext,0)


        def an_post_save(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_post_saveContext,0)


        def an_pre_save(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_pre_saveContext,0)


        def an_clean(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_cleanContext,0)


        def an_api(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_apiContext,0)


        def an_rest(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_restContext,0)


        def an_order(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_orderContext,0)


        def an_sortable(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_sortableContext,0)


        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_model_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModel_annotation" ):
                listener.enterModel_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModel_annotation" ):
                listener.exitModel_annotation(self)




    def model_annotation(self):

        localctx = ZmeiLangParser.Model_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_model_annotation)
        try:
            self.state = 897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.AN_ADMIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 882
                self.an_admin()
                pass
            elif token in [ZmeiLangParser.AN_TREE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 883
                self.an_tree()
                pass
            elif token in [ZmeiLangParser.AN_DATE_TREE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 884
                self.an_date_tree()
                pass
            elif token in [ZmeiLangParser.AN_MIXIN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 885
                self.an_mixin()
                pass
            elif token in [ZmeiLangParser.AN_M2M_CHANGED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 886
                self.an_m2m_changed()
                pass
            elif token in [ZmeiLangParser.AN_POST_DELETE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 887
                self.an_post_delete()
                pass
            elif token in [ZmeiLangParser.AN_PRE_DELETE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 888
                self.an_pre_delete()
                pass
            elif token in [ZmeiLangParser.AN_POST_SAVE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 889
                self.an_post_save()
                pass
            elif token in [ZmeiLangParser.AN_PRE_SAVE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 890
                self.an_pre_save()
                pass
            elif token in [ZmeiLangParser.AN_CLEAN]:
                self.enterOuterAlt(localctx, 10)
                self.state = 891
                self.an_clean()
                pass
            elif token in [ZmeiLangParser.AN_API]:
                self.enterOuterAlt(localctx, 11)
                self.state = 892
                self.an_api()
                pass
            elif token in [ZmeiLangParser.AN_REST]:
                self.enterOuterAlt(localctx, 12)
                self.state = 893
                self.an_rest()
                pass
            elif token in [ZmeiLangParser.AN_ORDER]:
                self.enterOuterAlt(localctx, 13)
                self.state = 894
                self.an_order()
                pass
            elif token in [ZmeiLangParser.AN_SORTABLE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 895
                self.an_sortable()
                pass
            elif token in [ZmeiLangParser.NL]:
                self.enterOuterAlt(localctx, 15)
                self.state = 896
                self.match(ZmeiLangParser.NL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_sortableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_SORTABLE(self):
            return self.getToken(ZmeiLangParser.AN_SORTABLE, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_sortable_field_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_sortable_field_nameContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_sortable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_sortable" ):
                listener.enterAn_sortable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_sortable" ):
                listener.exitAn_sortable(self)




    def an_sortable(self):

        localctx = ZmeiLangParser.An_sortableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_an_sortable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(ZmeiLangParser.AN_SORTABLE)
            self.state = 900
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 901
            self.an_sortable_field_name()
            self.state = 902
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_sortable_field_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_sortable_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_sortable_field_name" ):
                listener.enterAn_sortable_field_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_sortable_field_name" ):
                listener.exitAn_sortable_field_name(self)




    def an_sortable_field_name(self):

        localctx = ZmeiLangParser.An_sortable_field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_an_sortable_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_orderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_ORDER(self):
            return self.getToken(ZmeiLangParser.AN_ORDER, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_order_fields(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_order_fieldsContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_order" ):
                listener.enterAn_order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_order" ):
                listener.exitAn_order(self)




    def an_order(self):

        localctx = ZmeiLangParser.An_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_an_order)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(ZmeiLangParser.AN_ORDER)
            self.state = 907
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 908
            self.an_order_fields()
            self.state = 909
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_order_fieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Id_or_kwContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_order_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_order_fields" ):
                listener.enterAn_order_fields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_order_fields" ):
                listener.exitAn_order_fields(self)




    def an_order_fields(self):

        localctx = ZmeiLangParser.An_order_fieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_an_order_fields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.id_or_kw()
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 912
                self.match(ZmeiLangParser.COMA)
                self.state = 913
                self.id_or_kw()
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_restContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_REST(self):
            return self.getToken(ZmeiLangParser.AN_REST, 0)

        def DOT(self):
            return self.getToken(ZmeiLangParser.DOT, 0)

        def an_rest_discriminator(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_discriminatorContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_rest_config(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_configContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest" ):
                listener.enterAn_rest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest" ):
                listener.exitAn_rest(self)




    def an_rest(self):

        localctx = ZmeiLangParser.An_restContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_an_rest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(ZmeiLangParser.AN_REST)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.DOT:
                self.state = 920
                self.match(ZmeiLangParser.DOT)
                self.state = 921
                self.an_rest_discriminator()


            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 924
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 925
                self.an_rest_config()
                self.state = 926
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_configContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_rest_main_part(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_main_partContext,0)


        def an_rest_inline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_inlineContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_inlineContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_config

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_config" ):
                listener.enterAn_rest_config(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_config" ):
                listener.exitAn_rest_config(self)




    def an_rest_config(self):

        localctx = ZmeiLangParser.An_rest_configContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_an_rest_config)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.an_rest_main_part()
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (ZmeiLangParser.KW_INLINE - 25)) | (1 << (ZmeiLangParser.NL - 25)) | (1 << (ZmeiLangParser.COMA - 25)))) != 0):
                self.state = 934
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ZmeiLangParser.KW_INLINE]:
                    self.state = 931
                    self.an_rest_inline()
                    pass
                elif token in [ZmeiLangParser.NL]:
                    self.state = 932
                    self.match(ZmeiLangParser.NL)
                    pass
                elif token in [ZmeiLangParser.COMA]:
                    self.state = 933
                    self.match(ZmeiLangParser.COMA)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_main_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_rest_fields(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_fieldsContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_fieldsContext,i)


        def an_rest_i18n(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_i18nContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_i18nContext,i)


        def an_rest_auth(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_authContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_authContext,i)


        def an_rest_query(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_queryContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_queryContext,i)


        def an_rest_on_create(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_on_createContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_on_createContext,i)


        def an_rest_read_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_read_onlyContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_read_onlyContext,i)


        def an_rest_user_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_user_fieldContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_user_fieldContext,i)


        def an_rest_annotate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_annotateContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_annotateContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_main_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_main_part" ):
                listener.enterAn_rest_main_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_main_part" ):
                listener.exitAn_rest_main_part(self)




    def an_rest_main_part(self):

        localctx = ZmeiLangParser.An_rest_main_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_an_rest_main_part)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 949
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ZmeiLangParser.KW_FIELDS]:
                        self.state = 939
                        self.an_rest_fields()
                        pass
                    elif token in [ZmeiLangParser.KW_I18N]:
                        self.state = 940
                        self.an_rest_i18n()
                        pass
                    elif token in [ZmeiLangParser.KW_AUTH]:
                        self.state = 941
                        self.an_rest_auth()
                        pass
                    elif token in [ZmeiLangParser.KW_QUERY]:
                        self.state = 942
                        self.an_rest_query()
                        pass
                    elif token in [ZmeiLangParser.KW_ON_CREATE]:
                        self.state = 943
                        self.an_rest_on_create()
                        pass
                    elif token in [ZmeiLangParser.KW_READ_ONLY]:
                        self.state = 944
                        self.an_rest_read_only()
                        pass
                    elif token in [ZmeiLangParser.KW_USER_FIELD]:
                        self.state = 945
                        self.an_rest_user_field()
                        pass
                    elif token in [ZmeiLangParser.KW_ANNOTATE]:
                        self.state = 946
                        self.an_rest_annotate()
                        pass
                    elif token in [ZmeiLangParser.NL]:
                        self.state = 947
                        self.match(ZmeiLangParser.NL)
                        pass
                    elif token in [ZmeiLangParser.COMA]:
                        self.state = 948
                        self.match(ZmeiLangParser.COMA)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_discriminatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_discriminator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_discriminator" ):
                listener.enterAn_rest_discriminator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_discriminator" ):
                listener.exitAn_rest_discriminator(self)




    def an_rest_discriminator(self):

        localctx = ZmeiLangParser.An_rest_discriminatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_an_rest_discriminator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_i18nContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_I18N(self):
            return self.getToken(ZmeiLangParser.KW_I18N, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def BOOL(self):
            return self.getToken(ZmeiLangParser.BOOL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_i18n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_i18n" ):
                listener.enterAn_rest_i18n(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_i18n" ):
                listener.exitAn_rest_i18n(self)




    def an_rest_i18n(self):

        localctx = ZmeiLangParser.An_rest_i18nContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_an_rest_i18n)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(ZmeiLangParser.KW_I18N)
            self.state = 957
            self.match(ZmeiLangParser.COLON)
            self.state = 958
            self.match(ZmeiLangParser.BOOL)
            self.state = 962
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 959
                    self.match(ZmeiLangParser.NL) 
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_queryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_QUERY(self):
            return self.getToken(ZmeiLangParser.KW_QUERY, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_query" ):
                listener.enterAn_rest_query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_query" ):
                listener.exitAn_rest_query(self)




    def an_rest_query(self):

        localctx = ZmeiLangParser.An_rest_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_an_rest_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(ZmeiLangParser.KW_QUERY)
            self.state = 966
            self.python_code()
            self.state = 970
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 967
                    self.match(ZmeiLangParser.NL) 
                self.state = 972
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_on_createContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ON_CREATE(self):
            return self.getToken(ZmeiLangParser.KW_ON_CREATE, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_on_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_on_create" ):
                listener.enterAn_rest_on_create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_on_create" ):
                listener.exitAn_rest_on_create(self)




    def an_rest_on_create(self):

        localctx = ZmeiLangParser.An_rest_on_createContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_an_rest_on_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(ZmeiLangParser.KW_ON_CREATE)
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.COLON:
                self.state = 974
                self.match(ZmeiLangParser.COLON)


            self.state = 977
            self.python_code()
            self.state = 981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 978
                    self.match(ZmeiLangParser.NL) 
                self.state = 983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_read_onlyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_READ_ONLY(self):
            return self.getToken(ZmeiLangParser.KW_READ_ONLY, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_read_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_read_only" ):
                listener.enterAn_rest_read_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_read_only" ):
                listener.exitAn_rest_read_only(self)




    def an_rest_read_only(self):

        localctx = ZmeiLangParser.An_rest_read_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_an_rest_read_only)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.match(ZmeiLangParser.KW_READ_ONLY)
            self.state = 985
            self.match(ZmeiLangParser.COLON)
            self.state = 986
            self.field_list_expr()
            self.state = 990
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 987
                    self.match(ZmeiLangParser.NL) 
                self.state = 992
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_user_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USER_FIELD(self):
            return self.getToken(ZmeiLangParser.KW_USER_FIELD, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_user_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_user_field" ):
                listener.enterAn_rest_user_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_user_field" ):
                listener.exitAn_rest_user_field(self)




    def an_rest_user_field(self):

        localctx = ZmeiLangParser.An_rest_user_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_an_rest_user_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(ZmeiLangParser.KW_USER_FIELD)
            self.state = 994
            self.match(ZmeiLangParser.COLON)
            self.state = 995
            self.id_or_kw()
            self.state = 999
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 996
                    self.match(ZmeiLangParser.NL) 
                self.state = 1001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_fieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIELDS(self):
            return self.getToken(ZmeiLangParser.KW_FIELDS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def an_rest_fields_write_mode(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_fields_write_modeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_fields" ):
                listener.enterAn_rest_fields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_fields" ):
                listener.exitAn_rest_fields(self)




    def an_rest_fields(self):

        localctx = ZmeiLangParser.An_rest_fieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_an_rest_fields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.match(ZmeiLangParser.KW_FIELDS)
            self.state = 1003
            self.match(ZmeiLangParser.COLON)
            self.state = 1004
            self.field_list_expr()
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.SQ_BRACE_OPEN:
                self.state = 1005
                self.an_rest_fields_write_mode()


            self.state = 1011
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1008
                    self.match(ZmeiLangParser.NL) 
                self.state = 1013
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_fields_write_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def write_mode_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Write_mode_exprContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_fields_write_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_fields_write_mode" ):
                listener.enterAn_rest_fields_write_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_fields_write_mode" ):
                listener.exitAn_rest_fields_write_mode(self)




    def an_rest_fields_write_mode(self):

        localctx = ZmeiLangParser.An_rest_fields_write_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_an_rest_fields_write_mode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.write_mode_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_authContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AUTH(self):
            return self.getToken(ZmeiLangParser.KW_AUTH, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_rest_auth_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_auth_typeContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_auth_typeContext,i)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_auth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_auth" ):
                listener.enterAn_rest_auth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_auth" ):
                listener.exitAn_rest_auth(self)




    def an_rest_auth(self):

        localctx = ZmeiLangParser.An_rest_authContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_an_rest_auth)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(ZmeiLangParser.KW_AUTH)
            self.state = 1017
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 1018
            self.an_rest_auth_type()
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.COMA:
                self.state = 1019
                self.match(ZmeiLangParser.COMA)
                self.state = 1020
                self.an_rest_auth_type()
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1026
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_auth_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AUTH_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_AUTH_TYPE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_rest_auth_token_model(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_auth_token_modelContext,0)


        def an_rest_auth_token_class(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_auth_token_classContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_auth_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_auth_type" ):
                listener.enterAn_rest_auth_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_auth_type" ):
                listener.exitAn_rest_auth_type(self)




    def an_rest_auth_type(self):

        localctx = ZmeiLangParser.An_rest_auth_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_an_rest_auth_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(ZmeiLangParser.KW_AUTH_TYPE)
            self.state = 1032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.COLON]:
                self.state = 1029
                self.match(ZmeiLangParser.COLON)
                self.state = 1030
                self.an_rest_auth_token_model()
                pass
            elif token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                self.state = 1031
                self.an_rest_auth_token_class()
                pass
            elif token in [ZmeiLangParser.BRACE_CLOSE, ZmeiLangParser.COMA]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_auth_token_modelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(ZmeiLangParser.HASH, 0)

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_auth_token_model

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_auth_token_model" ):
                listener.enterAn_rest_auth_token_model(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_auth_token_model" ):
                listener.exitAn_rest_auth_token_model(self)




    def an_rest_auth_token_model(self):

        localctx = ZmeiLangParser.An_rest_auth_token_modelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_an_rest_auth_token_model)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(ZmeiLangParser.HASH)
            self.state = 1035
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_auth_token_classContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(ZmeiLangParser.ClassnameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_auth_token_class

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_auth_token_class" ):
                listener.enterAn_rest_auth_token_class(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_auth_token_class" ):
                listener.exitAn_rest_auth_token_class(self)




    def an_rest_auth_token_class(self):

        localctx = ZmeiLangParser.An_rest_auth_token_classContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_an_rest_auth_token_class)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_annotateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ANNOTATE(self):
            return self.getToken(ZmeiLangParser.KW_ANNOTATE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_rest_annotate_count(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_annotate_countContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_annotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_annotate" ):
                listener.enterAn_rest_annotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_annotate" ):
                listener.exitAn_rest_annotate(self)




    def an_rest_annotate(self):

        localctx = ZmeiLangParser.An_rest_annotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_an_rest_annotate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(ZmeiLangParser.KW_ANNOTATE)
            self.state = 1040
            self.match(ZmeiLangParser.COLON)
            self.state = 1041
            self.an_rest_annotate_count()
            self.state = 1045
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1042
                    self.match(ZmeiLangParser.NL) 
                self.state = 1047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_annotate_countContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COUNT(self):
            return self.getToken(ZmeiLangParser.KW_COUNT, 0)

        def an_rest_annotate_count_field(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_annotate_count_fieldContext,0)


        def KW_AS(self):
            return self.getToken(ZmeiLangParser.KW_AS, 0)

        def an_rest_annotate_count_alias(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_annotate_count_aliasContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_annotate_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_annotate_count" ):
                listener.enterAn_rest_annotate_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_annotate_count" ):
                listener.exitAn_rest_annotate_count(self)




    def an_rest_annotate_count(self):

        localctx = ZmeiLangParser.An_rest_annotate_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_an_rest_annotate_count)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(ZmeiLangParser.KW_COUNT)
            self.state = 1049
            self.an_rest_annotate_count_field()
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.KW_AS:
                self.state = 1050
                self.match(ZmeiLangParser.KW_AS)
                self.state = 1051
                self.an_rest_annotate_count_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_annotate_count_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_annotate_count_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_annotate_count_field" ):
                listener.enterAn_rest_annotate_count_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_annotate_count_field" ):
                listener.exitAn_rest_annotate_count_field(self)




    def an_rest_annotate_count_field(self):

        localctx = ZmeiLangParser.An_rest_annotate_count_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_an_rest_annotate_count_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_annotate_count_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_annotate_count_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_annotate_count_alias" ):
                listener.enterAn_rest_annotate_count_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_annotate_count_alias" ):
                listener.exitAn_rest_annotate_count_alias(self)




    def an_rest_annotate_count_alias(self):

        localctx = ZmeiLangParser.An_rest_annotate_count_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_an_rest_annotate_count_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_inlineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INLINE(self):
            return self.getToken(ZmeiLangParser.KW_INLINE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_rest_inline_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_rest_inline_declContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_rest_inline_declContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_inline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_inline" ):
                listener.enterAn_rest_inline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_inline" ):
                listener.exitAn_rest_inline(self)




    def an_rest_inline(self):

        localctx = ZmeiLangParser.An_rest_inlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_an_rest_inline)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(ZmeiLangParser.KW_INLINE)
            self.state = 1059
            self.match(ZmeiLangParser.COLON)
            self.state = 1063 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1063
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                        self.state = 1060
                        self.an_rest_inline_decl()
                        pass
                    elif token in [ZmeiLangParser.COMA]:
                        self.state = 1061
                        self.match(ZmeiLangParser.COMA)
                        pass
                    elif token in [ZmeiLangParser.NL]:
                        self.state = 1062
                        self.match(ZmeiLangParser.NL)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1065 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_inline_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def an_rest_inline_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_inline_nameContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_rest_config(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_rest_configContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_inline_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_inline_decl" ):
                listener.enterAn_rest_inline_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_inline_decl" ):
                listener.exitAn_rest_inline_decl(self)




    def an_rest_inline_decl(self):

        localctx = ZmeiLangParser.An_rest_inline_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_an_rest_inline_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.an_rest_inline_name()
            self.state = 1068
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 1069
            self.an_rest_config()
            self.state = 1070
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_rest_inline_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_rest_inline_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_rest_inline_name" ):
                listener.enterAn_rest_inline_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_rest_inline_name" ):
                listener.exitAn_rest_inline_name(self)




    def an_rest_inline_name(self):

        localctx = ZmeiLangParser.An_rest_inline_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_an_rest_inline_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_apiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_API(self):
            return self.getToken(ZmeiLangParser.AN_API, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def an_api_all(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_api_allContext,0)


        def an_api_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_api_nameContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_api_nameContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_api

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_api" ):
                listener.enterAn_api(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_api" ):
                listener.exitAn_api(self)




    def an_api(self):

        localctx = ZmeiLangParser.An_apiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_an_api)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(ZmeiLangParser.AN_API)
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 1075
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 1085
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ZmeiLangParser.STAR]:
                    self.state = 1076
                    self.an_api_all()
                    pass
                elif token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                    self.state = 1077
                    self.an_api_name()
                    self.state = 1082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ZmeiLangParser.COMA:
                        self.state = 1078
                        self.match(ZmeiLangParser.COMA)
                        self.state = 1079
                        self.an_api_name()
                        self.state = 1084
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1087
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_api_allContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(ZmeiLangParser.STAR, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_api_all

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_api_all" ):
                listener.enterAn_api_all(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_api_all" ):
                listener.exitAn_api_all(self)




    def an_api_all(self):

        localctx = ZmeiLangParser.An_api_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_an_api_all)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            self.match(ZmeiLangParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_api_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_api_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_api_name" ):
                listener.enterAn_api_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_api_name" ):
                listener.exitAn_api_name(self)




    def an_api_name(self):

        localctx = ZmeiLangParser.An_api_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_an_api_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_cleanContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_CLEAN(self):
            return self.getToken(ZmeiLangParser.AN_CLEAN, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_clean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_clean" ):
                listener.enterAn_clean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_clean" ):
                listener.exitAn_clean(self)




    def an_clean(self):

        localctx = ZmeiLangParser.An_cleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_an_clean)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(ZmeiLangParser.AN_CLEAN)
            self.state = 1096
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_pre_saveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_PRE_SAVE(self):
            return self.getToken(ZmeiLangParser.AN_PRE_SAVE, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_pre_save

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_pre_save" ):
                listener.enterAn_pre_save(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_pre_save" ):
                listener.exitAn_pre_save(self)




    def an_pre_save(self):

        localctx = ZmeiLangParser.An_pre_saveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_an_pre_save)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(ZmeiLangParser.AN_PRE_SAVE)
            self.state = 1099
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_post_saveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_POST_SAVE(self):
            return self.getToken(ZmeiLangParser.AN_POST_SAVE, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_post_save

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_post_save" ):
                listener.enterAn_post_save(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_post_save" ):
                listener.exitAn_post_save(self)




    def an_post_save(self):

        localctx = ZmeiLangParser.An_post_saveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_an_post_save)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(ZmeiLangParser.AN_POST_SAVE)
            self.state = 1102
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_pre_deleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_PRE_DELETE(self):
            return self.getToken(ZmeiLangParser.AN_PRE_DELETE, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_pre_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_pre_delete" ):
                listener.enterAn_pre_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_pre_delete" ):
                listener.exitAn_pre_delete(self)




    def an_pre_delete(self):

        localctx = ZmeiLangParser.An_pre_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_an_pre_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(ZmeiLangParser.AN_PRE_DELETE)
            self.state = 1105
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_post_deleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_POST_DELETE(self):
            return self.getToken(ZmeiLangParser.AN_POST_DELETE, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_post_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_post_delete" ):
                listener.enterAn_post_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_post_delete" ):
                listener.exitAn_post_delete(self)




    def an_post_delete(self):

        localctx = ZmeiLangParser.An_post_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_an_post_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.match(ZmeiLangParser.AN_POST_DELETE)
            self.state = 1108
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_m2m_changedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_M2M_CHANGED(self):
            return self.getToken(ZmeiLangParser.AN_M2M_CHANGED, 0)

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_m2m_changed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_m2m_changed" ):
                listener.enterAn_m2m_changed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_m2m_changed" ):
                listener.exitAn_m2m_changed(self)




    def an_m2m_changed(self):

        localctx = ZmeiLangParser.An_m2m_changedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_an_m2m_changed)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(ZmeiLangParser.AN_M2M_CHANGED)
            self.state = 1111
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_mixinContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_MIXIN(self):
            return self.getToken(ZmeiLangParser.AN_MIXIN, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def classname(self):
            return self.getTypedRuleContext(ZmeiLangParser.ClassnameContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_mixin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_mixin" ):
                listener.enterAn_mixin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_mixin" ):
                listener.exitAn_mixin(self)




    def an_mixin(self):

        localctx = ZmeiLangParser.An_mixinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_an_mixin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.match(ZmeiLangParser.AN_MIXIN)

            self.state = 1114
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 1115
            self.classname()
            self.state = 1116
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_date_treeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_DATE_TREE(self):
            return self.getToken(ZmeiLangParser.AN_DATE_TREE, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_date_tree_field(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_date_tree_fieldContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_date_tree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_date_tree" ):
                listener.enterAn_date_tree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_date_tree" ):
                listener.exitAn_date_tree(self)




    def an_date_tree(self):

        localctx = ZmeiLangParser.An_date_treeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_an_date_tree)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(ZmeiLangParser.AN_DATE_TREE)

            self.state = 1119
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 1120
            self.an_date_tree_field()
            self.state = 1121
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_date_tree_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_date_tree_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_date_tree_field" ):
                listener.enterAn_date_tree_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_date_tree_field" ):
                listener.exitAn_date_tree_field(self)




    def an_date_tree_field(self):

        localctx = ZmeiLangParser.An_date_tree_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_an_date_tree_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_treeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_TREE(self):
            return self.getToken(ZmeiLangParser.AN_TREE, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def an_tree_poly(self):
            return self.getTypedRuleContext(ZmeiLangParser.An_tree_polyContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_tree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_tree" ):
                listener.enterAn_tree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_tree" ):
                listener.exitAn_tree(self)




    def an_tree(self):

        localctx = ZmeiLangParser.An_treeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_an_tree)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(ZmeiLangParser.AN_TREE)
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 1126
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 1127
                self.an_tree_poly()
                self.state = 1128
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_tree_polyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_POLY_LIST(self):
            return self.getToken(ZmeiLangParser.KW_POLY_LIST, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_tree_poly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_tree_poly" ):
                listener.enterAn_tree_poly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_tree_poly" ):
                listener.exitAn_tree_poly(self)




    def an_tree_poly(self):

        localctx = ZmeiLangParser.An_tree_polyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_an_tree_poly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.match(ZmeiLangParser.KW_POLY_LIST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_adminContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AN_ADMIN(self):
            return self.getToken(ZmeiLangParser.AN_ADMIN, 0)

        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def an_admin_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_listContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_listContext,i)


        def an_admin_read_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_read_onlyContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_read_onlyContext,i)


        def an_admin_list_editable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_list_editableContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_list_editableContext,i)


        def an_admin_list_filter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_list_filterContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_list_filterContext,i)


        def an_admin_list_search(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_list_searchContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_list_searchContext,i)


        def an_admin_fields(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_fieldsContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_fieldsContext,i)


        def an_admin_tabs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_tabsContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_tabsContext,i)


        def an_admin_inlines(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_inlinesContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_inlinesContext,i)


        def an_admin_css(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_cssContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_cssContext,i)


        def an_admin_js(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_jsContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_jsContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin" ):
                listener.enterAn_admin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin" ):
                listener.exitAn_admin(self)




    def an_admin(self):

        localctx = ZmeiLangParser.An_adminContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_an_admin)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(ZmeiLangParser.AN_ADMIN)
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 1135
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 1150
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1148
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [ZmeiLangParser.KW_LIST]:
                            self.state = 1136
                            self.an_admin_list()
                            pass
                        elif token in [ZmeiLangParser.KW_READ_ONLY]:
                            self.state = 1137
                            self.an_admin_read_only()
                            pass
                        elif token in [ZmeiLangParser.KW_LIST_EDITABLE]:
                            self.state = 1138
                            self.an_admin_list_editable()
                            pass
                        elif token in [ZmeiLangParser.KW_LIST_FILTER]:
                            self.state = 1139
                            self.an_admin_list_filter()
                            pass
                        elif token in [ZmeiLangParser.KW_LIST_SEARCH]:
                            self.state = 1140
                            self.an_admin_list_search()
                            pass
                        elif token in [ZmeiLangParser.KW_FIELDS]:
                            self.state = 1141
                            self.an_admin_fields()
                            pass
                        elif token in [ZmeiLangParser.KW_TABS]:
                            self.state = 1142
                            self.an_admin_tabs()
                            pass
                        elif token in [ZmeiLangParser.KW_INLINE]:
                            self.state = 1143
                            self.an_admin_inlines()
                            pass
                        elif token in [ZmeiLangParser.KW_CSS]:
                            self.state = 1144
                            self.an_admin_css()
                            pass
                        elif token in [ZmeiLangParser.KW_JS]:
                            self.state = 1145
                            self.an_admin_js()
                            pass
                        elif token in [ZmeiLangParser.NL]:
                            self.state = 1146
                            self.match(ZmeiLangParser.NL)
                            pass
                        elif token in [ZmeiLangParser.COMA]:
                            self.state = 1147
                            self.match(ZmeiLangParser.COMA)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1152
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ZmeiLangParser.NL:
                    self.state = 1153
                    self.match(ZmeiLangParser.NL)
                    self.state = 1158
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1159
                self.match(ZmeiLangParser.BRACE_CLOSE)


            self.state = 1165
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1162
                    self.match(ZmeiLangParser.NL) 
                self.state = 1167
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_jsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_JS(self):
            return self.getToken(ZmeiLangParser.KW_JS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_admin_js_file_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_js_file_nameContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_js_file_nameContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_js

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_js" ):
                listener.enterAn_admin_js(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_js" ):
                listener.exitAn_admin_js(self)




    def an_admin_js(self):

        localctx = ZmeiLangParser.An_admin_jsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_an_admin_js)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(ZmeiLangParser.KW_JS)
            self.state = 1169
            self.match(ZmeiLangParser.COLON)
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.NL:
                self.state = 1170
                self.match(ZmeiLangParser.NL)
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1176
            self.an_admin_js_file_name()
            self.state = 1187
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1177
                    self.match(ZmeiLangParser.COMA)
                    self.state = 1181
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ZmeiLangParser.NL:
                        self.state = 1178
                        self.match(ZmeiLangParser.NL)
                        self.state = 1183
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1184
                    self.an_admin_js_file_name() 
                self.state = 1189
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_cssContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CSS(self):
            return self.getToken(ZmeiLangParser.KW_CSS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_admin_css_file_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_css_file_nameContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_css_file_nameContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_css

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_css" ):
                listener.enterAn_admin_css(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_css" ):
                listener.exitAn_admin_css(self)




    def an_admin_css(self):

        localctx = ZmeiLangParser.An_admin_cssContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_an_admin_css)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(ZmeiLangParser.KW_CSS)
            self.state = 1191
            self.match(ZmeiLangParser.COLON)
            self.state = 1192
            self.an_admin_css_file_name()
            self.state = 1197
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1193
                    self.match(ZmeiLangParser.COMA)
                    self.state = 1194
                    self.an_admin_css_file_name() 
                self.state = 1199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_css_file_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_css_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_css_file_name" ):
                listener.enterAn_admin_css_file_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_css_file_name" ):
                listener.exitAn_admin_css_file_name(self)




    def an_admin_css_file_name(self):

        localctx = ZmeiLangParser.An_admin_css_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_an_admin_css_file_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_js_file_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_js_file_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_js_file_name" ):
                listener.enterAn_admin_js_file_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_js_file_name" ):
                listener.exitAn_admin_js_file_name(self)




    def an_admin_js_file_name(self):

        localctx = ZmeiLangParser.An_admin_js_file_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_an_admin_js_file_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_inlinesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INLINE(self):
            return self.getToken(ZmeiLangParser.KW_INLINE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_admin_inline(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_inlineContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_inlineContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_inlines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_inlines" ):
                listener.enterAn_admin_inlines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_inlines" ):
                listener.exitAn_admin_inlines(self)




    def an_admin_inlines(self):

        localctx = ZmeiLangParser.An_admin_inlinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_an_admin_inlines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.match(ZmeiLangParser.KW_INLINE)
            self.state = 1205
            self.match(ZmeiLangParser.COLON)
            self.state = 1206
            self.an_admin_inline()
            self.state = 1211
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1207
                    self.match(ZmeiLangParser.COMA)
                    self.state = 1208
                    self.an_admin_inline() 
                self.state = 1213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_inlineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inline_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Inline_nameContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def inline_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Inline_typeContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Inline_typeContext,i)


        def inline_extra(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Inline_extraContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Inline_extraContext,i)


        def inline_fields(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Inline_fieldsContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Inline_fieldsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_inline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_inline" ):
                listener.enterAn_admin_inline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_inline" ):
                listener.exitAn_admin_inline(self)




    def an_admin_inline(self):

        localctx = ZmeiLangParser.An_admin_inlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_an_admin_inline)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.inline_name()
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.BRACE_OPEN:
                self.state = 1215
                self.match(ZmeiLangParser.BRACE_OPEN)
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & ((1 << (ZmeiLangParser.KW_TYPE - 26)) | (1 << (ZmeiLangParser.KW_EXTRA - 26)) | (1 << (ZmeiLangParser.KW_FIELDS - 26)) | (1 << (ZmeiLangParser.NL - 26)) | (1 << (ZmeiLangParser.COMA - 26)))) != 0):
                    self.state = 1221
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [ZmeiLangParser.KW_TYPE]:
                        self.state = 1216
                        self.inline_type()
                        pass
                    elif token in [ZmeiLangParser.KW_EXTRA]:
                        self.state = 1217
                        self.inline_extra()
                        pass
                    elif token in [ZmeiLangParser.KW_FIELDS]:
                        self.state = 1218
                        self.inline_fields()
                        pass
                    elif token in [ZmeiLangParser.NL]:
                        self.state = 1219
                        self.match(ZmeiLangParser.NL)
                        pass
                    elif token in [ZmeiLangParser.COMA]:
                        self.state = 1220
                        self.match(ZmeiLangParser.COMA)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1226
                self.match(ZmeiLangParser.BRACE_CLOSE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inline_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_inline_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_name" ):
                listener.enterInline_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_name" ):
                listener.exitInline_name(self)




    def inline_name(self):

        localctx = ZmeiLangParser.Inline_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_inline_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inline_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_TYPE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def KW_INLINE_TYPE(self):
            return self.getToken(ZmeiLangParser.KW_INLINE_TYPE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_inline_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_type" ):
                listener.enterInline_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_type" ):
                listener.exitInline_type(self)




    def inline_type(self):

        localctx = ZmeiLangParser.Inline_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_inline_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.match(ZmeiLangParser.KW_TYPE)
            self.state = 1232
            self.match(ZmeiLangParser.COLON)
            self.state = 1233
            self.match(ZmeiLangParser.KW_INLINE_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inline_extraContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXTRA(self):
            return self.getToken(ZmeiLangParser.KW_EXTRA, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def DIGIT(self):
            return self.getToken(ZmeiLangParser.DIGIT, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_inline_extra

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_extra" ):
                listener.enterInline_extra(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_extra" ):
                listener.exitInline_extra(self)




    def inline_extra(self):

        localctx = ZmeiLangParser.Inline_extraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_inline_extra)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(ZmeiLangParser.KW_EXTRA)
            self.state = 1236
            self.match(ZmeiLangParser.COLON)
            self.state = 1237
            self.match(ZmeiLangParser.DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Inline_fieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIELDS(self):
            return self.getToken(ZmeiLangParser.KW_FIELDS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_inline_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_fields" ):
                listener.enterInline_fields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_fields" ):
                listener.exitInline_fields(self)




    def inline_fields(self):

        localctx = ZmeiLangParser.Inline_fieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_inline_fields)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(ZmeiLangParser.KW_FIELDS)
            self.state = 1240
            self.match(ZmeiLangParser.COLON)
            self.state = 1241
            self.field_list_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_tabsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TABS(self):
            return self.getToken(ZmeiLangParser.KW_TABS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def an_admin_tab(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.An_admin_tabContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.An_admin_tabContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COMA)
            else:
                return self.getToken(ZmeiLangParser.COMA, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_tabs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_tabs" ):
                listener.enterAn_admin_tabs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_tabs" ):
                listener.exitAn_admin_tabs(self)




    def an_admin_tabs(self):

        localctx = ZmeiLangParser.An_admin_tabsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_an_admin_tabs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(ZmeiLangParser.KW_TABS)
            self.state = 1244
            self.match(ZmeiLangParser.COLON)
            self.state = 1245
            self.an_admin_tab()
            self.state = 1250
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1246
                    self.match(ZmeiLangParser.COMA)
                    self.state = 1247
                    self.an_admin_tab() 
                self.state = 1252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_tabContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tab_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Tab_nameContext,0)


        def BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.BRACE_OPEN, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.BRACE_CLOSE, 0)

        def tab_verbose_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Tab_verbose_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_tab

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_tab" ):
                listener.enterAn_admin_tab(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_tab" ):
                listener.exitAn_admin_tab(self)




    def an_admin_tab(self):

        localctx = ZmeiLangParser.An_admin_tabContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_an_admin_tab)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.tab_name()
            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ:
                self.state = 1254
                self.tab_verbose_name()


            self.state = 1257
            self.match(ZmeiLangParser.BRACE_OPEN)
            self.state = 1258
            self.field_list_expr()
            self.state = 1259
            self.match(ZmeiLangParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tab_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_tab_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTab_name" ):
                listener.enterTab_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTab_name" ):
                listener.exitTab_name(self)




    def tab_name(self):

        localctx = ZmeiLangParser.Tab_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_tab_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1261
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tab_verbose_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_DQ(self):
            return self.getToken(ZmeiLangParser.STRING_DQ, 0)

        def STRING_SQ(self):
            return self.getToken(ZmeiLangParser.STRING_SQ, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_tab_verbose_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTab_verbose_name" ):
                listener.enterTab_verbose_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTab_verbose_name" ):
                listener.exitTab_verbose_name(self)




    def tab_verbose_name(self):

        localctx = ZmeiLangParser.Tab_verbose_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_tab_verbose_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            _la = self._input.LA(1)
            if not(_la==ZmeiLangParser.STRING_DQ or _la==ZmeiLangParser.STRING_SQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIST(self):
            return self.getToken(ZmeiLangParser.KW_LIST, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_list" ):
                listener.enterAn_admin_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_list" ):
                listener.exitAn_admin_list(self)




    def an_admin_list(self):

        localctx = ZmeiLangParser.An_admin_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_an_admin_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(ZmeiLangParser.KW_LIST)
            self.state = 1266
            self.match(ZmeiLangParser.COLON)
            self.state = 1267
            self.field_list_expr()
            self.state = 1271
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1268
                    self.match(ZmeiLangParser.NL) 
                self.state = 1273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_read_onlyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_READ_ONLY(self):
            return self.getToken(ZmeiLangParser.KW_READ_ONLY, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_read_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_read_only" ):
                listener.enterAn_admin_read_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_read_only" ):
                listener.exitAn_admin_read_only(self)




    def an_admin_read_only(self):

        localctx = ZmeiLangParser.An_admin_read_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_an_admin_read_only)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(ZmeiLangParser.KW_READ_ONLY)
            self.state = 1275
            self.match(ZmeiLangParser.COLON)
            self.state = 1276
            self.field_list_expr()
            self.state = 1280
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1277
                    self.match(ZmeiLangParser.NL) 
                self.state = 1282
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_list_editableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIST_EDITABLE(self):
            return self.getToken(ZmeiLangParser.KW_LIST_EDITABLE, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_list_editable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_list_editable" ):
                listener.enterAn_admin_list_editable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_list_editable" ):
                listener.exitAn_admin_list_editable(self)




    def an_admin_list_editable(self):

        localctx = ZmeiLangParser.An_admin_list_editableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_an_admin_list_editable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(ZmeiLangParser.KW_LIST_EDITABLE)
            self.state = 1284
            self.match(ZmeiLangParser.COLON)
            self.state = 1285
            self.field_list_expr()
            self.state = 1289
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1286
                    self.match(ZmeiLangParser.NL) 
                self.state = 1291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_list_filterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIST_FILTER(self):
            return self.getToken(ZmeiLangParser.KW_LIST_FILTER, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_list_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_list_filter" ):
                listener.enterAn_admin_list_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_list_filter" ):
                listener.exitAn_admin_list_filter(self)




    def an_admin_list_filter(self):

        localctx = ZmeiLangParser.An_admin_list_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_an_admin_list_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(ZmeiLangParser.KW_LIST_FILTER)
            self.state = 1293
            self.match(ZmeiLangParser.COLON)
            self.state = 1294
            self.field_list_expr()
            self.state = 1298
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1295
                    self.match(ZmeiLangParser.NL) 
                self.state = 1300
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_list_searchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_LIST_SEARCH(self):
            return self.getToken(ZmeiLangParser.KW_LIST_SEARCH, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_list_search

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_list_search" ):
                listener.enterAn_admin_list_search(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_list_search" ):
                listener.exitAn_admin_list_search(self)




    def an_admin_list_search(self):

        localctx = ZmeiLangParser.An_admin_list_searchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_an_admin_list_search)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.match(ZmeiLangParser.KW_LIST_SEARCH)
            self.state = 1302
            self.match(ZmeiLangParser.COLON)
            self.state = 1303
            self.field_list_expr()
            self.state = 1307
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1304
                    self.match(ZmeiLangParser.NL) 
                self.state = 1309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class An_admin_fieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIELDS(self):
            return self.getToken(ZmeiLangParser.KW_FIELDS, 0)

        def COLON(self):
            return self.getToken(ZmeiLangParser.COLON, 0)

        def field_list_expr(self):
            return self.getTypedRuleContext(ZmeiLangParser.Field_list_exprContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_an_admin_fields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAn_admin_fields" ):
                listener.enterAn_admin_fields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAn_admin_fields" ):
                listener.exitAn_admin_fields(self)




    def an_admin_fields(self):

        localctx = ZmeiLangParser.An_admin_fieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_an_admin_fields)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self.match(ZmeiLangParser.KW_FIELDS)
            self.state = 1311
            self.match(ZmeiLangParser.COLON)
            self.state = 1312
            self.field_list_expr()
            self.state = 1316
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1313
                    self.match(ZmeiLangParser.NL) 
                self.state = 1318
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def page_header(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_headerContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def page_field(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Page_fieldContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Page_fieldContext,i)


        def page_element(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_elementContext,0)


        def page_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage" ):
                listener.enterPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage" ):
                listener.exitPage(self)




    def page(self):

        localctx = ZmeiLangParser.PageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_page)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.page_header()
            self.state = 1323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1320
                    self.match(ZmeiLangParser.NL) 
                self.state = 1325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

            self.state = 1329
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1326
                    self.page_field() 
                self.state = 1331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.LT:
                self.state = 1332
                self.page_element()


            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.ASSIGN or _la==ZmeiLangParser.CODE_BLOCK_START:
                self.state = 1335
                self.page_code()


            self.state = 1341
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1338
                    self.match(ZmeiLangParser.NL) 
                self.state = 1343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_codeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_code" ):
                listener.enterPage_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_code" ):
                listener.exitPage_code(self)




    def page_code(self):

        localctx = ZmeiLangParser.Page_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_page_code)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.python_code()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_headerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQ_BRACE_OPEN(self):
            return self.getToken(ZmeiLangParser.SQ_BRACE_OPEN, 0)

        def page_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_nameContext,0)


        def SQ_BRACE_CLOSE(self):
            return self.getToken(ZmeiLangParser.SQ_BRACE_CLOSE, 0)

        def NL(self):
            return self.getToken(ZmeiLangParser.NL, 0)

        def page_base(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_baseContext,0)


        def page_alias(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_aliasContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.COLON)
            else:
                return self.getToken(ZmeiLangParser.COLON, i)

        def page_url(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_urlContext,0)


        def page_template(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_templateContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_header" ):
                listener.enterPage_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_header" ):
                listener.exitPage_header(self)




    def page_header(self):

        localctx = ZmeiLangParser.Page_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_page_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(ZmeiLangParser.SQ_BRACE_OPEN)
            self.state = 1348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1347
                self.page_base()


            self.state = 1350
            self.page_name()
            self.state = 1352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.KW_AS:
                self.state = 1351
                self.page_alias()


            self.state = 1362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.COLON:
                self.state = 1354
                self.match(ZmeiLangParser.COLON)
                self.state = 1356
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1355
                    self.page_url()


                self.state = 1360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==ZmeiLangParser.COLON:
                    self.state = 1358
                    self.match(ZmeiLangParser.COLON)
                    self.state = 1359
                    self.page_template()




            self.state = 1364
            self.match(ZmeiLangParser.SQ_BRACE_CLOSE)
            self.state = 1365
            self.match(ZmeiLangParser.NL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_baseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def DASH(self):
            return self.getToken(ZmeiLangParser.DASH, 0)

        def GT(self):
            return self.getToken(ZmeiLangParser.GT, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_base" ):
                listener.enterPage_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_base" ):
                listener.exitPage_base(self)




    def page_base(self):

        localctx = ZmeiLangParser.Page_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_page_base)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.id_or_kw()
            self.state = 1368
            self.match(ZmeiLangParser.DASH)
            self.state = 1369
            self.match(ZmeiLangParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_AS(self):
            return self.getToken(ZmeiLangParser.KW_AS, 0)

        def page_alias_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_alias_nameContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_alias" ):
                listener.enterPage_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_alias" ):
                listener.exitPage_alias(self)




    def page_alias(self):

        localctx = ZmeiLangParser.Page_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_page_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.match(ZmeiLangParser.KW_AS)
            self.state = 1372
            self.page_alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_alias_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_alias_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_alias_name" ):
                listener.enterPage_alias_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_alias_name" ):
                listener.exitPage_alias_name(self)




    def page_alias_name(self):

        localctx = ZmeiLangParser.Page_alias_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_page_alias_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_elementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xml_element(self):
            return self.getTypedRuleContext(ZmeiLangParser.Xml_elementContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_element" ):
                listener.enterPage_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_element" ):
                listener.exitPage_element(self)




    def page_element(self):

        localctx = ZmeiLangParser.Page_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_page_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.xml_element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_templateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def template_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Template_nameContext,0)


        def python_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Python_codeContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_template

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_template" ):
                listener.enterPage_template(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_template" ):
                listener.exitPage_template(self)




    def page_template(self):

        localctx = ZmeiLangParser.Page_templateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_page_template)
        try:
            self.state = 1380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID, ZmeiLangParser.DIGIT, ZmeiLangParser.UNDERSCORE, ZmeiLangParser.DASH, ZmeiLangParser.DOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.template_name()
                pass
            elif token in [ZmeiLangParser.ASSIGN, ZmeiLangParser.CODE_BLOCK_START]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                self.python_code()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Template_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_name_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.File_name_partContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.File_name_partContext,i)


        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.SLASH)
            else:
                return self.getToken(ZmeiLangParser.SLASH, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_template_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplate_name" ):
                listener.enterTemplate_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplate_name" ):
                listener.exitTemplate_name(self)




    def template_name(self):

        localctx = ZmeiLangParser.Template_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_template_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self.file_name_part()
            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ZmeiLangParser.SLASH:
                self.state = 1383
                self.match(ZmeiLangParser.SLASH)
                self.state = 1384
                self.file_name_part()
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_name_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Id_or_kwContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,i)


        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.DIGIT)
            else:
                return self.getToken(ZmeiLangParser.DIGIT, i)

        def DASH(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.DASH)
            else:
                return self.getToken(ZmeiLangParser.DASH, i)

        def UNDERSCORE(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.UNDERSCORE)
            else:
                return self.getToken(ZmeiLangParser.UNDERSCORE, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.DOT)
            else:
                return self.getToken(ZmeiLangParser.DOT, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_file_name_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_name_part" ):
                listener.enterFile_name_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_name_part" ):
                listener.exitFile_name_part(self)




    def file_name_part(self):

        localctx = ZmeiLangParser.File_name_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_file_name_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1395
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                    self.state = 1390
                    self.id_or_kw()
                    pass
                elif token in [ZmeiLangParser.DIGIT]:
                    self.state = 1391
                    self.match(ZmeiLangParser.DIGIT)
                    pass
                elif token in [ZmeiLangParser.DASH]:
                    self.state = 1392
                    self.match(ZmeiLangParser.DASH)
                    pass
                elif token in [ZmeiLangParser.UNDERSCORE]:
                    self.state = 1393
                    self.match(ZmeiLangParser.UNDERSCORE)
                    pass
                elif token in [ZmeiLangParser.DOT]:
                    self.state = 1394
                    self.match(ZmeiLangParser.DOT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1397 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ZmeiLangParser.WRITE_MODE) | (1 << ZmeiLangParser.BOOL) | (1 << ZmeiLangParser.KW_POLY_LIST) | (1 << ZmeiLangParser.KW_CSS) | (1 << ZmeiLangParser.KW_JS) | (1 << ZmeiLangParser.KW_INLINE_TYPE) | (1 << ZmeiLangParser.KW_AUTH_TYPE) | (1 << ZmeiLangParser.KW_INLINE) | (1 << ZmeiLangParser.KW_TYPE) | (1 << ZmeiLangParser.KW_USER_FIELD) | (1 << ZmeiLangParser.KW_ANNOTATE) | (1 << ZmeiLangParser.KW_ON_CREATE) | (1 << ZmeiLangParser.KW_QUERY) | (1 << ZmeiLangParser.KW_AUTH) | (1 << ZmeiLangParser.KW_COUNT) | (1 << ZmeiLangParser.KW_I18N) | (1 << ZmeiLangParser.KW_EXTRA) | (1 << ZmeiLangParser.KW_TABS) | (1 << ZmeiLangParser.KW_LIST) | (1 << ZmeiLangParser.KW_READ_ONLY) | (1 << ZmeiLangParser.KW_LIST_EDITABLE) | (1 << ZmeiLangParser.KW_LIST_FILTER) | (1 << ZmeiLangParser.KW_LIST_SEARCH) | (1 << ZmeiLangParser.KW_FIELDS) | (1 << ZmeiLangParser.KW_IMPORT) | (1 << ZmeiLangParser.KW_AS) | (1 << ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_HTML) | (1 << ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FLOAT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DECIMAL) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DATE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_DATETIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME) | (1 << ZmeiLangParser.COL_FIELD_TYPE_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER) | (1 << ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER) | (1 << ZmeiLangParser.COL_FIELD_TYPE_TEXT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_INT) | (1 << ZmeiLangParser.COL_FIELD_TYPE_SLUG) | (1 << ZmeiLangParser.COL_FIELD_TYPE_BOOL) | (1 << ZmeiLangParser.COL_FIELD_TYPE_ONE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 64)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 64)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 64)) | (1 << (ZmeiLangParser.ID - 64)) | (1 << (ZmeiLangParser.DIGIT - 64)) | (1 << (ZmeiLangParser.UNDERSCORE - 64)) | (1 << (ZmeiLangParser.DASH - 64)) | (1 << (ZmeiLangParser.DOT - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_urlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def url_segments(self):
            return self.getTypedRuleContext(ZmeiLangParser.Url_segmentsContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_url" ):
                listener.enterPage_url(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_url" ):
                listener.exitPage_url(self)




    def page_url(self):

        localctx = ZmeiLangParser.Page_urlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_page_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            self.url_segments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Url_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Id_or_kwContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,i)


        def DASH(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.DASH)
            else:
                return self.getToken(ZmeiLangParser.DASH, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.DIGIT)
            else:
                return self.getToken(ZmeiLangParser.DIGIT, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_url_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUrl_part" ):
                listener.enterUrl_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUrl_part" ):
                listener.exitUrl_part(self)




    def url_part(self):

        localctx = ZmeiLangParser.Url_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_url_part)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1404
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID]:
                    self.state = 1401
                    self.id_or_kw()
                    pass
                elif token in [ZmeiLangParser.DASH]:
                    self.state = 1402
                    self.match(ZmeiLangParser.DASH)
                    pass
                elif token in [ZmeiLangParser.DIGIT]:
                    self.state = 1403
                    self.match(ZmeiLangParser.DIGIT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ZmeiLangParser.WRITE_MODE - 18)) | (1 << (ZmeiLangParser.BOOL - 18)) | (1 << (ZmeiLangParser.KW_POLY_LIST - 18)) | (1 << (ZmeiLangParser.KW_CSS - 18)) | (1 << (ZmeiLangParser.KW_JS - 18)) | (1 << (ZmeiLangParser.KW_INLINE_TYPE - 18)) | (1 << (ZmeiLangParser.KW_AUTH_TYPE - 18)) | (1 << (ZmeiLangParser.KW_INLINE - 18)) | (1 << (ZmeiLangParser.KW_TYPE - 18)) | (1 << (ZmeiLangParser.KW_USER_FIELD - 18)) | (1 << (ZmeiLangParser.KW_ANNOTATE - 18)) | (1 << (ZmeiLangParser.KW_ON_CREATE - 18)) | (1 << (ZmeiLangParser.KW_QUERY - 18)) | (1 << (ZmeiLangParser.KW_AUTH - 18)) | (1 << (ZmeiLangParser.KW_COUNT - 18)) | (1 << (ZmeiLangParser.KW_I18N - 18)) | (1 << (ZmeiLangParser.KW_EXTRA - 18)) | (1 << (ZmeiLangParser.KW_TABS - 18)) | (1 << (ZmeiLangParser.KW_LIST - 18)) | (1 << (ZmeiLangParser.KW_READ_ONLY - 18)) | (1 << (ZmeiLangParser.KW_LIST_EDITABLE - 18)) | (1 << (ZmeiLangParser.KW_LIST_FILTER - 18)) | (1 << (ZmeiLangParser.KW_LIST_SEARCH - 18)) | (1 << (ZmeiLangParser.KW_FIELDS - 18)) | (1 << (ZmeiLangParser.KW_IMPORT - 18)) | (1 << (ZmeiLangParser.KW_AS - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FLOAT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DECIMAL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATETIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_TEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_INT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_SLUG - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_BOOL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 18)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 18)) | (1 << (ZmeiLangParser.ID - 18)) | (1 << (ZmeiLangParser.DIGIT - 18)) | (1 << (ZmeiLangParser.DASH - 18)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Url_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(ZmeiLangParser.LT, 0)

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def GT(self):
            return self.getToken(ZmeiLangParser.GT, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_url_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUrl_param" ):
                listener.enterUrl_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUrl_param" ):
                listener.exitUrl_param(self)




    def url_param(self):

        localctx = ZmeiLangParser.Url_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_url_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.match(ZmeiLangParser.LT)
            self.state = 1409
            self.id_or_kw()
            self.state = 1410
            self.match(ZmeiLangParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Url_segmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def url_part(self):
            return self.getTypedRuleContext(ZmeiLangParser.Url_partContext,0)


        def url_param(self):
            return self.getTypedRuleContext(ZmeiLangParser.Url_paramContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_url_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUrl_segment" ):
                listener.enterUrl_segment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUrl_segment" ):
                listener.exitUrl_segment(self)




    def url_segment(self):

        localctx = ZmeiLangParser.Url_segmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_url_segment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.WRITE_MODE, ZmeiLangParser.BOOL, ZmeiLangParser.KW_POLY_LIST, ZmeiLangParser.KW_CSS, ZmeiLangParser.KW_JS, ZmeiLangParser.KW_INLINE_TYPE, ZmeiLangParser.KW_AUTH_TYPE, ZmeiLangParser.KW_INLINE, ZmeiLangParser.KW_TYPE, ZmeiLangParser.KW_USER_FIELD, ZmeiLangParser.KW_ANNOTATE, ZmeiLangParser.KW_ON_CREATE, ZmeiLangParser.KW_QUERY, ZmeiLangParser.KW_AUTH, ZmeiLangParser.KW_COUNT, ZmeiLangParser.KW_I18N, ZmeiLangParser.KW_EXTRA, ZmeiLangParser.KW_TABS, ZmeiLangParser.KW_LIST, ZmeiLangParser.KW_READ_ONLY, ZmeiLangParser.KW_LIST_EDITABLE, ZmeiLangParser.KW_LIST_FILTER, ZmeiLangParser.KW_LIST_SEARCH, ZmeiLangParser.KW_FIELDS, ZmeiLangParser.KW_IMPORT, ZmeiLangParser.KW_AS, ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT, ZmeiLangParser.COL_FIELD_TYPE_HTML, ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA, ZmeiLangParser.COL_FIELD_TYPE_FLOAT, ZmeiLangParser.COL_FIELD_TYPE_DECIMAL, ZmeiLangParser.COL_FIELD_TYPE_DATE, ZmeiLangParser.COL_FIELD_TYPE_DATETIME, ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME, ZmeiLangParser.COL_FIELD_TYPE_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE, ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER, ZmeiLangParser.COL_FIELD_TYPE_TEXT, ZmeiLangParser.COL_FIELD_TYPE_INT, ZmeiLangParser.COL_FIELD_TYPE_SLUG, ZmeiLangParser.COL_FIELD_TYPE_BOOL, ZmeiLangParser.COL_FIELD_TYPE_ONE, ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE, ZmeiLangParser.COL_FIELD_TYPE_MANY, ZmeiLangParser.COL_FIELD_CHOICES, ZmeiLangParser.ID, ZmeiLangParser.DIGIT, ZmeiLangParser.DASH]:
                self.state = 1412
                self.url_part()
                pass
            elif token in [ZmeiLangParser.LT]:
                self.state = 1413
                self.url_param()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Url_segmentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.SLASH)
            else:
                return self.getToken(ZmeiLangParser.SLASH, i)

        def url_segment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ZmeiLangParser.Url_segmentContext)
            else:
                return self.getTypedRuleContext(ZmeiLangParser.Url_segmentContext,i)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_url_segments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUrl_segments" ):
                listener.enterUrl_segments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUrl_segments" ):
                listener.exitUrl_segments(self)




    def url_segments(self):

        localctx = ZmeiLangParser.Url_segmentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_url_segments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1416
                self.match(ZmeiLangParser.SLASH)


            self.state = 1420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (ZmeiLangParser.WRITE_MODE - 18)) | (1 << (ZmeiLangParser.BOOL - 18)) | (1 << (ZmeiLangParser.KW_POLY_LIST - 18)) | (1 << (ZmeiLangParser.KW_CSS - 18)) | (1 << (ZmeiLangParser.KW_JS - 18)) | (1 << (ZmeiLangParser.KW_INLINE_TYPE - 18)) | (1 << (ZmeiLangParser.KW_AUTH_TYPE - 18)) | (1 << (ZmeiLangParser.KW_INLINE - 18)) | (1 << (ZmeiLangParser.KW_TYPE - 18)) | (1 << (ZmeiLangParser.KW_USER_FIELD - 18)) | (1 << (ZmeiLangParser.KW_ANNOTATE - 18)) | (1 << (ZmeiLangParser.KW_ON_CREATE - 18)) | (1 << (ZmeiLangParser.KW_QUERY - 18)) | (1 << (ZmeiLangParser.KW_AUTH - 18)) | (1 << (ZmeiLangParser.KW_COUNT - 18)) | (1 << (ZmeiLangParser.KW_I18N - 18)) | (1 << (ZmeiLangParser.KW_EXTRA - 18)) | (1 << (ZmeiLangParser.KW_TABS - 18)) | (1 << (ZmeiLangParser.KW_LIST - 18)) | (1 << (ZmeiLangParser.KW_READ_ONLY - 18)) | (1 << (ZmeiLangParser.KW_LIST_EDITABLE - 18)) | (1 << (ZmeiLangParser.KW_LIST_FILTER - 18)) | (1 << (ZmeiLangParser.KW_LIST_SEARCH - 18)) | (1 << (ZmeiLangParser.KW_FIELDS - 18)) | (1 << (ZmeiLangParser.KW_IMPORT - 18)) | (1 << (ZmeiLangParser.KW_AS - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_LONGTEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_HTML_MEDIA - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FLOAT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DECIMAL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_DATETIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_CREATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_UPDATE_TIME - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FILE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_FILER_IMAGE_FOLDER - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_TEXT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_INT - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_SLUG - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_BOOL - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_ONE2ONE - 18)) | (1 << (ZmeiLangParser.COL_FIELD_TYPE_MANY - 18)) | (1 << (ZmeiLangParser.COL_FIELD_CHOICES - 18)) | (1 << (ZmeiLangParser.ID - 18)) | (1 << (ZmeiLangParser.DIGIT - 18)) | (1 << (ZmeiLangParser.LT - 18)) | (1 << (ZmeiLangParser.DASH - 18)))) != 0):
                self.state = 1419
                self.url_segment()


            self.state = 1426
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1422
                    self.match(ZmeiLangParser.SLASH)
                    self.state = 1423
                    self.url_segment() 
                self.state = 1428
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ZmeiLangParser.SLASH:
                self.state = 1429
                self.match(ZmeiLangParser.SLASH)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_name" ):
                listener.enterPage_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_name" ):
                listener.exitPage_name(self)




    def page_name(self):

        localctx = ZmeiLangParser.Page_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_page_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_fieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def page_field_name(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_field_nameContext,0)


        def ASSIGN(self):
            return self.getToken(ZmeiLangParser.ASSIGN, 0)

        def page_field_code(self):
            return self.getTypedRuleContext(ZmeiLangParser.Page_field_codeContext,0)


        def EOF(self):
            return self.getToken(ZmeiLangParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ZmeiLangParser.NL)
            else:
                return self.getToken(ZmeiLangParser.NL, i)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_field" ):
                listener.enterPage_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_field" ):
                listener.exitPage_field(self)




    def page_field(self):

        localctx = ZmeiLangParser.Page_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_page_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.page_field_name()
            self.state = 1435
            self.match(ZmeiLangParser.ASSIGN)
            self.state = 1436
            self.page_field_code()
            self.state = 1443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ZmeiLangParser.NL]:
                self.state = 1438 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1437
                        self.match(ZmeiLangParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1440 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

                pass
            elif token in [ZmeiLangParser.EOF]:
                self.state = 1442
                self.match(ZmeiLangParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_field_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_or_kw(self):
            return self.getTypedRuleContext(ZmeiLangParser.Id_or_kwContext,0)


        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_field_name" ):
                listener.enterPage_field_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_field_name" ):
                listener.exitPage_field_name(self)




    def page_field_name(self):

        localctx = ZmeiLangParser.Page_field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_page_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.id_or_kw()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Page_field_codeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PYTHON_CODE(self):
            return self.getToken(ZmeiLangParser.PYTHON_CODE, 0)

        def getRuleIndex(self):
            return ZmeiLangParser.RULE_page_field_code

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPage_field_code" ):
                listener.enterPage_field_code(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPage_field_code" ):
                listener.exitPage_field_code(self)




    def page_field_code(self):

        localctx = ZmeiLangParser.Page_field_codeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_page_field_code)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(ZmeiLangParser.PYTHON_CODE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





